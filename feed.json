{
    "version": "https://jsonfeed.org/version/1",
    "title": "幽化猫の博客",
    "subtitle": "生活朗朗，万物可爱",
    "icon": "https://love.youhuamao.xyz/images/favicon.ico",
    "description": "这是一个人的博客",
    "home_page_url": "https://love.youhuamao.xyz",
    "items": [
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/shujuku/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "url": "https://love.youhuamao.xyz/2022/10/16/shujuku/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "title": "数据库连接池",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<h1 id=\"dbcp-c3p0连接池\"><a class=\"anchor\" href=\"#dbcp-c3p0连接池\">#</a> DBCP-C3P0 连接池</h1>\n<p>数据库连接 -- 执行完毕 -- 释放</p>\n<p>连接 -- 释放 是十分浪费系统资源的</p>\n<p>池化技术：准备一些预先的资源，过来就连接预先准备好的</p>\n<p>最小连接数：10 (常用连接)</p>\n<p>最大连接数：100 （业务最高承载上线）</p>\n<p>等待超时：100ms</p>\n<p>编写连接池，实现一个接口 DataSource</p>\n<h2 id=\"开源数据源实现\"><a class=\"anchor\" href=\"#开源数据源实现\">#</a> 开源数据源实现</h2>\n<ul>\n<li>DBCP</li>\n<li>C3p0</li>\n<li>Druid: 阿里巴巴<br />\n使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</li>\n</ul>\n<h2 id=\"dbcp\"><a class=\"anchor\" href=\"#dbcp\">#</a> DBCP</h2>\n<p>需要用到的 jar 包<br />\n commons-dbcp-1.4  commons-pool-1.6</p>\n<ul>\n<li>配置文件 dbcp.properties</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#连接设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">driverClassName</span><span class=\"token operator\">=</span>com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#初始化连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">initialSize</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#最大连接数量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">maxActive</span><span class=\"token operator\">=</span><span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#最大空闲连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">maxIdle</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#最小空闲连接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">minIdle</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#超时等待时间以毫秒为单位 6000 毫秒 / 1000 等于 60 秒</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token assign-left variable\">maxWait</span><span class=\"token operator\">=</span><span class=\"token number\">60000</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#JDBC 驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名 = property;】</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#注意：user 与 password 两个属性会被明确地传递，因此这里不需要包含他们。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token assign-left variable\">connectionProperties</span><span class=\"token operator\">=</span>useUnicode<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>UTF8</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token assign-left variable\">defaultAutoCommit</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#如果没有设置该值，则 “setReadOnly” 方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token assign-left variable\">defaultReadOnly</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#可用值为下列之一：（详情可见 javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token assign-left variable\">defaultTransactionIsolation</span><span class=\"token operator\">=</span>READ_COMMITTED</pre></td></tr></table></figure><ul>\n<li>工具类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> org.apache.commons.dbcp.BasicDataSourceFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> javax.sql.DataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.io.IOException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.io.InputStream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">import</span> java.util.Properties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @ClassName: JDBCDBCPUtils</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/14 <span class=\"token number\">17</span>:48</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>public class JDBCDBCPUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    private static DataSource dataSource <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    static <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            InputStream <span class=\"token keyword\">in</span> <span class=\"token operator\">=</span> JDBCDBCPUtils.class.getClassLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getResourceAsStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"dbcp.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            Properties properties <span class=\"token operator\">=</span> new Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            properties.load<span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //创建数据源 工厂模式</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            dataSource <span class=\"token operator\">=</span> BasicDataSourceFactory.createDataSource<span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>ClassNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 获取连接</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    public static Connection getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        //从数据源中获取连接</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> dataSource.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 释放资源</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    public static void release<span class=\"token punctuation\">(</span>Connection con, Statement st, ResultSet rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                rs.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                st.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>con <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                con.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson02.utils.JDBCUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @ClassName: TestDBCP</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/15 <span class=\"token number\">22</span>:41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>public class TestDBCP <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            con <span class=\"token operator\">=</span> JDBCDBCPUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>) VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //预编译SQL，先写SQL，然后不执行</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">\"钱七\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">\"qianqi@sina.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            st.setDate<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, new java.sql.Date<span class=\"token punctuation\">(</span>new java.util.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JDBCDBCPUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c3p0\"><a class=\"anchor\" href=\"#c3p0\">#</a> C3P0</h2>\n<p>需要用到的 jar 包<br />\n c3p0-0.9.5.5.jar<br />\nmchange-commons-java-0.2.19.jar</p>\n<ul>\n<li>配置文件 c3p0-config.xml</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>?xml <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span>?<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>c3p0-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    c3p0的缺省（默认）配置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    如果在代码中ComboPooledDataSource <span class=\"token assign-left variable\">ds</span><span class=\"token operator\">=</span>new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>这样写就表示使用的是c3p0的缺省（默认）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>default-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"driverClass\"</span><span class=\"token operator\">></span>com.mysql.jdbc.Driver<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbcUrl\"</span><span class=\"token operator\">></span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">serverTimezone</span><span class=\"token operator\">=</span>UTC<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token operator\">></span>root<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token operator\">></span><span class=\"token number\">12345</span><span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"acquiredIncrement\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"initialPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"minPoolSize\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"maxPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/default-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    c3p0的命名配置</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    如果在代码中ComboPooledDataSource <span class=\"token assign-left variable\">ds</span><span class=\"token operator\">=</span>new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>这样写就表示使用的是name是MySQL</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">&lt;</span>name-config <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"MySQL\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"driverClass\"</span><span class=\"token operator\">></span>com.mysql.jdbc.Driver<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbcUrl\"</span><span class=\"token operator\">></span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">serverTimezone</span><span class=\"token operator\">=</span>UTC<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token operator\">></span>root<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token operator\">></span><span class=\"token number\">12345</span><span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"acquiredIncrement\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"initialPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"minPoolSize\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"maxPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/name-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">&lt;</span>/c3p0-config<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>工具类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> com.mchange.v2.c3p0.ComboPooledDataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @ClassName: JDBCC3P0Utils</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/14 <span class=\"token number\">17</span>:48</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>public class JDBCC3P0Utils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    private static DataSource dataSource <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    //private static ComboPooledDataSource dataSource <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    static <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //代码的方式配置</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>//            dataSource <span class=\"token operator\">=</span> new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>//            dataSource.setDriverClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>//            dataSource.setJdbcUrl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>//            dataSource.setUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>//            dataSource.setPassword<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>//            dataSource.setMaxPoolSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>//            dataSource.setMinPoolSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            //配置文件写法</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            dataSource <span class=\"token operator\">=</span> new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 获取连接</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    public static Connection getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        //从数据源中获取连接</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> dataSource.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 释放资源</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    public static void release<span class=\"token punctuation\">(</span>Connection con, Statement st, ResultSet rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                rs.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                st.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>con <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                con.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson05.utils.JDBCC3P0Utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @ClassName: TestC3P0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/15 <span class=\"token number\">22</span>:41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>public class TestC3P0 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            con <span class=\"token operator\">=</span> JDBCC3P0Utils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>) VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //预编译SQL，先写SQL，然后不执行</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">\"刘八\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">\"liuba@sina.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            st.setDate<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, new java.sql.Date<span class=\"token punctuation\">(</span>new java.util.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JDBCC3P0Utils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<ul>\n<li>无论用什么数据源，本质还是一样的，DataSource 接口不会变，方法就不会变</li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E4%B8%B2%EF%BC%8C%E6%95%B0%E5%AD%97%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E4%B8%B2%EF%BC%8C%E6%95%B0%E5%AD%97%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/",
            "title": "串，数字和广义表",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>#串<br />\n串 ———— 零个或多个任意字符组成的有限序列<br />\n字串 ———— 串中任意个连续字符组成的子序列称为该串的子串<br />\n主串 ———— 包含子串的串相应地称为主串<br />\n字符位置 ———— 字符在序列中的序号为该字符在串中的位置<br />\n字串位置 ———— 子串第一个字符在主串中的位置<br />\n空格串 ———— 由一个或多个空格组成的串，与空串不同<br />\n串相等：当且仅当两个串的长度相等并且各个对应位置上的字符都相同时，这两个串才是相等的<br />\n #串的顺序存储结构<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_9.png\" alt=\"img_9.png\" /><br />\n# 串的链式存储结构<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_10.png\" alt=\"img_10.png\" /><br />\n# 串的模式匹配算法<br />\n BF 算法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_12.png\" alt=\"img_12.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_13.png\" alt=\"img_13.png\" /><br />\nKMP 算法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_14.png\" alt=\"img_14.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_15.png\" alt=\"img_15.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_16.png\" alt=\"img_16.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_17.png\" alt=\"img_17.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_18.png\" alt=\"img_18.png\" /><br />\n# 数组<br />\n数组 ———— 按一定格式排列起来的具有相同类型的数据元素的集合<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_19.png\" alt=\"img_19.png\" /><br />\n# 数组的顺序存储<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_20.png\" alt=\"img_20.png\" /><br />\n 二维数组可有两种存储方式：1 以行序为主序，2 以列序为主序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_21.png\" alt=\"img_21.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_22.png\" alt=\"img_22.png\" /><br />\n 特殊存储方法<br />\n ## 以对角线为顺序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_23.png\" alt=\"img_23.png\" /><br />\n## 稀疏数组的存储<br />\n稀疏矩阵：设在 mx n 的矩阵中有 t 个非零元素。令 δ= t/(m * n)，当 δ≤0.05 时称为稀疏矩阵。<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_24.png\" alt=\"img_24.png\" /><br />\n## 稀疏数组链式存储<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_25.png\" alt=\"img_25.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_26.png\" alt=\"img_26.png\" /><br />\n# 广义表<br />\n广义表 (又称列表 Lists) 是≥0 个元素.... a 的有限序列，其中每 - - 个 a; 或者是原子，或者是一个广义表。<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_27.png\" alt=\"img_27.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_28.png\" alt=\"img_28.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_30.png\" alt=\"img_30.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_32.png\" alt=\"img_32.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/",
            "title": "哈夫曼树及其应用",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p><img data-src=\"/pic/shujujiegouyusuanfa/img_75.png\" alt=\"img_75.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_77.png\" alt=\"img_77.png\" /><br />\n# 哈夫曼算法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_78.png\" alt=\"img_78.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_79.png\" alt=\"img_79.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_80.png\" alt=\"img_80.png\" /><br />\n# 顺序结构存储<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_81.png\" alt=\"img_81.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_82.png\" alt=\"img_82.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_83.png\" alt=\"img_83.png\" /><br />\n# 哈夫曼编码<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_84.png\" alt=\"img_84.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_86.png\" alt=\"img_86.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_85.png\" alt=\"img_85.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E5%9B%BE/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E5%9B%BE/",
            "title": "图",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>完全图：任意两个点都有一条边相连</p>\n<p>稀疏图：有很少边或弧的图 (e&lt;nlogn)</p>\n<p>稠密图：有较多边或弧的图</p>\n<p>网：边 / 弧带权的图</p>\n<p>邻接：有边 / 弧相连的两个顶点之间的关系</p>\n<p><img data-src=\"img_87.png\" alt=\"img_87.png\" /><br />\n 路径：接续的边构成的顶点序列</p>\n<p>路径长度：路径上边或弧的数目 / 权值之和</p>\n<p>回路 (环): 第一一个顶点和最后一个顶点相同的路径</p>\n<p>简单路径：除路径起点和终点可以相同外，其余顶点均不相同的路径</p>\n<p>简单回路 (简单环): 除路径起点和终点相同外，其余顶点均不相同的路径</p>\n<p>连通图 (强连通图)：在无 (有) 向图 G=( V, {E} ) 中，若对任何两个顶点 v、u 都存在从 v 到<br />\n u 的路径 ，则称 G 是连通图 (强连通图)</p>\n<p>权与网：图中边或弧所具有的相关数称为权。表明从一个顶点到另一个顶点的距离或耗费。带权<br />\n的图称 为网。</p>\n<p>连通分量 (强连通分量)：无向图 G 的极大连通子图称为 G 的连通分量</p>\n<p>极大连通子图意思是：该子图是 G 连通子图，将 G 的任何不在该子图中的顶点加入，子图不再连通</p>\n<p>有向图 G 的极大强连通子图称为 G 的强连通分量</p>\n<p>极大强连通子图意思是：该子图是 G 的强连通子图，将 D 的任何不在该子图中的顶点加入，子图不<br />\n再是强连通的</p>\n<p>极小连通子图：该子图是 G 的连通子图，在该子图中删除任何一条边子图不再连通</p>\n<p>生成树：包含无向图 G 所有顶点的极小连通子图</p>\n<p>生成森林：对非连通图，由各个连通分量的生成树的集合<br />\n #图的类型定义<br />\n<img data-src=\"img_89.png\" alt=\"img_89.png\" /><br />\n# 数组（邻接矩阵）表示法<br />\n<img data-src=\"img_90.png\" alt=\"img_90.png\" /><br />\n<img data-src=\"img_88.png\" alt=\"img_88.png\" /><br />\n<img data-src=\"img_91.png\" alt=\"img_91.png\" /><br />\n<img data-src=\"img_92.png\" alt=\"img_92.png\" /><br />\n<img data-src=\"img_93.png\" alt=\"img_93.png\" /><br />\n# 邻接表表示法（链式）<br />\n<img data-src=\"img_94.png\" alt=\"img_94.png\" /><br />\n# 图的邻接存储表示<br />\n<img data-src=\"img_96.png\" alt=\"img_96.png\" /><br />\n<img data-src=\"img_98.png\" alt=\"img_98.png\" /><br />\n<img data-src=\"img_97.png\" alt=\"img_97.png\" /><br />\n<img data-src=\"img_99.png\" alt=\"img_99.png\" /><br />\n<img data-src=\"img_100.png\" alt=\"img_100.png\" /><br />\n# 十字链表<br />\n<img data-src=\"img_101.png\" alt=\"img_101.png\" /><br />\n<img data-src=\"img_103.png\" alt=\"img_103.png\" /><br />\n# 深度优先遍历<br />\n<img data-src=\"img_102.png\" alt=\"img_102.png\" /><br />\n# 广度优先遍历（DFS）<br />\n<img data-src=\"img_104.png\" alt=\"img_104.png\" /><br />\n# 图的应用<br />\n生成树：所有顶点均由边连接在一起，但不存在回路的图<br />\n #最小生成树<br />\n最小生成树：给定一个无向网络在该网的所有生成树中，使得各边权值之和最小的那棵生成树<br />\n称为该网的最小生成树，也叫最小代价生成树。<br />\n# 构建最小生成树 (MST)<br />\n MST 性质：设 N = (V, E) 是一个连通网，U 是顶点集 V 的一个非空子集。若边 (u,v) 是一条<br />\n具有最小权值的边，其中 u∈U，v∈（V-U) 则必存在一棵包含边 (u, v) 的最小生成树。<br />\n## 普里姆算法（prim）<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_105.png\" alt=\"img_105.png\" /><br />\n## 克鲁斯卡尔 (Kruskal)<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_106.png\" alt=\"img_106.png\" /><br />\n# 单源路径<br />\n单源最短路径 —— 用 Dijkstra (迪杰斯特拉) 算法<br />\n所有顶点间的最短路径一用 Floyd (弗洛伊德) 算法<br />\n ##Dijkstra (迪杰斯特拉) 算法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_107.png\" alt=\"img_107.png\" /><br />\n##Floyd (弗洛伊德) 算法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_108.png\" alt=\"img_108.png\" /><br />\n# 拓扑排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_109.png\" alt=\"img_109.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_110.png\" alt=\"img_110.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_111.png\" alt=\"img_111.png\" /><br />\n# 关键路径<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_112.png\" alt=\"img_112.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_114.png\" alt=\"img_114.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_113.png\" alt=\"img_113.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_115.png\" alt=\"img_115.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "title": "基本概念",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>#术语</p>\n<p>数据<br />\n数据元素：组成数据的基本单位<br />\n（与数据的关系：是集合的个体）<br />\n数据项</p>\n<p>数据 &gt; 数据元素 &gt; 数据项<br />\n例子：学生表 &gt; 个人记录 &gt; 学号，名字...</p>\n<p>数据对象：是性质相同的数据元素的集合，是数据的一个子集<br />\n（与数据的关系：集合的子集）<br />\n例子：<br />\n整数数据对象是集合 N = {0，+-1，+-2...}<br />\n 字母字符数据对象是集合 C = {&quot;A&quot;,&quot;B&quot;,&quot;C&quot;...}<br />\n 学籍表也可以看作一个数据对象</p>\n<p>#数据结构<br />\n逻辑结构是数据结构的抽象，存储结构是数据结构的实现</p>\n<p>逻辑结构： （1）线性结构：有且仅有一个开始和一个终端节点并且所有节点<br />\n都最多只有一个直接前趋和一个直接后继（线性表，栈，队列，串）<br />\n（2）非线下结构：可能有多个前趋和多个后继（树，图）</p>\n<p>存储结构：（1）顺序存储结构：依次存储，c 语言种用数组实现<br />\n（2）链式存储结构：c 语言种用指针实现<br />\n（3）索引存储结构<br />\n（4）散列存储：根据关键子直接计算出该节点的存储地址</p>\n<p>#基本操作<br />\n赋值参数：只为操作提供输入值<br />\n引用参数：以 &amp; 打头，除可提供输入值外，还将返回操作结果<br />\n例：<br />\n（a = power（a，b）） == （power（&amp;a，b））</p>\n<p>#算法特性<br />\n有穷性：一个算法执行有穷步之后结束，且每一步都在有穷时间内完成<br />\n确定性：每条指令有确切含义<br />\n可行性：算法可执行<br />\n输入：一个算法有 0 个或多个输入<br />\n输出：一个算法有一个或多个输出</p>\n<p>#算法分析<br />\n算法运行时间 = 一个简单操作所需的时间 * 简单操作的次数<br />\n算法运行时间 = {每条语句的执行次数（语句频度）- 该语句执行一次所需的时间} 的和<br />\n（执行时间为单位时间）<br />\n时间复杂度：T（n）, 取最大数量级<br />\n T（n） = n 的三次方  等于 O（n 的三次方）<br />\n空间复杂度：S（n）<br />\npc -&gt; next = pa?pa:pb 与 if（pa） pa   else pb; 一样</p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%8E%92%E5%BA%8F/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%8E%92%E5%BA%8F/",
            "title": "排序",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p><img data-src=\"/pic/shujujiegouyusuanfa/img_143.png\" alt=\"img_143.png\" /><br />\n# 插入排序<br />\n ## 直接插入排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_144.png\" alt=\"img_144.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_145.png\" alt=\"img_145.png\" /><br />\n## 折半插入排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_146.png\" alt=\"img_146.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_147.png\" alt=\"img_147.png\" /><br />\n## 希尔排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_148.png\" alt=\"img_148.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_149.png\" alt=\"img_149.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_150.png\" alt=\"img_150.png\" /></p>\n<h1 id=\"交换排序\"><a class=\"anchor\" href=\"#交换排序\">#</a> 交换排序</h1>\n<p>## 冒泡排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_152.png\" alt=\"img_152.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_151.png\" alt=\"img_151.png\" /><br />\n## 快速排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_153.png\" alt=\"img_153.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_154.png\" alt=\"img_154.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_155.png\" alt=\"img_155.png\" /><br />\n 谁指空谁不动<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_156.png\" alt=\"img_156.png\" /><br />\n# 选择排序<br />\n ## 简单选择排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_157.png\" alt=\"img_157.png\" /><br />\n## 堆排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_159.png\" alt=\"img_159.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_164.png\" alt=\"img_164.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_160.png\" alt=\"img_160.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_161.png\" alt=\"img_161.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_163.png\" alt=\"img_163.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_162.png\" alt=\"img_162.png\" /><br />\n# 归并排序<br />\n基本思想：将两个或两个以上的有序子序列 &quot; 归并” 为一个有序序列<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_165.png\" alt=\"img_165.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_166.png\" alt=\"img_166.png\" /><br />\n# 基数排序<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_168.png\" alt=\"img_168.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_167.png\" alt=\"img_167.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_169.png\" alt=\"img_169.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_170.png\" alt=\"img_170.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_171.png\" alt=\"img_171.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%9F%A5%E6%89%BE/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%9F%A5%E6%89%BE/",
            "title": "查找",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>#顺序查找<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_116.png\" alt=\"img_116.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_117.png\" alt=\"img_117.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_119.png\" alt=\"img_119.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_120.png\" alt=\"img_120.png\" /><br />\n# 二分查找<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_121.png\" alt=\"img_121.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_122.png\" alt=\"img_122.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_125.png\" alt=\"img_125.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_124.png\" alt=\"img_124.png\" /><br />\n# 二叉排序树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_126.png\" alt=\"img_126.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_127.png\" alt=\"img_127.png\" /><br />\n 左子树比根小，右子树比根大<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_128.png\" alt=\"img_128.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_129.png\" alt=\"img_129.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_130.png\" alt=\"img_130.png\" /><br />\n2 被删除的结点只有左子 树或者只有右子树，用其左子树或者右子树替换它 (结点替换)。<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_132.png\" alt=\"img_132.png\" /><br />\n# 平衡二叉树（AVL 树）<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_131.png\" alt=\"img_131.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_133.png\" alt=\"img_133.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_134.png\" alt=\"img_134.png\" /><br />\n# 散列表的基本概念<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_136.png\" alt=\"img_136.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_135.png\" alt=\"img_135.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_137.png\" alt=\"img_137.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_138.png\" alt=\"img_138.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_139.png\" alt=\"img_139.png\" /><br />\n# 解决冲突<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_140.png\" alt=\"img_140.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_141.png\" alt=\"img_141.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_142.png\" alt=\"img_142.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/",
            "title": "串，数字和广义表",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>#栈和队列<br />\n栈：后进先出<br />\n队列：先进先出<br />\n #栈<br />\n栈是仅在表尾进行插入，删除操作的线性表<br />\n表尾叫栈顶（TOP）表头叫栈底（Base）<br />\n插入元素到栈顶叫入栈<br />\n从栈顶删除最后一个元素叫出栈<br />\n #队列<br />\n队列是在表尾插入，在表头删除<br />\n #顺序栈的表示</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">definr</span> <span class=\"token expression\">MAX<span class=\"token operator\">=</span><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SElemType <span class=\"token operator\">*</span>base<span class=\"token punctuation\">;</span><span class=\"token comment\">// 栈底指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    SElemType <span class=\"token operator\">*</span>top<span class=\"token punctuation\">;</span><span class=\"token comment\">// 栈顶指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> MAX<span class=\"token punctuation\">;</span><span class=\"token comment\">// 栈可用最大容量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqStack<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>#顺序栈的初始化</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">lnit</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    S<span class=\"token punctuation\">.</span>base<span class=\"token operator\">=</span>new SElemType<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token expression\">S<span class=\"token punctuation\">.</span>base<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>SElemTyepe<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>MAX<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SElemTyepe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    S<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    S<span class=\"token punctuation\">.</span>stacksize <span class=\"token operator\">=</span> MAX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#顺序栈的清空</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        S<span class=\"token punctuation\">.</span>top<span class=\"token operator\">=</span>S<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#顺序栈的入栈</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span>SElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>top<span class=\"token operator\">-</span>S<span class=\"token punctuation\">.</span>base<span class=\"token operator\">==</span>S<span class=\"token punctuation\">.</span>stacksize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">*</span>S<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    S<span class=\"token punctuation\">.</span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#顺序栈的出栈</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span>SElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>top<span class=\"token operator\">==</span>S<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    S<span class=\"token punctuation\">.</span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    e <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>S<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#链栈的表示</p>\n<pre><code>typedef struct StackNode&#123;\n    SElemType data;\n    struct StackNode *next;\n&#125;StackNode,*LinkStack;\n</code></pre>\n<p>链表的头指针就是栈顶<br />\n不需要头节点<br />\n基本不会满栈<br />\n空栈相当于头指针指向空</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span>SElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token operator\">=</span>new StackNode<span class=\"token punctuation\">;</span><span class=\"token comment\">// 生成新的节点 p</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将新节点数据域变为 e</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> S<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将新节点插入栈顶</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>S<span class=\"token operator\">=</span>p<span class=\"token punctuation\">;</span><span class=\"token comment\">//、、修改栈顶指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Status <span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span>SqStack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span>SElemType e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> ERROR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e <span class=\"token operator\">=</span> S<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">=</span>S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>S<span class=\"token operator\">=</span>S<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>delete p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#递归定义<br />\n若一个对象部分地包含自己，或用他自己给自己定义，则称这个对象是递归的<br />\n若一个过程直接或间接地调用自己，则称这个过程是递归的过程<br />\n递归工作栈 ———— 递归程序运行期间使用的数据存储区<br />\n “工作记录”———— 实在参数，局部变量，返回地址</p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "串，数字和广义表",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>#树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_31.png\" alt=\"img_31.png\" /><br />\n# 树的定义<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_34.png\" alt=\"img_34.png\" /><br />\n 树的深度：树中节点最大层次<br />\n有序树：树中结点的各子树从左至右有次序 (最左边的为第一个孩子)<br />\n 无序树：树中结点的各子树无次序<br />\n森林是 m (m&gt;=0) 棵互不相交的树的集合。<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_35.png\" alt=\"img_35.png\" /><br />\n# 二叉树<br />\n二叉树是 n (a≥0) 个结点的有限集，它或者是空集 (n= 0), 或者由一个根结点及两棵互不相<br />\n交的分别称作这个根的左子树和右子树的二叉树组成。<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_36.png\" alt=\"img_36.png\" /><br />\n# 二叉树的抽象数据类型定义<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_37.png\" alt=\"img_37.png\" /><br />\n# 二叉树的性质和存储结构<br />\n满二叉树：一棵深度为 k 且有 2^k- 1 个结点的二叉树称为满二叉树。</p>\n<p>完全二叉树：深度为 k 的具有 n 个结点的二叉树，当且仅当其每一个结点都与深度为 k 的满二二叉树中编<br />\n号为 1~ n 的结点一一对应时，称之为完全二叉树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_39.png\" alt=\"img_39.png\" /><br />\n 性质 1: 在 = 叉树的第 i 层上至多有 2^i-1 个结点 (i≥1)<br />\n 性质 2: 深度为 k 的二叉树至多有 2^k-1 个结点 (k≥1)<br />\n 性质 3: 对任何一棵二叉树 T, 如果其叶子数为 no, 度为 2 的结点数为 n2, 则 no=2+1<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_38.png\" alt=\"img_38.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_40.png\" alt=\"img_40.png\" /><br />\n# 二叉树的顺序存储<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_41.png\" alt=\"img_41.png\" /><br />\n# 二叉树链式存储<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_42.png\" alt=\"img_42.png\" /><br />\n# 三叉链表<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_43.png\" alt=\"img_43.png\" /><br />\n# 二叉树的遍历<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_44.png\" alt=\"img_44.png\" /><br />\n# 二叉树表示算数表达式<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_45.png\" alt=\"img_45.png\" /><br />\n# 已知先序和中序求二叉树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_46.png\" alt=\"img_46.png\" /><br />\n# 已知后序和中序求二叉树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_47.png\" alt=\"img_47.png\" /><br />\n# 二叉树先序遍历<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_49.png\" alt=\"img_49.png\" /><br />\n# 二叉树中序遍历<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_48.png\" alt=\"img_48.png\" /><br />\n# 后序遍历<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_50.png\" alt=\"img_50.png\" /><br />\n# 中序遍历的非递归算法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_51.png\" alt=\"img_51.png\" /><br />\n# 二叉树的层次遍历<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_52.png\" alt=\"img_52.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_53.png\" alt=\"img_53.png\" /><br />\n# 按先序遍历序列建立二叉树的二叉链表<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_54.png\" alt=\"img_54.png\" /><br />\n# 复制二叉树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_55.png\" alt=\"img_55.png\" /><br />\n# 计算二叉树深度<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_56.png\" alt=\"img_56.png\" /><br />\n# 计算节总数<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_57.png\" alt=\"img_57.png\" /><br />\n# 计算叶子节点<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_58.png\" alt=\"img_58.png\" /><br />\n# 线索二叉树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_59.png\" alt=\"img_59.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_60.png\" alt=\"img_60.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_61.png\" alt=\"img_61.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_62.png\" alt=\"img_62.png\" /><br />\n# 树的存储结构<br />\n ## 双亲表示法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_63.png\" alt=\"img_63.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_64.png\" alt=\"img_64.png\" /><br />\n## 孩子链表<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_65.png\" alt=\"img_65.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_66.png\" alt=\"img_66.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_67.png\" alt=\"img_67.png\" /><br />\n## 孩子兄弟表示法<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_68.png\" alt=\"img_68.png\" /><br />\n# 将树转化为二叉树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_69.png\" alt=\"img_69.png\" /><br />\n# 将二叉树变为树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_70.png\" alt=\"img_70.png\" /><br />\n# 森林变为二叉树<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_71.png\" alt=\"img_71.png\" /><br />\n# 二叉树变为森林<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_72.png\" alt=\"img_72.png\" /><br />\n# 树与森林的遍历<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_73.png\" alt=\"img_73.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_74.png\" alt=\"img_74.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_76.png\" alt=\"img_76.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "title": "查找",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>#线性表<br />\n线性表是具有相同特性的数据元素的一个有限序列<br />\n特征：仅有一个开始节点，没有直接前趋，只有直接后继，仅有一个终端节点，没有直<br />\n接后继，只有直接前趋</p>\n<p>## 基本操作<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_1.png\" alt=\"img_1.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_2.png\" alt=\"img_2.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_3.png\" alt=\"img_3.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_4.png\" alt=\"img_4.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_5.png\" alt=\"img_5.png\" /><br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_6.png\" alt=\"img_6.png\" /></p>\n<p>#线性表的顺序存储表示<br />\n线性表的顺序表示又称为顺序存储结构和顺序映像</p>\n<p>## 顺序存储定义<br />\n顺序存储定义：<br />\n把逻辑上相邻的数据元素存储在物理上相邻的存储单元中的存储结构<br />\n线性表的第一个数据元素 a1 的存储位置，称作线性表的起始位置或基地址<br />\n占用一片连续的存储空间<br />\n顺序表类型定义</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ElemType data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    #ElemType<span class=\"token punctuation\">,</span>任意类型，如：<span class=\"token keyword\">int</span>，<span class=\"token keyword\">double</span>，<span class=\"token keyword\">float</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqList</pre></td></tr></table></figure><p>typedef char ElemType;  #将 ElemType 定义为 char 型<br />\n也可定义复杂类型，如：typedef SqList ElemType</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ElemType <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>   #动态分配</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SqList</pre></td></tr></table></figure><p><img data-src=\"/pic/shujujiegouyusuanfa/img_7.png\" alt=\"img_7.png\" /><br />\nm 为整数，如果 m 为 800，每个类型要空间为 4，就会开辟 200 个空间<br />\n<img data-src=\"/pic/shujujiegouyusuanfa/img_8.png\" alt=\"img_8.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F/",
            "url": "https://love.youhuamao.xyz/2022/10/16/computer-science/DataStructureandalgorithm/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F/",
            "title": "查找",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<p>节点包括指针域和数据域</p>\n",
            "tags": [
                "计算机科学",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/15/shujuku/JDBC/",
            "url": "https://love.youhuamao.xyz/2022/10/15/shujuku/JDBC/",
            "title": "JDBC",
            "date_published": "2022-10-14T16:00:00.000Z",
            "content_html": "<h1 id=\"数据库驱动\"><a class=\"anchor\" href=\"#数据库驱动\">#</a> 数据库驱动</h1>\n<ul>\n<li>我们的程序会通过数据库驱动，和数据库打交道！</li>\n</ul>\n<h1 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h1>\n<ul>\n<li>SUN 公司为了简化开发人员的 (对数据库的统 - -) 操作，提供了一个 Java 操作数据库的) 规范，俗称 JDBC 这些规范的实现由具体的厂商去做</li>\n<li>对于开发人员来说，我们只需要掌握 JDBC 接口的操作即可！</li>\n</ul>\n<h1 id=\"第一个jdbc程序\"><a class=\"anchor\" href=\"#第一个jdbc程序\">#</a> 第一个 JDBC 程序</h1>\n<ul>\n<li>创建测试数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE DATABASE jdbcstudy CHARACTER SET utf8 COLLATE utf8_general_ci<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token environment constant\">USER</span> jdbcstudy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CREATE TABLE users<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span> INT PRIMARY KEY,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span> DATE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>INSERT INTO users<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>VALUES<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,<span class=\"token string\">'张三'</span>,<span class=\"token string\">'123456'</span>,<span class=\"token string\">'zs@sina.com'</span>,<span class=\"token string\">'1980-12-04'</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>,<span class=\"token string\">'李四'</span>,<span class=\"token string\">'123456'</span>,<span class=\"token string\">'lisi@sina.com'</span>,<span class=\"token string\">'1981-12-04'</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span>,<span class=\"token string\">'王五'</span>,<span class=\"token string\">'123456'</span>,<span class=\"token string\">'wangwu@sina.com'</span>,<span class=\"token string\">'1982-12-04'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>创建一个普通项目</li>\n<li>导入数据库驱动（jar 包）（版本要对应）</li>\n<li>编写测试代码</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> java.sql.DriverManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @ClassName: JDBCDemo01</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 我的第一个JDBC程序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/13 <span class=\"token number\">21</span>:59</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>public class JDBCDemo01 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws ClassNotFoundException, SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        //1.加载驱动</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>//        DriverManager.registerDriver<span class=\"token punctuation\">(</span>new com.mysql.jdbc.Driver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        //推荐这种写法加载驱动</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Class.forName<span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        //2.用户信息和URL</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        // <span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>true可能会报错</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        String url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        String userName <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        String passWord <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        //3.连接成功，数据库对象 Connection代表数据库</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Connection connection <span class=\"token operator\">=</span> DriverManager.getConnection<span class=\"token punctuation\">(</span>url, userName, passWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        //4.执行SQl的对象 Statement 执行的sql对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        //5.执行SQL的对象 去 执行SQL ，可能存在结果，查看返回的结果</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        //返回的结果集 结果集中封装了我们全部的查询的结果</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ResultSet resultSet <span class=\"token operator\">=</span> statement.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"id=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"password=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"email=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"birthday=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"birthday\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        //6.释放连接</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        resultSet.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        statement.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        connection.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>加载驱动</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>连接数据库DriverManager</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>获取执行SQL的对象 Statement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>获得返回的结果集</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>释放连接</pre></td></tr></table></figure><h1 id=\"对jdbc中对象解释\"><a class=\"anchor\" href=\"#对jdbc中对象解释\">#</a> 对 JDBC 中对象解释</h1>\n<ul>\n<li>DriverManager</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//1.加载驱动</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//DriverManager.registerDriver<span class=\"token punctuation\">(</span>new com.mysql.jdbc.Driver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Class.forName<span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#固定写法加载驱动</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Connection connection <span class=\"token operator\">=</span> DriverManager.getConnection<span class=\"token punctuation\">(</span>url, userName, passWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// connection代表数据库</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// 数据库设置自动提交</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>// 事务提交</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>// 事务回滚</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>connection.setAutoCommit<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>connection.commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>connection.rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>URL</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// mysql默认端口3306</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 协议://主机地址:端口号/数据库名?参数1<span class=\"token operator\">&amp;</span>参数2<span class=\"token operator\">&amp;</span>参数3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// oracle默认端口1521</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// jdbc:oracle:thin:@localhost:1521:sid</pre></td></tr></table></figure><ul>\n<li>Statement 执行 sql 对象 、 PreparedStatement 执行 sql 对象</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users\"</span><span class=\"token punctuation\">;</span>//编写SQL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>statement.executeQuery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//执行查询 返回ResultSet</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>statement.execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//执行任何SQL</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>statement.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//新增，删除，修改，都用这个，返回受影响的行数</pre></td></tr></table></figure><ul>\n<li>获得指定的数据类型</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//在不知道列类型的情况下使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//如果知道列类型，就使用指定的类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>resultSet.getString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>resultSet.getInt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>resultSet.getDouble<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>resultSet.getBigDecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>resultSet.getFloat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>resultSet.getDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//<span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><ul>\n<li>遍历，指针</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet.beforeFirst<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到最前面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>resultSet.afterLast<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到最后面</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>resultSet.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到下一个数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>resultSet.previous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到前一行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>resultSet.absolute<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到指定行</pre></td></tr></table></figure><ul>\n<li>释放资源</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>statement.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>connection.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//消耗资源</pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - create</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into user(...) values(...)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int num <span class=\"token operator\">=</span> statement.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - delete</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"delete from user where id=1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int num <span class=\"token operator\">=</span> statement.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - update</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update user set name='' where name =''\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int num <span class=\"token operator\">=</span> statement.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - read</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ResultSet resultSet <span class=\"token operator\">=</span> statement.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    //根据获取列的数据类型，分别调用resultSet的相应方法映射到java对象中</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"增删查改\"><a class=\"anchor\" href=\"#增删查改\">#</a> 增删查改</h1>\n<ul>\n<li>工具类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.io.IOException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.io.InputStream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.DriverManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">import</span> java.util.Properties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>public class JdbcUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    private static String driver <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    private static String url <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    private static String username <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    private static String password <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    static <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            InputStream <span class=\"token keyword\">in</span> <span class=\"token operator\">=</span> JdbcUtils.class.getClassLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getResourceAsStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"db.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Properties properties <span class=\"token operator\">=</span> new Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            properties.load<span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            driver <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            url <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            username <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            password <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            //驱动只用加载一次</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            Class.forName<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>ClassNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 获取连接</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    public static Connection getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> DriverManager.getConnection<span class=\"token punctuation\">(</span>url, username, password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 释放资源</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    public static void release<span class=\"token punctuation\">(</span>Connection con, Statement st, ResultSet rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                rs.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                st.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>con <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                con.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>db.properties</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">driver</span><span class=\"token operator\">=</span>com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>g123698745</pre></td></tr></table></figure><ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestInsert <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>)<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> +</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token string\">\"VALUES (5,'钱七','123456','qianqi@sina.com','1988-12-04')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestDelete <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM users WHERE <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>=5\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>更新</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestUpdate <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE users SET birthday='1990-12-01' WHERE id=1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"更新成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>查询</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestDelete <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users WHERE id=1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"id=\"</span>+rs.getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sql注入\"><a class=\"anchor\" href=\"#sql注入\">#</a> sql 注入</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class SQLQuestion <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        //正常登录</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>//        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span>,<span class=\"token string\">\"1234567\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        //sql注入</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"' or '1=1\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 登录业务</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    public static void login<span class=\"token punctuation\">(</span>String userName, String password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users WHERE <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>='\"</span>+userName+<span class=\"token string\">\"' AND <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>='\"</span>+password+<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            // SELECT * FROM <span class=\"token function\">users</span> WHERE <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span><span class=\"token operator\">=</span><span class=\"token string\">''</span> or <span class=\"token string\">'1=1'</span> AND <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span><span class=\"token operator\">=</span><span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"password=\"</span>+rs.getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"preparedstatement对象\"><a class=\"anchor\" href=\"#preparedstatement对象\">#</a> PreparedStatement 对象</h1>\n<p>可以防止 SQL 注入，效率更高</p>\n<ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestInster <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //区别</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>) values(?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译SQL，先写sql，然后不执行</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">\"钱七\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">\"qianqi@sina.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //注意点:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            //sqL.Date  数据库  java. sql.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            //util.Date    Java     new Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>获得时间戳</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setDate<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, new java.sql.Date<span class=\"token punctuation\">(</span>new java.util.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            //执行</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>更新</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>public class TestUpdate  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            //区别</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update users set 'NAME' =?  where id=?;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译SQL，先写sql，然后不执行</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,<span class=\"token string\">\"幽化猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            //执行</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"更新成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>public class TestDelete  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            //区别</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"delete from users where id=?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译SQL，先写sql，然后不执行</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //执行</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>查询</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestSelect <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from users where id = ?\"</span><span class=\"token punctuation\">;</span>//编写SQL</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//传递参数</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //执行</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            if<span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span>rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>防注入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.*<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>public class SqlQuestion <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        //正常登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        //sql注入</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"' or '1=1\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 登录业务</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    public static void login<span class=\"token punctuation\">(</span>String username, String password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            // PreparedStatement 防止SQL注入的本质，把传递进来的参数当做字符</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            // 假设其中存在转义字符，比如说<span class=\"token string\">'会被直接转义'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users WHERE <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>=? AND <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>=?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>,password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //查询完毕会返回一个结果集</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"password=\"</span>+rs.getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=====================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"使用idea连接数据库\"><a class=\"anchor\" href=\"#使用idea连接数据库\">#</a> 使用 IDEA 连接数据库</h1>\n<ul>\n<li>连接不上的话，可以看 Drivers，配置对应的 mysql 版本</li>\n</ul>\n<h1 id=\"jdbc事务\"><a class=\"anchor\" href=\"#jdbc事务\">#</a> JDBC 事务</h1>\n<p><mark>要么都成功，要么都失败</mark></p>\n<ul>\n<li>ACID 原则</li>\n</ul>\n<p>原子性：要么全部成功，要么全部失败</p>\n<p>一致性：总数不变</p>\n<p>隔离性：多个进程互不干扰</p>\n<p>持久性：一旦提交不可逆，持久化到数据库了</p>\n<ul>\n<li>隔离性的问题：</li>\n</ul>\n<p>脏读：一个事务读取了另外一个没有提交的事务</p>\n<p>不可重复读：在同一个事务内，重复读取表中数据，表数据发生了改变</p>\n<p>幻读：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p>\n<ul>\n<li>代码实现</li>\n</ul>\n<p>开启事务 con.setAutoCommit (false);<br />\n 一组业务执行完毕，提交事务<br />\n可以在 catch 语句中显示的定义回滚语句，但是默认失败就会回滚<br />\n正常情况：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson04<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestTransaction1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            //关闭自动提交 自动会开启事务</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            con.setAutoCommit<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//开启事务</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            // A 转 B <span class=\"token number\">100</span>元</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            String sql1 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money-100 where name='A'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            String sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money+100 where name='B'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            //业务完毕，提交事务</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            con.commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"A 转 B 100元 成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                con.rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                ex.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>异常情况</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson04<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestTransaction1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        PreparedStatement <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            con <span class=\"token operator\">=</span> JDBCUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //关闭自动提交 自动会开启事务</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            con.setAutoCommit<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//开启事务</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            // A 转 B <span class=\"token number\">100</span>元</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            String sql1 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money-100 where name='A'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            ps.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //默认失败</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            int x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>/0<span class=\"token punctuation\">;</span> //一定会异常</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            String sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money+100 where name='B'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            ps.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            //业务完毕，提交事务</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            con.commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"A 转 B 100元 成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            //如果异常，默认也会回滚，下面不写也可以</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>//            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>//                con.rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>//            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>//                ex.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>//            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            JDBCUtils.release<span class=\"token punctuation\">(</span>con, ps, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%92%8C%E5%A4%87%E4%BB%BD/",
            "url": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%92%8C%E5%A4%87%E4%BB%BD/",
            "title": "权限管理和备份",
            "date_published": "2022-10-14T16:00:00.000Z",
            "content_html": "<h1 id=\"用户管理\"><a class=\"anchor\" href=\"#用户管理\">#</a> 用户管理</h1>\n<ul>\n<li>\n<p>创建用户 CREATE USER 用户名 IDENTIFIED BY ' 密码'<br />\nCREATE USER kuangshen IDENTIFIED BY ' 123456'</p>\n</li>\n<li>\n<p>修改密码 (修改当前用户密码)<br />\nSET PASSWORD = PASSWORD(' 123456')</p>\n</li>\n<li>\n<p>修改密码 (修改指定用户密码)<br />\nSET PASSWORD FOR kuangshen = PASSWORD('111111')</p>\n</li>\n<li>\n<p>重命名 RENAME USER 原来名字 TO 新的名字<br />\n RENAME USER kuangshen TO kuangshen2</p>\n</li>\n<li>\n<p>用户授权 ALL PRIVILEGES 全部的权限，库，表</p>\n</li>\n<li>\n<p>ALL PRIVILEGES 除了给别人授权什么都能干<br />\n GRANT ALL PRIVILEGES ON <em>.</em> TO name</p>\n</li>\n<li>\n<p>查询权限<br />\n SHOW GRANTS FOR kuangshen2 -- 查看指定用户的权限<br />\n SHOW GRANTS FOR root@l ocal host</p>\n</li>\n</ul>\n<p>ROOT 用户权限: GRANT ALL PRIVILEGES ON <em>.</em> TO 'root'@'localhost' WITH GRANT OPTION</p>\n<ul>\n<li>\n<p>撤销权限 REVOKE 哪些权限，在哪个库撤销， 给谁撤销<br />\n REVOKE  ALL PRIVILEGES ON <em>.</em> FROM name</p>\n</li>\n<li>\n<p>删除用户<br />\n DROP USER username</p>\n</li>\n</ul>\n<h1 id=\"mysql备份\"><a class=\"anchor\" href=\"#mysql备份\">#</a> MySQL 备份</h1>\n<h2 id=\"为什么要备份\"><a class=\"anchor\" href=\"#为什么要备份\">#</a> 为什么要备份</h2>\n<ul>\n<li>保证重要的数据不丢失</li>\n<li>数据转移</li>\n</ul>\n<h2 id=\"mysql数据库备份的方式\"><a class=\"anchor\" href=\"#mysql数据库备份的方式\">#</a> MySQL 数据库备份的方式</h2>\n<ul>\n<li>直接拷贝物理文件</li>\n<li>在 Sqlyog 这种可视化工具中手动导出<br />\n在想要导出的表或者库中，右键，选择备份或导出</li>\n<li>使用命令行导出 mysqldump 命令行使用 （需要先配置环境）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 > 物理磁盘位置 / 文件名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-hlocalhost</span> <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p123456</span> school student <span class=\"token operator\">></span>D:/a.sq1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表 1 表 2 表 3 > 物理磁盘位置 / 文件名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-hlocalhost</span> <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p123456</span> school student <span class=\"token operator\">></span>D:/a.sq1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 > 物理磁盘位置 / 文件名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-hlocalhost</span> <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p123456</span> school<span class=\"token operator\">></span>D:/a.sq1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#导入</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#登录的情况下，切换到指定的数据库</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># source 备份文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">source</span> d:/a.sq1 I</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mysq1 <span class=\"token parameter variable\">-u</span> 用户名 <span class=\"token parameter variable\">-p</span> 密码 库名<span class=\"token operator\">&lt;</span>备份文件</pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E8%A7%84%E8%8C%83%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E8%A7%84%E8%8C%83%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "规范设计数据库",
            "date_published": "2022-10-14T16:00:00.000Z",
            "content_html": "<h1 id=\"为什么需要设计\"><a class=\"anchor\" href=\"#为什么需要设计\">#</a> 为什么需要设计</h1>\n<ul>\n<li>当数据库比较复杂的时候，我们就需要设计了</li>\n<li>糟糕的数据库设计:<br />\n 数据冗余，浪费空间<br />\n数据库插入和删除都会麻烦、异常 [屏蔽使用物理外键]<br />\n 程序的性能差</li>\n<li>良好的数据库设计:<br />\n 节省内存空间<br />\n保证数据库的完整性<br />\n方便我们开发系统</li>\n<li>软件开发中，关于数据库的设计<br />\n分析需求：分析业务和需要处理的数据库的需求<br />\n概要设计：设计关系图 E-R 图</li>\n</ul>\n<h1 id=\"三大范式\"><a class=\"anchor\" href=\"#三大范式\">#</a> 三大范式</h1>\n<ul>\n<li>第一范式 (1NF)<br />\n 原子性：保证每一列不可再分</li>\n<li>第二范式 (2NF)<br />\n 前提：满足第一范式<br />\n每张表只描述一件事情</li>\n<li>第三范式 (3NF)<br />\n 前提：满足第一范式和第二范式<br />\n第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</li>\n</ul>\n<h1 id=\"规范性和性能问题\"><a class=\"anchor\" href=\"#规范性和性能问题\">#</a> 规范性和性能问题</h1>\n<ul>\n<li>关联查询的表不得超过三张表</li>\n<li>考虑商业化的需求和目标，(成本， 用户体验！) 数据库的性能更加重 要</li>\n<li>在规范性能的问题的时候，需要适当的考虑一下 规范性！</li>\n<li>故意给某些表增加一 - 些冗余的字段。(从多表查询中变为单表查询)</li>\n<li>故意增加一些计算列 (从大数据量降低为小数据量的查询：索引)</li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/14/shujuku/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "url": "https://love.youhuamao.xyz/2022/10/14/shujuku/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "title": "MySQL常用函数",
            "date_published": "2022-10-13T16:00:00.000Z",
            "content_html": "<p>官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2Z1bmMtb3Atc3VtbWFyeS1yZWYuaHRtbA==\">https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html</span></p>\n<h1 id=\"常用函数\"><a class=\"anchor\" href=\"#常用函数\">#</a> 常用函数</h1>\n<h2 id=\"数学运算\"><a class=\"anchor\" href=\"#数学运算\">#</a> 数学运算</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT ABS<span class=\"token punctuation\">(</span>-8<span class=\"token punctuation\">)</span> --绝对值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT CEILING<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> --向上取整.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> --向下取整</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --返回一个0~1之间的随机数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT SIGN <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--判断一个数的符号 <span class=\"token number\">0</span>-0 负数返回-1，正数返回1</pre></td></tr></table></figure><h2 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECTCHAR_LENGTH<span class=\"token punctuation\">(</span><span class=\"token string\">'即使再小的帆也能远航'</span><span class=\"token punctuation\">)</span>--字符串长度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'我'</span>，<span class=\"token string\">'爱'</span>, <span class=\"token string\">'你们'</span><span class=\"token punctuation\">)</span> --拼接字符串</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT INSERT <span class=\"token punctuation\">(</span><span class=\"token string\">'我爱编程helloworld'</span>,1,2, <span class=\"token string\">'超级热爱'</span><span class=\"token punctuation\">)</span> --查询，从某个位置开始替换某个长度<span class=\"token punctuation\">(</span>从1开始，而不是0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT LOWER<span class=\"token punctuation\">(</span><span class=\"token string\">'KuangShen'</span><span class=\"token punctuation\">)</span> --小写字母</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT UPPER <span class=\"token punctuation\">(</span><span class=\"token string\">'KuangShen'</span><span class=\"token punctuation\">)</span> --大写字母</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SELECT INSTR <span class=\"token punctuation\">(</span><span class=\"token string\">'kuangshen'</span>,<span class=\"token string\">'h'</span><span class=\"token punctuation\">)</span> --返回第一次出现的子串的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT REPLACE<span class=\"token punctuation\">(</span><span class=\"token string\">'狂神说坚持就能成功，'</span>坚持<span class=\"token string\">',努力) -- 替换出现的指定字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SELECT SUBSTR('</span>狂神说坚持就能成功，4,6<span class=\"token punctuation\">)</span> --返回指定的子字符串<span class=\"token punctuation\">(</span>源字符串,截取的位置，截取的长度<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SELECT REVERSE<span class=\"token punctuation\">(</span><span class=\"token string\">'清晨我上马'</span><span class=\"token punctuation\">)</span> --反转</pre></td></tr></table></figure><h2 id=\"查询姓-周的同学\"><a class=\"anchor\" href=\"#查询姓-周的同学\">#</a> 查询姓 周的同学</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT REPLACE <span class=\"token punctuation\">(</span>studentname ,<span class=\"token string\">'周'</span>,<span class=\"token string\">'邹'</span><span class=\"token punctuation\">)</span> FROM student</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NHERE Studentname LIKE <span class=\"token string\">'周%'</span></pre></td></tr></table></figure><h2 id=\"时间和日期函数\"><a class=\"anchor\" href=\"#时间和日期函数\">#</a> 时间和日期函数</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT CURRENT DATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --获取当前日期</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT CURDATE <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --获取当前日期</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT NOW <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --获取当前的时间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT LOCALTIME<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --本地时间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT SYSDATE <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --系统时间</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SELECT YEAR <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT MONTH <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SELECT DAY <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SELECT HOUR <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SELECT MINUTE <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>SELECT SECOND <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr></table></figure><h2 id=\"系统\"><a class=\"anchor\" href=\"#系统\">#</a> 系统</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT SYSTEM_USER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT USERO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT VERSION<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"聚合函数\"><a class=\"anchor\" href=\"#聚合函数\">#</a> 聚合函数</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>都能够统计表中的数据 <span class=\"token punctuation\">(</span>想查询一一个表中有多少个记录，就使用这个count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT COUNT <span class=\"token punctuation\">(</span><span class=\"token string\">'BornDate'</span><span class=\"token punctuation\">)</span> FROM student<span class=\"token punctuation\">;</span> -- Count <span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span>，会忽略所有的null值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT COUNT <span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span> FROM student<span class=\"token punctuation\">;</span> -- Count <span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span>，不会忽略null值，本质 计算行数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT COUNT <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> FROM result<span class=\"token punctuation\">;</span> -- Count <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>，不会忽略忽略所有的null值本质计算行数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT SUM <span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResult'</span><span class=\"token punctuation\">)</span> AS总和FROM result</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SELECT AVG<span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResulti'</span><span class=\"token punctuation\">)</span> AS平均分FROM result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT MAX <span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResult'</span><span class=\"token punctuation\">)</span> AS最高分FROM result</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SELECT MIN<span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResult'</span><span class=\"token punctuation\">)</span> AS最低分FROM result</pre></td></tr></table></figure><h1 id=\"md5加密\"><a class=\"anchor\" href=\"#md5加密\">#</a> MD5 加密</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ICREATE TABLE <span class=\"token string\">'testmd5'</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'name'</span>VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--明文密码</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>INSERT INTO testmd5 VALUES <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">' zhangsan'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">'lisi'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">'wangwu'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--加密</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>UPDATE testmd5 SET <span class=\"token assign-left variable\">pwd</span><span class=\"token operator\">=</span>MD5 <span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>UPDATE testmd5 SET <span class=\"token assign-left variable\">pwd</span><span class=\"token operator\">=</span>MD5 <span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span> -- 加密全部的密码</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>--插入的时候加密</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>INSERT INTO testmd5 VALUES<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">'xiaoming'</span> ,MD5<span class=\"token punctuation\">(</span><span class=\"token string\">' 123456'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--如何校验:将用户传递进来的密码，进行md5加密，然后比对加密后的值</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>SELECT * FROM testmd5 WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'xiaoming'</span> AND <span class=\"token assign-left variable\">pwd</span><span class=\"token operator\">=</span>MD5 <span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/14/shujuku/%E4%BA%8B%E5%8A%A1/",
            "url": "https://love.youhuamao.xyz/2022/10/14/shujuku/%E4%BA%8B%E5%8A%A1/",
            "title": "事务",
            "date_published": "2022-10-13T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是事务\"><a class=\"anchor\" href=\"#什么是事务\">#</a> 什么是事务</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>要么都成功，要么都失败</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>、SQL执行 A给B转账     A <span class=\"token number\">1000</span> --<span class=\"token operator\">></span><span class=\"token number\">200</span> B <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>、SQL执行 B收到A的钱   A <span class=\"token number\">800</span>  --<span class=\"token operator\">></span> B <span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>将一组SQL放在一个批次中去执行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>事务原则: ACID原则 原子性，-致性，隔离性，持久性 <span class=\"token punctuation\">(</span>脏读，幻读<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>原子性<span class=\"token punctuation\">(</span>Atomicity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>要么都成功，要么都失败、</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>一致性 <span class=\"token punctuation\">(</span>Consistency<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>事务前后的数据完整性要保证一致</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>隔离性<span class=\"token punctuation\">(</span>Isolation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>事务的隔离性是多个用户并发访问数据库时,数据库为每一个用户开启的事务 ，不能被其他事务的操作数据所干扰，事务之间要相互隔离。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>持久性<span class=\"token punctuation\">(</span>Durability<span class=\"token punctuation\">)</span> --- 事务提交</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>事务一旦提交则不可逆，被持久化到数据库中<span class=\"token operator\">!</span></pre></td></tr></table></figure><h1 id=\"隔离所导致的问题\"><a class=\"anchor\" href=\"#隔离所导致的问题\">#</a> 隔离所导致的问题</h1>\n<ul>\n<li>脏读:<br />\n 指一个事务读取了另外 - 个事务未提交的数据。</li>\n<li>不可重复读:<br />\n 在一个事务内读取表中的某 - - 行数据， 多次读取结果不同。(这个不一 定是错误，只是某些场合不对)</li>\n<li>虚读 (幻读)<br />\n 是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</li>\n</ul>\n<h1 id=\"手动事务\"><a class=\"anchor\" href=\"#手动事务\">#</a> 手动事务</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--mysql是默认开启事务自动提交的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SET <span class=\"token assign-left variable\">autocommit</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span> /*关闭*/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span> /*开启<span class=\"token punctuation\">(</span>默认的<span class=\"token punctuation\">)</span> */</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--手动处理事务</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span> -- 关闭自动提交</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--事务开启</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>START TRANSACTION -- 标记一个事务的开始，从这个之后的sql 都在同一个事务内</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>INSERT XX</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>INSERT XX</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>--提交:持久化<span class=\"token punctuation\">(</span>成功<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>COMMIT</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>--回滚:回到的原来的样子<span class=\"token punctuation\">(</span>失败<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ROLLBACK</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-- 事务结束</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span> --开启自动提交</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>--了解 </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>SAVEPOINT 保存点名 --设置一个事务的保存点</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>ROLLBACK TO SAVEPOINT 保存点名 --回滚到保存点</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>RELEASE SAVEPOINT 保存点名 -- 撤销保存点</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>实例转账</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>CREATE DATABASE shop CHARACTER SET utf8 COLLATE utf8_general_ci</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>USE shop</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>CREATE TABLE <span class=\"token string\">'account'</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token string\">'id'</span> INT <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> NOT NULL AUTO INCREMENT</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token string\">'money'</span> DECIMAL<span class=\"token punctuation\">(</span><span class=\"token number\">9,2</span><span class=\"token punctuation\">)</span> NOT NULL,  <span class=\"token punctuation\">(</span>一共最多有九位，小数占两位<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span> INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>INSERT INTO account <span class=\"token punctuation\">(</span> <span class=\"token string\">'name'</span>,<span class=\"token string\">'moneyi'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span>,2000.00<span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span>,10000.00<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>--模拟转账:事务</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> I 一关闭自动提交</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>START TRANSACTION --开启一个事务</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>UPDATE account SET <span class=\"token assign-left variable\">money</span><span class=\"token operator\">=</span>money-500 WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> --A减500</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>UPDATE account SET <span class=\"token assign-left variable\">money</span><span class=\"token operator\">=</span>money+500 WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span> -- A加500</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>COMMIT<span class=\"token punctuation\">;</span> -- 提交事务</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>ROLLBACK<span class=\"token punctuation\">;</span> --回滚</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> -- 恢复默认值</pre></td></tr></table></figure><h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<ul>\n<li>MySQL 官方对索引的定义为：索引 (Index) 是帮助 MySQL 高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。</li>\n</ul>\n<h2 id=\"索引的分类\"><a class=\"anchor\" href=\"#索引的分类\">#</a> 索引的分类</h2>\n<ul>\n<li>主键索引 (PRIMARY KEY): 唯一的标识，主键不可重复，只能有一个列作为主键</li>\n<li>唯一索引 (UNIQUE KEY): 避免重复的列出现，唯一 - 索弓 可以重复，多个列都可以标识位唯一索引</li>\n<li>常规索引 (KEY/INDEX): 默认的，index。 key 关键字来设置</li>\n<li>全文索引 (FullText): 在特定的数据库引 | 擎下才有，MyISAM, 快速定位数据</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>索引的使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SHOW INDEX FROM student -- 示所有的索引信息</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--增加一个全文索引<span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span>  列名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ALTER TABLE school.student ADD FULLTEXT INDEX <span class=\"token string\">'studentName'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'studentName'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-- EXPLAIN 分析sql执行的状况</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>EXPLAIN SELECT * FROM student<span class=\"token punctuation\">;</span> -- 非全文索引</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SELECT * FROM student WHERE MATCH <span class=\"token punctuation\">(</span>studentName<span class=\"token punctuation\">)</span> AGAINST<span class=\"token punctuation\">(</span><span class=\"token string\">'刘'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"自定义函数\"><a class=\"anchor\" href=\"#自定义函数\">#</a> 自定义函数</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DELIMITER <span class=\"token variable\">$$</span> -- 写函数之前必须要写，标志</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CREATE FUNCTION mock_data <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>RETURNS INT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BEGIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DECLARE num INT DEFAULT <span class=\"token number\">1</span> 000000<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DECLARE i INT DEFAULT <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    WHILE i<span class=\"token operator\">&lt;</span>num DO</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        INSERT INTO app_user<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span>,<span class=\"token string\">'email'</span> ,<span class=\"token string\">'phone'</span>，<span class=\"token string\">'gender'</span>,<span class=\"token string\">'password'</span>,<span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        VALUES <span class=\"token punctuation\">(</span>CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'用户'</span>，i<span class=\"token punctuation\">)</span>,<span class=\"token string\">'24736743@qq.com'</span>,CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'18'</span>,FLOOR<span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">999999999</span>-100000000<span class=\"token punctuation\">)</span> +100000000<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>FLOOR <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> *2<span class=\"token punctuation\">)</span> ,UUID<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> , </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        FLOOR<span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> *100<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        SET i <span class=\"token operator\">=</span> i + <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    END WHILE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    RETURN i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>END<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>-- id_表名_字段名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token parameter variable\">--CREATE</span> INDEX 索引名 on 表<span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>CREATE INDEX id_app_user_name ON app_user <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>SELECT * FROM app_ _user WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token string\">'用户9999'</span><span class=\"token punctuation\">;</span> -- <span class=\"token number\">0.001</span> sec</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>SELECT * FROM app_ _user WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token string\">'用户9999'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>EXPLAIN SELECT * FROM app_ _user WHERE、name’ <span class=\"token operator\">=</span><span class=\"token string\">'用户9999'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>索引在小数据量的时候，用户不大，但是在大数据的时候，区别十分明显</pre></td></tr></table></figure><h1 id=\"索引原则\"><a class=\"anchor\" href=\"#索引原则\">#</a> 索引原则</h1>\n<ul>\n<li>索引不是越多越好</li>\n<li>不要对进程变动数据加索引</li>\n<li>小数据量的表不需要加索引</li>\n<li>索引一般加在常用来查询的字段上</li>\n</ul>\n<h1 id=\"索引的数据结构\"><a class=\"anchor\" href=\"#索引的数据结构\">#</a> 索引的数据结构</h1>\n<ul>\n<li>Hash 类型的索弓 |</li>\n<li>Btree : InnoDB 的默认数据结构～</li>\n<li>阅读：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY29kaW5nbGFicy5vcmcvYXJ0aWNsZXMvdGhlb3J5LW9mLW15c3FsLWluZGV4Lmh0bWw=\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</span></li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/13/shujuku/DQL%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/",
            "url": "https://love.youhuamao.xyz/2022/10/13/shujuku/DQL%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/",
            "title": "DQL查询数据",
            "date_published": "2022-10-12T16:00:00.000Z",
            "content_html": "<h1 id=\"dql\"><a class=\"anchor\" href=\"#dql\">#</a> DQL</h1>\n<ul>\n<li>Data Query LANGUAGE : 数据查询语言</li>\n<li>所有的查询操作都用它 Select</li>\n<li>简单的查询，复杂的查询它都能做</li>\n<li>数据库中最核心的语言</li>\n<li>使用频率最高的语句</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT语法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT <span class=\"token punctuation\">[</span>ALL <span class=\"token operator\">|</span> DISTINCT<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>* <span class=\"token operator\">|</span> table.* <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>table.field1<span class=\"token punctuation\">[</span>as alias1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>,table.field2<span class=\"token punctuation\">[</span>as alias2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FROM table_ name <span class=\"token punctuation\">[</span>as table_ alias<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span>left <span class=\"token operator\">|</span> right <span class=\"token operator\">|</span> inner <span class=\"token function\">join</span> table_ name2<span class=\"token punctuation\">]</span> --联合查询</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span>WHERE<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>      -- 指定结果需满足的条件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span>GROUP BY <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>  -- 指定结果按照哪几个字段来分组</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span>HAVING<span class=\"token punctuation\">]</span>    -- 过滤分组的记录必须满足的次要条件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span>ORDER BY <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>  -- 指定查询记录按一个或多个条件排序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">[</span>LIMIT <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span>offset,<span class=\"token punctuation\">]</span>row_ count <span class=\"token operator\">|</span> row_ countOFFSET offset<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    --指定查询的记录从哪条至哪条</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>注意:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>括号代表可选的, <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>括号代表必选得</pre></td></tr></table></figure><h1 id=\"指定查询字段\"><a class=\"anchor\" href=\"#指定查询字段\">#</a> 指定查询字段</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--查询全部的学生</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT 字段 FROM 表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT * FROM student</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--查询指定字段</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM student</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--别名，给结果起一个名字 AS 可以给字段起别名，也可以给表起别名</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span> AS 学号，<span class=\"token string\">'StudentName'</span> AS 学生姓名 FROM student AS s</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--函数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Concat <span class=\"token punctuation\">(</span>a，b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SELECT CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'姓名: '</span> ，StudentName<span class=\"token punctuation\">)</span> AS 新名字 FROM student</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>有的时候，列名字不是那么的见名知意。我们起别名 AS 字段名 as 别名 表名 as 别名</pre></td></tr></table></figure><ul>\n<li>SELECT 字段，... FROM 表</li>\n</ul>\n<h1 id=\"去重-distinct\"><a class=\"anchor\" href=\"#去重-distinct\">#</a> 去重 distinct</h1>\n<ul>\n<li>去除 SELECT 查询出来的结果中重复的数据，重复的数据只显示一条</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--查询一下有哪些同学参加了考试，成绩</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT * FROM result -- 查询全部的考试成绩</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span> FROM result --查询有哪些同学参加了考试</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT DISTINCT <span class=\"token string\">'StudentNo'</span> FROM result --发现重复数据，去重</pre></td></tr></table></figure><h1 id=\"数据库的列\"><a class=\"anchor\" href=\"#数据库的列\">#</a> 数据库的列</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT VERSION<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> -- 查询系统版本 <span class=\"token punctuation\">(</span>函数<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT <span class=\"token number\">100</span>*3-1 AS计算结果-- 用来计算 <span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT @@auto_increment_increment --查询自增的步长<span class=\"token punctuation\">(</span>变量<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--学员考试成绩+ <span class=\"token number\">1</span>分查看</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentResult'</span> +1 AS <span class=\"token string\">'提分后'</span> FROM result</pre></td></tr></table></figure><ul>\n<li>数据库中的表达式：文本值，列，Null, 函数，计算表达式，系统变量....<br />\nselect 表达式 from 表</li>\n</ul>\n<h1 id=\"where-条件子句\"><a class=\"anchor\" href=\"#where-条件子句\">#</a> where 条件子句</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用:检索数据中符合条件的值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>搜索的条件由一一个或者多个表达式组成<span class=\"token operator\">!</span> 结果 布尔值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>逻辑运算符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>运算符          语法                 描述</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>and <span class=\"token operator\">&amp;&amp;</span>          a and b  a <span class=\"token operator\">&amp;&amp;</span> b      逻辑与，两个都为真，结果为真</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>or              a or b   a <span class=\"token operator\">||</span> b      逻辑或，其中一个为真，则结果为真</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Not             not a    <span class=\"token operator\">!</span>a          逻辑非，真为假, 假为真<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>where<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>--查询考试成绩在95~100 分之间</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>WHERE StudentResult<span class=\"token operator\">>=</span><span class=\"token number\">95</span> AND StudentResult<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>-- and <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WHERE StudentResult<span class=\"token operator\">>=</span><span class=\"token number\">95</span> <span class=\"token operator\">&amp;&amp;</span> studentResult<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>--模糊查询<span class=\"token punctuation\">(</span>区间<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>, <span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>WHERE StudentResult BETWEEN <span class=\"token number\">95</span> AND <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>--除了1000号学生之外的同学的成绩</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>, <span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>WHERE studentNo <span class=\"token operator\">!=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>-- <span class=\"token operator\">!=</span>  not</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>WHERE NOT studentNo <span class=\"token operator\">!=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"模糊查询比较运算符\"><a class=\"anchor\" href=\"#模糊查询比较运算符\">#</a> 模糊查询：比较运算符</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>运算符          语法                描述</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>IS NULL         a is null           如果操作符为NUII, 结果为真</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>IS NOT NULL     a is not null       如果操作符不为null,结果为真</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BETWEEN         a between b and C   若a在b和c之间，则结果为真</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Like            a like b            SQL匹配，如果a匹配b,则结果为真</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>In              a <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>a1,a2,<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span>   假设a在a1,或者a2<span class=\"token punctuation\">..</span>. 其中的某一个值中，结果为真</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>模糊查询<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--查询姓刘的同学</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-- 1ike结合 %<span class=\"token punctuation\">(</span>代表0到任意个字符<span class=\"token punctuation\">)</span> _<span class=\"token punctuation\">(</span>一个字符<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>WHERE StudentName LIKE <span class=\"token string\">'刘%'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>--查询姓刘的同学，名字后面只有一个字的</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>WHERE <span class=\"token string\">'StudentName'</span> LIKE <span class=\"token string\">'刘_'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>--查询姓刘的同学，名字后面只有两个字的</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>WHERE <span class=\"token string\">'StudentName'</span> LIKE <span class=\"token string\">'刘__'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>--查询名字中间有嘉字的同学 %嘉%</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>WHERE <span class=\"token string\">'StudentName'</span> LIKE <span class=\"token string\">'%嘉%'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>具体的一个或者多个值<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>: <span class=\"token operator\">==</span> <span class=\"token operator\">=</span> <span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>--查询1001, <span class=\"token number\">1002,1003</span>号学员</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM、student</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>WHERE StudentNo IN <span class=\"token punctuation\">(</span><span class=\"token number\">1001,1002</span>，1003<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>--查询在北京的学生</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>WHERE <span class=\"token string\">'Address'</span> IN <span class=\"token punctuation\">(</span><span class=\"token string\">'安徽'</span>,<span class=\"token string\">'河南洛阳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span> null not <span class=\"token assign-left variable\">nu11</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>--查询地址为空的学生 nu11 <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'studentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>WHERE <span class=\"token assign-left variable\">address</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>  OR address IS NULL</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>--查询有出生日期的同学 不为空</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>WHERE <span class=\"token string\">'BornDate'</span> IS NOT NULL</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>--查询没有有出生日期的同学 为空</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>WHERE <span class=\"token string\">'BornDate'</span> IS  NULL</pre></td></tr></table></figure><h1 id=\"联表查询\"><a class=\"anchor\" href=\"#联表查询\">#</a> 联表查询</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/*思路</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>.分析需求，分析查询的字段来自哪些表，<span class=\"token punctuation\">(</span>连接查询<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>.确定使用哪种连接查询? <span class=\"token number\">7</span>种</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>确定交叉点<span class=\"token punctuation\">(</span>这两个表中哪个数据是相同的<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>判断的条件:学生表的中 studentNo <span class=\"token operator\">=</span> 成绩表 studentNo</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-- join<span class=\"token punctuation\">(</span>连接的表<span class=\"token punctuation\">)</span> on <span class=\"token punctuation\">(</span>判断的条件<span class=\"token punctuation\">)</span> 连接查询</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-- where 等值查询</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-- Inner Join</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>SELECT s.studentNO,studentName,SubjectNo,StudentResult</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>FROM student AS s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>INNER JOIN result AS r</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>WHERE s.studentNO <span class=\"token operator\">=</span> r.studentNO <span class=\"token punctuation\">(</span>where与on皆可，但是最好on<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-- Left Join</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>SELECT s.studentNO,studentName,SubjectNo,StudentResult</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>FROM student AS s</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>LEFT JOIN result AS r</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ON s.studentNO <span class=\"token operator\">=</span> r.studentNO </pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>-- Right Join</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>SELECT s.studentNO,studentName,SubjectNo,StudentResult</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>FROM student AS s</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>RIGHT JOIN result AS r</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ON s.studentNO <span class=\"token operator\">=</span> r.studentNO </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>--查询缺考的同学</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>SELECT s.studentNO, studentName , SubjectNo, StudentResult</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>FROM student s</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>LEFT JOIN result r</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>ON s.studentNO <span class=\"token operator\">=</span> r.studentNO</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>WHERE StudentResult IS NULL</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>操作            描述</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Inner <span class=\"token function\">join</span>      如果表中至少有一个匹配，就返回行</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>left <span class=\"token function\">join</span>       会从左表中返回所有的值，即使右表中没有匹配</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>right <span class=\"token function\">join</span>      会从右表中返回所有的值，即使左表中没有匹配</pre></td></tr></table></figure><h1 id=\"自连接\"><a class=\"anchor\" href=\"#自连接\">#</a> 自连接</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>自己的表和自己的表连接，核心: - -张表拆为两张一样的表即可</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>父类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>categoryid      categoryName</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>               信息技术</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>               软件开发</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span>               美术设计</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>子类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pid         categoryid          categoryName</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3</span>           <span class=\"token number\">4</span>                   数据库</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span>           <span class=\"token number\">8</span>                   办公信息</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span>           <span class=\"token number\">6</span>                   web开发</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">5</span>           <span class=\"token number\">7</span>                   美术设计</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>操作:查询父类对应的子类关系</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>父类        子类</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>信息技术    办公信息</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>软件开发    数据库</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>软件开发    web开发</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>美术设计    ps技术</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>--查询父子信息</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>SELECT a.<span class=\"token string\">'categoryName'</span> AS <span class=\"token string\">'父栏目'</span>  b.<span class=\"token string\">'categoryName'</span> AS <span class=\"token string\">'子栏目'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>FROM  <span class=\"token string\">'category'</span> AS a, <span class=\"token string\">'category'</span> AS b</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>WHERE a.<span class=\"token string\">'categoryidi'</span> <span class=\"token operator\">=</span> b.<span class=\"token string\">'pid'</span></pre></td></tr></table></figure><h1 id=\"分页limit和排序order-by\"><a class=\"anchor\" href=\"#分页limit和排序order-by\">#</a> 分页（limit）和排序（order by）</h1>\n<ul>\n<li>排序</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--排序:升序ASC，降序DESC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">--ORDER</span> BY通过那个字段排序，怎么排</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--查询的结果根据成绩降序排序</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT s.<span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span>,<span class=\"token string\">'SubjectName'</span>,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FROM student s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INNER JOIN <span class=\"token string\">'result'</span> r <span class=\"token punctuation\">(</span>有时as可以省略<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ON s.StudentNo <span class=\"token operator\">=</span> r. StudentNo</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span><span class=\"token operator\">=</span> sub.<span class=\"token string\">'Subj ectNo'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>WHERE subjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ORDER BY StudentResult ASC</pre></td></tr></table></figure><ul>\n<li>分页</li>\n<li>语法:limit 当前页，页面的大小</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--为什么要分页?</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>缓解数据库压力，给人的体验更好</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--分页，每页只显示五条数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--网页应用:当前，总的页数，页面的大小</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-- LIMIT <span class=\"token number\">0,5</span> <span class=\"token number\">1</span>~5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-- LIMIT <span class=\"token number\">1,5</span> <span class=\"token number\">2</span>~6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT s.<span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span>,<span class=\"token string\">'SubjectName'</span>,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FROM student s</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>INNER JOIN <span class=\"token string\">'result'</span> r <span class=\"token punctuation\">(</span>有时as可以省略<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ON s.StudentNo <span class=\"token operator\">=</span> r. StudentNo</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span><span class=\"token operator\">=</span> sub.<span class=\"token string\">'Subj ectNo'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>WHERE subjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ORDER BY StudentResult ASC</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>LIMIT <span class=\"token number\">5,5</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>--第一页 limit <span class=\"token number\">0,5</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>-1<span class=\"token punctuation\">)</span> *5 ,5 </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--第二页 limit <span class=\"token number\">5,5</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>-1<span class=\"token punctuation\">)</span> *5 ,5</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>--第三页 limit <span class=\"token number\">10,5</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>-1<span class=\"token punctuation\">)</span> *5 ,5</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>-- 第N页 limit <span class=\"token number\">0,5</span>  <span class=\"token punctuation\">(</span>n-1<span class=\"token punctuation\">)</span> * pagesize, pagesize</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>-- <span class=\"token punctuation\">[</span>pagesize: 页面大小<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>-- <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>n-1<span class=\"token punctuation\">)</span>* pagesize:起始值<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>-- <span class=\"token punctuation\">[</span>n:当前页<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>-- <span class=\"token punctuation\">[</span>数据总数/页面大小<span class=\"token operator\">=</span>总页数<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>语法: 1imit<span class=\"token punctuation\">(</span>查询起始下标，pagesize<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"子查询-嵌套查询\"><a class=\"anchor\" href=\"#子查询-嵌套查询\">#</a> 子查询 嵌套查询</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-- <span class=\"token number\">1</span>.查询数据库结构-1 的所有考试结果<span class=\"token punctuation\">(</span>学号，科目编号，成绩<span class=\"token punctuation\">)</span>，降序排列</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--方式一: 使用连接查询</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,r.<span class=\"token string\">'SubjectNo'</span> ,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FROM <span class=\"token string\">'result'</span> r</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span> <span class=\"token operator\">=</span> sub.<span class=\"token string\">'SubjectNo'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>WHERE SubjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ORDER BY StudentResult DESC</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--方式二: 使用子查询<span class=\"token punctuation\">(</span>由里及外<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--查询所有数据库结构-1的学生学号</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'SubjectNo'</span>,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>FROM <span class=\"token string\">'result'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>3WHERE SubjectNo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    SELECT SubjectNo FROM <span class=\"token string\">'subject'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    WHERE SubjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ORDER BY StudentResult DESC</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>--分数不小于80分的学生的学号和姓名</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>SELECT DISTINCT s.<span class=\"token string\">'StudentNo'</span> ,<span class=\"token string\">'StudentName'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>FROM student S</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>INNER JOIN result r</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>ON r.<span class=\"token string\">'StudentNo'</span> <span class=\"token operator\">=</span> s.<span class=\"token string\">'StudentNo'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>WHERE <span class=\"token string\">'StudentResult'</span><span class=\"token operator\">>=</span><span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>--在这个基础上增加一个科目，高等数学-2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>--查询高等数学-2的编号</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>SELECT DISTINCT s.<span class=\"token string\">'StudentNo'</span> ,<span class=\"token string\">'StudentName'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>FROM student S</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>INNER JOIN result r</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>ON r.<span class=\"token string\">'StudentNo'</span> <span class=\"token operator\">=</span> s.<span class=\"token string\">'StudentNo'</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>WHERE <span class=\"token string\">'StudentResult'</span> <span class=\"token operator\">>=</span><span class=\"token number\">80</span> AND subjectNo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    SELECT SubjectNo FROM <span class=\"token string\">'subject'</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    WHERE、subjectName <span class=\"token operator\">=</span><span class=\"token string\">'高等数学-2'</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>--在改造<span class=\"token punctuation\">(</span>由里及外<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>SELECT StudentNo ，StudentName FROM student WHERE StudentNo IN <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    SELECT StudentNo FROM result WHERE StudentResu1t<span class=\"token operator\">></span><span class=\"token number\">80</span> AND subjectNo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     SELECT subjectNo FROM <span class=\"token string\">'subject'</span> WHERE、 SubjectName <span class=\"token operator\">=</span><span class=\"token string\">'高等数学-2'</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">)</span>I</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"分组和过滤\"><a class=\"anchor\" href=\"#分组和过滤\">#</a> 分组和过滤</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>F-查询不同课程的平均分，最高分，最低分，平均分大于80</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>核心:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>根据不同的课程分组<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT Subj ectName, AVG <span class=\"token punctuation\">(</span>StudentResult<span class=\"token punctuation\">)</span> AS 平均分,MAX <span class=\"token punctuation\">(</span>StudentResult<span class=\"token punctuation\">)</span> AS 最高分, MIN <span class=\"token punctuation\">(</span>StudentResult<span class=\"token punctuation\">)</span> AS 最低分</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FROM result r</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span> <span class=\"token operator\">=</span> sub.<span class=\"token string\">'SubjectNo'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QBOUP BY r.SubjectNo --通过什么字段来分组</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>HAVING 平均分<span class=\"token operator\">></span><span class=\"token number\">80</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/11/shujuku/MySQL%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/",
            "url": "https://love.youhuamao.xyz/2022/10/11/shujuku/MySQL%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/",
            "title": "MySQL数据管理",
            "date_published": "2022-10-10T16:00:00.000Z",
            "content_html": "<h1 id=\"外键\"><a class=\"anchor\" href=\"#外键\">#</a> 外键</h1>\n<ul>\n<li>方式一 在创建表的时候，增加约束 (麻烦，比较复杂)</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE TABLE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grade <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    gradeid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'年级id'</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gradename VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'年级名称'</span> ,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--学生表的 gradeid 字段 要去引用年级表的 gradeid</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--定义外键key</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--给这个外键添加约束 <span class=\"token punctuation\">(</span>执行引用<span class=\"token punctuation\">)</span> references 引用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CREATE TABLE IF NOT EXISTS</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>student <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'学号'</span>，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'匿名'</span> COMMENT <span class=\"token string\">'姓名'</span>，</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>NOT NULL DEFAULT <span class=\"token string\">'123456'</span> COMMENT <span class=\"token string\">'密码'</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">'sex'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">'女'</span> COMMENT <span class=\"token string\">'性别'</span>，</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">'birthday'</span> DATETIME DEFAULT NULL COMMENT <span class=\"token string\">'出生日期'</span>，</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">'gradeid'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'学生的年级'</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">'address'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'家庭住址'</span>，</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">'emai1'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'邮箱'</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PRIMARY KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    KEY <span class=\"token string\">'FK_gradeid'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    CONSTRAINT <span class=\"token string\">'FK_ gradeid'</span> FOREIGN KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span> REFERENCES <span class=\"token string\">'grade'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr></table></figure><ul>\n<li>方式二 创建表成功后，添加外键约束</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE TABLE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grade <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    gradeid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'年级id'</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gradename VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'年级名称'</span> ,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--学生表的 gradeid 字段 要去引用年级表的 gradeid</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--定义外键key</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--给这个外键添加约束 <span class=\"token punctuation\">(</span>执行引用<span class=\"token punctuation\">)</span> references 引用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CREATE TABLE IF NOT EXISTS</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>student <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'学号'</span>，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'匿名'</span> COMMENT <span class=\"token string\">'姓名'</span>，</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>NOT NULL DEFAULT <span class=\"token string\">'123456'</span> COMMENT <span class=\"token string\">'密码'</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">'sex'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">'女'</span> COMMENT <span class=\"token string\">'性别'</span>，</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">'birthday'</span> DATETIME DEFAULT NULL COMMENT <span class=\"token string\">'出生日期'</span>，</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">'gradeid'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'学生的年级'</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">'address'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'家庭住址'</span>，</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">'emai1'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'邮箱'</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PRIMARY KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>-- 创建表的时候没有外键关系</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ALTER TABLE <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>ADD CONSTRAINT <span class=\"token string\">'FK_ gradeid'</span> FOREIGN KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span> REFERENCES <span class=\"token string\">'grade'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>-- ALTER TABLE 表 ADD CONSTRAINT 约束名FOREIGN KEY<span class=\"token punctuation\">(</span>作为外键的列<span class=\"token punctuation\">)</span> REFERENCES 那个表<span class=\"token punctuation\">(</span>哪个字段<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>如果表被当成外键添加约束，不能直接删除，要先删除外接该表的表</li>\n<li>主键不能进行外联</li>\n<li>一半不这样进行外键，因为这样表之间因为相互联系会导致进行删除等操作的不便，一般在 java 程序中实现外联</li>\n</ul>\n<h1 id=\"dml语言全部记住\"><a class=\"anchor\" href=\"#dml语言全部记住\">#</a> DML 语言（全部记住）</h1>\n<h1 id=\"添加\"><a class=\"anchor\" href=\"#添加\">#</a> 添加</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--插入语句<span class=\"token punctuation\">(</span>添加<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-- insert into 表名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>字段名1,字段2,字段3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'值3'</span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INSERT INTO <span class=\"token string\">'grade'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gradename'</span><span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'大四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--由于主键自增我们可以省略<span class=\"token punctuation\">(</span>如果不写表的字段，他就会一一匹配<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INSERT INTO <span class=\"token string\">'grade'</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'大三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-- 一般写插入语句，我们一定要数据和字段一一对应<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--插入多个字段</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>INSERT INTO <span class=\"token string\">'grade'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gradename'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'大二'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'大一'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>INSERT INTO <span class=\"token string\">'student'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>INSERT INTO <span class=\"token string\">'student'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span>,<span class=\"token string\">'pwd'</span>,<span class=\"token string\">'sex'</span><span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span>'aaaaaa<span class=\"token string\">','</span>男<span class=\"token string\">')</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>INSERT INTO '</span>student<span class=\"token string\">' ('</span>name<span class=\"token string\">'，'</span><span class=\"token builtin class-name\">pwd</span><span class=\"token string\">''</span>sex<span class=\"token string\">')</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>VALUES ('</span>李四<span class=\"token string\">'，'</span>aaaaaa<span class=\"token string\">','</span>男<span class=\"token string\">'),('</span>王五<span class=\"token string\">'，'</span>aaaaaa<span class=\"token string\">','</span>男'<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span></pre></td></tr></table></figure><ul>\n<li>\n<ol>\n<li>字段和字段之间使用英文逗号隔开</li>\n<li>字段是可以省略的，但是后面的值必须要要一一对应</li>\n<li>可以同时插入多条数据，VALUES 后面的值，需要使用，隔开即可 VALUES (),(),...</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h1>\n<ul>\n<li>update 修改谁 (条件) set 原来的值 = 新值</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--修改学员名字,带了简介</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UPDATE <span class=\"token string\">'student'</span> SET <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'狂神'</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--不指定条件的情况下，会改动所有表<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>UPDATE <span class=\"token string\">'student'</span> SET <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'长江7号'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>--修改多个属性，逗号隔开</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>UPDATE <span class=\"token string\">'student'</span> SET <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'幽化猫'</span>，emai1i <span class=\"token operator\">=</span> <span class=\"token string\">'2315329173@qq.com'</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--语法:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-- UPDATE 表名set co1num_ name <span class=\"token operator\">=</span> value,<span class=\"token punctuation\">[</span>qo1num_ name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> where <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>●colnum_name是数据库的列，尽量带上<span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>●条件,筛选的条件,如果没有指定,则会修改所有的列</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>●value, 是一个具体的值，也可以是一个变量</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--通过多个条件定位数据</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>UPDATE student SET bi rthday <span class=\"token operator\">=</span> CURRENT_TIME WHERE name <span class=\"token operator\">=</span><span class=\"token string\">'长江7号'</span> AND <span class=\"token assign-left variable\">sex</span><span class=\"token operator\">=</span><span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>CURRENT_TIME 显示当前时间</pre></td></tr></table></figure><ul>\n<li>条件可以是 = != &lt;&gt;(不等于) &gt; &lt; &gt;= &lt;= BETWEEN ... and ...（表示区间）AND OR</li>\n</ul>\n<h1 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h1>\n<ul>\n<li>delete 命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法: delete from 表名 <span class=\"token punctuation\">[</span>where 条件<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--删除数据 <span class=\"token punctuation\">(</span>避免这样写，会全部删除<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DELETE FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--删除指定数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DELETE FROM <span class=\"token string\">'student'</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>TRUNCATE 命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用:完全清空一个数据库表，表的结构和索引约束不会变<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--清空student 表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>TRUNCATE <span class=\"token string\">'student'</span></pre></td></tr></table></figure><ul>\n<li>delete 的 TRUNCATE 区别</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>相同点:都能删除数据，都不会删除表结构</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不同:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    TRUNCATE 重新设置自增列计数器会归零</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    TRUNCATE 不会影响事务</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--测试delete和TRUNCATE 区别</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CREATE TABLE </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">test</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT，</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    co11^ VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span> <span class=\"token function\">id</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>INSERT INTO <span class=\"token string\">'test'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'co11'</span><span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>DELETE FROM <span class=\"token string\">'test'</span> -- 不会影响自增</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>TRUNCATE TABLE <span class=\"token string\">'test'</span> --自增会归零</pre></td></tr></table></figure><ul>\n<li>DELETE 删除的问题，重启数据库，现象</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>InnoDB 自增列会重1开始<span class=\"token punctuation\">(</span>存在内存当中的，断电即失<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MyISAM 继续从上一个自增量开始<span class=\"token punctuation\">(</span>存在文件中的，不会丢失<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/10/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E5%8F%98%E9%87%8F/",
            "url": "https://love.youhuamao.xyz/2022/10/10/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E5%8F%98%E9%87%8F/",
            "title": "类变量",
            "date_published": "2022-10-09T16:00:00.000Z",
            "content_html": "<h1 id=\"类变量静态变量\"><a class=\"anchor\" href=\"#类变量静态变量\">#</a> 类变量（静态变量）</h1>\n<ul>\n<li>static 静态 该变量最大的特点就是会被 Child 类的所有的对象实例共亨</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cLass <span class=\"token class-name\">Child</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义一个变量 count，是一个类变量 (静态变量) static 静态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 该变量最大的特点就是会被 Child 类的所有的对象实例共亨</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span><span class=\"token string\">\"加入了游戏..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>类变量也叫静态变量 / 静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</li>\n<li>访问修饰符 static 数据类型 变量名；[推荐]   static 访问修饰符 数据类型 变量名；</li>\n<li>访问：类名。类变量名 或者 对象名。类变量名</li>\n<li>类变量是随着类的加载而创建，所以即使没有创建对象实例也可以访问 (但是要满足访问权限)</li>\n<li>类变量的生命周期是随类的加载开始，随着类消亡而销毁。</li>\n</ul>\n<h1 id=\"类方法静态方法\"><a class=\"anchor\" href=\"#类方法静态方法\">#</a> 类方法（静态方法）</h1>\n<ul>\n<li>访问修饰符 static 数据返回类型 方法名 (){} [推荐]<br />\n static 访问修饰符 数据返回类型 方法名 ()</li>\n<li>使用（调用）方式类名。类方法名 或者 对象名。类方法名 [前提是满足访问修饰符的访问权限和范围]</li>\n<li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区:</li>\n<li>类方法中无 this 的参数 普通方法中隐含着 this 的参数</li>\n<li>类方法可以通过类名调用也可以通过对象名调用。</li>\n<li>普通方法和对象有关，需要通过对象名调用，比如对象名。方法名 (参数)，不能通过类名调用。</li>\n<li>类方法中不允许使用和对象有关的关键字，比如 this 和 super, 普通方法 (成员方法) 可以。</li>\n<li>类方法 (静态方法) 中只能访问静态变量或静态方法。</li>\n<li>普通成员方法，既可以访问普通变量 (方法)，也可以访问静态变量 (方法)。</li>\n<li>小结：静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员 (必须遵守访问权限)</li>\n</ul>\n<h1 id=\"main方法\"><a class=\"anchor\" href=\"#main方法\">#</a> main 方法</h1>\n<ul>\n<li>解释 main 方法的形式: public static void n in (String [] args){}</li>\n<li>main 方法时虚拟机调用</li>\n<li>java 虚拟机需要调用类的 main (方法， 所以该方法的访问权限必须是 public</li>\n<li>java 虚拟机在执行 main (方法时不必创建对象，所以该方法必须是 static</li>\n<li>该方法接收 String 类型的数组参数，该数组中保存执行 java 命令时传递给所运行的类的参数，案例演示，接收参数.</li>\n<li>java 执行的程序 参数 1 参数 2 参数 3 (参数传到了 args 里边)</li>\n<li>在 main (方法中，我们可以直接调用 main 方法所在类的静态方法或静态属性。但是，不能直接访问该类中的非静态成员，必须创建该类的 - 一个实例对象后，才能通过这个对象去访问类中的非静态成员。</li>\n</ul>\n<h1 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h1>\n<ul>\n<li>代码化块又称为初始化块，属于类中的成员（即是类的一部分），类似于方法，将逻辑语句封装在方法体中，通过 {} 包围起来。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用。</li>\n<li><span>修饰符</span> {<br />\n代码<br />\n};</li>\n<li>修饰符可选，要写的话，也只能写 static</li>\n<li>代码块分为两类，使用 static 修饰的叫静态代码块，没有 static 修饰的， 叫普通代码块。</li>\n<li>逻辑语句可以为任何逻辑语句 (输入、输出、方法调用、循环、判断等)</li>\n<li>; 号可以写上，也可以省略。</li>\n<li>代码块的调用优先于构造器，若调用构造器，会先调用代码块</li>\n</ul>\n<h1 id=\"代码块细节\"><a class=\"anchor\" href=\"#代码块细节\">#</a> 代码块细节</h1>\n<ul>\n<li>static 代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。如果是普通代码块，每创建一个对象，就执行。</li>\n<li>类什么时候被加载<br />\n创建对象实例时<br />\n创建子类对象实例，父类也会被加载，而且父类先被加载，子类后被加载<br />\n使用类的静态成员时 (静态属性，静态方法)<br />\n 案例演示: A 类 extends B 类 的静态块</li>\n<li>普通的代码块，在创建对象实例时，会被隐式的调用。被创建一次，就会调用次。如果只是使用类的静态成员时，普通代码块并不会执行。</li>\n<li></li>\n</ul>\n<ol>\n<li>创建一个对象时，在一个类调用顺序是，调用静态代码块和静态属性初始化 (注意：静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用)</li>\n<li>调用普通代码块和普通属性的初始化 (注意：普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用)</li>\n<li>调用构造方法。</li>\n</ol>\n<ul>\n<li>构造方法 (构造器) 的最前面其实隐含了 super () 和调用普通代码块，新写一个类演示，静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此是优先于构造器和普通代码块执行的。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token comment\">// 这里有隐藏的执行要求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个知识点，在前面讲解继承的时候，老师说</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 调用普通代码块</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>静态优先于普通，同级别看顺序，最后调用构造器（构造器中的<span class=\"token keyword\">super</span>（）优先于本类普通代码块，使用构造器先调用<span class=\"token keyword\">super</span>，再调用本类的普通代码块）</pre></td></tr></table></figure><ul>\n<li></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们看一下创建个子类时<span class=\"token punctuation\">(</span>继承关系<span class=\"token punctuation\">)</span>，他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用<span class=\"token punctuation\">(</span>执行<span class=\"token punctuation\">)</span>顺序如下<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 父类的静态代码块和静态属性<span class=\"token punctuation\">(</span>优先级一样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 子类的静态代码块和静态属性<span class=\"token punctuation\">(</span>优先级一 样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 父类的普通代码块和普通属性初始化<span class=\"token punctuation\">(</span>优先级一样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4.</span> 父类的构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5.</span> 子类的普通代码块和普通属性初始化<span class=\"token punctuation\">(</span>优先级一样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6.</span> 子类的构造方法</pre></td></tr></table></figure><ul>\n<li>静态代码块只能直接调用静态成员 (静态属性和静态方法)，普通代码块可以调用任意成员。</li>\n</ul>\n<h1 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h1>\n<ul>\n<li>\n<p>final 中文意思：最后的，最终的.<br />\nfinal 可以修饰类、属性、方法和局部变量.<br />\n 在某些情况下，程序员可能有以下需求，就会使用到 final:<br />\n1) 当不希望类被继承时，可以用 final 修饰.<br />\n2) 当不希望父类的某个方法被子类覆盖 / 重写 (override) 时，可以用 final 关键字修饰。<br />\n3) 当不希望类的的某个属性的值被修改，可以用 final 修饰。变量被修改也就相当于常量了<br />\n 4) 当不希望某个局部变量被修改，可以使用 final 修饰.</p>\n</li>\n<li>\n<p>final 修饰的属性又叫常量，一般用 XX_XX_XX 来命名</p>\n</li>\n<li>\n<p>final 修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如<br />\n下位置之一 [选择一个位置赋初值即可] :<br />\n①定义时：如 public final double TAX RATE=0.08;<br />\n②在构造器中<br />\n③在代码块中</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    1. 定义时：如 public final double TAX_ RATE=0.08;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    2. 在构造器中</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    了。在代码块中</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pubLic <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.08</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pubLic <span class=\"token keyword\">final</span> doubLe <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pubtic <span class=\"token keyword\">final</span> doubLe <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE3</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">AA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE3</span> <span class=\"token operator\">=</span> <span class=\"token number\">8.8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果 final 修饰的属性是静态的，则初始化的位置只能是<br />\n①定义时②在静态代码块不能在构造器中赋值。</li>\n<li>final 类不能继承，但是可以实例化对象。[A2 类]<br />\nnubhlic vnid test(lL</li>\n<li>如果类不是 final 类，但是含有 final 方法，则该方法虽然不能重写，但是可以被继承。</li>\n<li>一般来说，如果一个类已经是 final 类了，就没有必要再将方法修饰成 final 方法。</li>\n<li>final 不能修饰构造方法 (即构造器)</li>\n<li>final 和 static 往往搭配使用，效率更高，底层编译器做了优化处理。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demof</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" can can need\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>可以直接<span class=\"token class-name\">Demof</span><span class=\"token punctuation\">.</span>i，会输出<span class=\"token number\">16</span>，但是不会导致代码块被加载</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>如果将赋值操作放在代码块中进行的话，会导致代码块的加载</pre></td></tr></table></figure><ul>\n<li>包装类 (Integer, Double,Float, Boolean 等都是 final),String 也是 final 类。所以不能被继承</li>\n</ul>\n",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/10/shujuku/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://love.youhuamao.xyz/2022/10/10/shujuku/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "连接数据库及基本操作",
            "date_published": "2022-10-09T16:00:00.000Z",
            "content_html": "<h1 id=\"操作数据据库\"><a class=\"anchor\" href=\"#操作数据据库\">#</a> 操作数据据库</h1>\n<h2 id=\"操作数据库\"><a class=\"anchor\" href=\"#操作数据库\">#</a> 操作数据库</h2>\n<p>[] 表示可选内容</p>\n<ul>\n<li>创建数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE DATABASE <span class=\"token punctuation\">[</span>IF NOT EXISTS<span class=\"token punctuation\">]</span> westos<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>删除数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DROP DATABASE <span class=\"token punctuation\">[</span>IF EXISTS<span class=\"token punctuation\">]</span> westos</pre></td></tr></table></figure><ul>\n<li>使用数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-- tab 键的上面，如果你的表名或者字段名是一个特殊字符，就需要带`<span class=\"token variable\"><span class=\"token variable\">`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USE <span class=\"token variable\">`</span></span>school`</pre></td></tr></table></figure><ul>\n<li>查看数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHOW DATABASES --查看所有的数据库</pre></td></tr></table></figure><h2 id=\"数据库的列类型\"><a class=\"anchor\" href=\"#数据库的列类型\">#</a> 数据库的列类型</h2>\n<ul>\n<li>数值</li>\n</ul>\n<ol>\n<li>tinyint 十分小的数据 1 个字节</li>\n<li>smallint 较小的数据 2 个字节</li>\n<li>mediumint 中等大小的数据 3 个字节</li>\n<li>int 标准的整数 4 个字节</li>\n<li>bigint 较大的数字 8 个字节</li>\n<li>float 浮点数 4 个字节</li>\n<li>double 浮点数 8 个字节</li>\n<li>decimal 字符串形式的浮点数 金融计算的时候一般用 decimal</li>\n</ol>\n<ul>\n<li>字符串</li>\n</ul>\n<ol>\n<li>char 字符串固定大小 0~255</li>\n<li>varchar 可变字符串 0~65535 常用的 String</li>\n<li>tinytext 微型文本 2^8-1</li>\n<li>text 文本串 2^16 -1</li>\n</ol>\n<ul>\n<li>时间日期<br />\n java.util.Date</li>\n</ul>\n<ol>\n<li>date YYYY-MM-DD , 日期格式</li>\n<li>time HH: mm: ss 时间格式</li>\n<li>datetime YYYY-MM-DD HH: mm: ss 最常用的时间格式</li>\n<li>timestamp 时间戳，1970.1.1 到现在的毫秒数！</li>\n<li>year 年份</li>\n</ol>\n<ul>\n<li>null</li>\n</ul>\n<ol>\n<li>没有值，未知</li>\n<li>注意，不要使用 NULL 进行运算，结果为 NULL</li>\n</ol>\n<ul>\n<li>Unsigned</li>\n</ul>\n<ol>\n<li>无符号整数</li>\n<li>声明了该列不能声明为负数</li>\n</ol>\n<ul>\n<li>zerofill</li>\n</ul>\n<ol>\n<li>0 填充的</li>\n<li>不足的位数，使用 0 填充，int（3），5 --- 005</li>\n</ol>\n<ul>\n<li>自增</li>\n</ul>\n<ol>\n<li>通常理解为自增，自动在上一条记录的基础上 + 1 (默认)</li>\n<li>通常用来设计唯一的主键～index 必须是整数类型</li>\n<li>可以自定义设计主键自增的起始值和步长</li>\n</ol>\n<ul>\n<li>非空 NULL not null</li>\n</ul>\n<ol>\n<li>假设设置为 not null ，如果不给它赋值，就会报错！</li>\n<li>NUII 如果不填写值，默认就是 nul!</li>\n</ol>\n<ul>\n<li>默认</li>\n</ul>\n<ol>\n<li>设置默认的值！</li>\n<li>sex, 默认值为男，如果不指定该列的值，则会有默认的值</li>\n</ol>\n<h2 id=\"创建一个新表\"><a class=\"anchor\" href=\"#创建一个新表\">#</a> 创建一个新表</h2>\n<ul>\n<li>目标：创建一个 school 数据库</li>\n<li>创建学生表 (列，字段) 使用 SQL 创建</li>\n<li>学号 int 登录密码 varchar (20) 姓名，性别 varchar (2) , 出生日期 (datatime)，家庭住址，emai1</li>\n<li>注意点，使用英文 ()，表的名称和字段尽量使用 '' 括起来</li>\n<li>AUTO_ INCREMENT 自增</li>\n<li>字符串使用单引号括起来！</li>\n<li>所有的语句后面加，(英文的) ，最后一个不用加</li>\n<li>PRIMARY KEY 主键，一般一个表只有一个唯一的主键！</li>\n<li>COMMENT ''  列名</li>\n<li>DEFAULT ''  设置默认值</li>\n<li>ENGINE=INNODB DEFAULT CHARSET=utf8 设置引擎和编码</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>要求</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>学号int 登录密码varchar<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> 姓名，性别varchar<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>，出生日期<span class=\"token punctuation\">(</span>datatime<span class=\"token punctuation\">)</span>，家庭住址，email</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CREATE TABLE IF NOT EXISTS <span class=\"token string\">'student'</span> <span class=\"token punctuation\">(</span>  //如果student不存在，创建名为student的表</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class=\"token string\">'学号'</span>，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'匿名'</span> COMMENT <span class=\"token string\">'姓名'</span>，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'123456'</span> COMMENT <span class=\"token string\">'密码'</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'sex'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'女'</span> COMMENT <span class=\"token string\">'性别'</span>，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'birthday'</span> DATETIME DEFAULT NULL COMMENT <span class=\"token string\">'出生日期'</span> ,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">'address'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'家庭住址'</span>，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">'email'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'邮箱'</span>，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PRIMARY KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>格式</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>CREATE TABLE <span class=\"token punctuation\">[</span>IF NOT EXISTS<span class=\"token punctuation\">]</span> <span class=\"token string\">'表名'</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'字段名'</span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">'字段名'</span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span>，</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">'字段名'</span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>表类型<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>字符集设置<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<ul>\n<li>SHOW CREATE DATABASE school -- 查看创建数据库的语句</li>\n<li>SHOW CREATE TABLE student -- 查看 student 数据表的定义（创建）语句</li>\n<li>DESC student 显示表的结构</li>\n</ul>\n<h2 id=\"数据表的类型\"><a class=\"anchor\" href=\"#数据表的类型\">#</a> 数据表的类型</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYISAM      INNODB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>事务支持        不支持      支持</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>数据行锁定      不支持      支持</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>外键约束        不支持      支持</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>全文索引        支持        不支持</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>表空间的大小    较小        较大，约为2倍</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>优点</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MYISAM 节约空间，速度较快</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>INNODB 安全性高，事务的处理，多表多用户操作</pre></td></tr></table></figure><ul>\n<li>在物理空间存在的位置</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>所有的数据库文件都存在data目录下,一个文件夹就对应一个数据库，本质还是文件的存储<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MySQL引擎在物理文件上的区别</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>●InnoDB在数据库表中只有一一个*.frm文件，以及上级目录下的ibdata1文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>●MYISAM对应文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*.frm  表结构的定，义文件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*.MYD  数据文件<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*.MYI  索引文件<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>设置数据库表的字符集编码</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不设置的话，会是mysql 默认的字符集编码~<span class=\"token punctuation\">(</span>不支持中文<span class=\"token operator\">!</span> <span class=\"token punctuation\">)</span>MySQL的默认编码是Latin1,不支持中文</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在my.ini中配置默认的编码 character-set-server<span class=\"token operator\">=</span>utf8</pre></td></tr></table></figure><h2 id=\"修改删除表\"><a class=\"anchor\" href=\"#修改删除表\">#</a> 修改删除表</h2>\n<ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--修改表名: ALTER TABLE 旧表名 RENAME AS 新表名 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ALTER TABLE teacher RENAME AS teacher1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--增加表的字段: ALTER TABLE 表名 ADD 字段名 列属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ALTER TABLE teacher1 ADD age INT<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--修改表的字段 <span class=\"token punctuation\">(</span>重命名，修改约束<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-- ALTER TABLE 表名 MODIFY 字段名 列属性<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ALTER TABLE teacher1 MODIFY age VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--修改约束</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-- ALTER TABLE 表名 CHANGE 旧名字 新名字 列属性<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ALTER TABLE teacher1 CHANGE age age1 INT<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> -- 字段重命名</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--删除表的字段:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ALTER TABLE表名DROP 字段名</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ALTER TABLE teacher1 DROP age1</pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一一删除表<span class=\"token punctuation\">(</span>如果表存在再删除<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DROP TABLE IF EXISTS teacher1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>所有的创建和删除操作尽量加上判断，以免报错~</pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        }
    ]
}