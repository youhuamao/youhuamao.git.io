{
    "version": "https://jsonfeed.org/version/1",
    "title": "幽化猫の博客",
    "subtitle": "生活朗朗，万物可爱",
    "icon": "https://love.youhuamao.xyz/images/favicon.ico",
    "description": "这是一个人的博客",
    "home_page_url": "https://love.youhuamao.xyz",
    "items": [
        {
            "id": "https://love.youhuamao.xyz/2022/11/04/ai/Andrew%20Ng%20Lesson/%E5%8D%95%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/",
            "url": "https://love.youhuamao.xyz/2022/11/04/ai/Andrew%20Ng%20Lesson/%E5%8D%95%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/",
            "title": "单变量线性回归",
            "date_published": "2022-11-03T16:00:00.000Z",
            "content_html": "<h1 id=\"模型表示-model-representation\"><a class=\"anchor\" href=\"#模型表示-model-representation\">#</a> 模型表示 Model Representation</h1>\n<p>引入第一个监督学习算法：线性回归 Linear regression。其中只有一个参数的线性回归算法叫做 单变量线性回归 Linear regression with one variable。</p>\n<h2 id=\"线性回归-linear-regression\"><a class=\"anchor\" href=\"#线性回归-linear-regression\">#</a> 线性回归 Linear regression</h2>\n<p>还是房价预测的例子， 训练集如下：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-01.png\" alt=\"img.png\" /><br />\n 定义各个变量的含义如下：</p>\n<ul>\n<li>m 　　　  代表训练集中实例的数量</li>\n<li>x 　　　　代表特征 / 输入变量</li>\n<li>y 　　　　代表目标变量 / 输出变量</li>\n<li>(x,y) 　　  代表训练集中的实例</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo separator=\"true\">,</mo><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x^{(i)} , y^{(i)})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>    代表第 i 个观察实例：其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{(i)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> 代表第 i 个输入变量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y^{(i)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0824399999999998em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> 代表第 i 个目标变量</li>\n<li>h 　　　　代表学习算法的解决方案或函数，也称为假设（hypothesis）</li>\n</ul>\n<h2 id=\"单变量线性回归-linear-regression-with-one-variable\"><a class=\"anchor\" href=\"#单变量线性回归-linear-regression-with-one-variable\">#</a> 单变量线性回归  Linear regression with one variable</h2>\n<p>h 根据输入的 x 值来得出 y 值， y 值对应房子的价。因此， h 是一个从 x 到 y 的函数映射。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-02.png\" alt=\"img.png\" /></p>\n<p>h 的一种可能的表达方式如下。因为只含有一个特征 / 输入变量，这样的问题叫作单变量线性回归问题。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-03.png\" alt=\"img.png\" /></p>\n<h1 id=\"代价函数-cost-function\"><a class=\"anchor\" href=\"#代价函数-cost-function\">#</a> 代价函数 Cost Function</h1>\n<p>线性回归算法优化的目标是：选取最有可能与数据相拟合的直线。数据与直线的误差，称为建模误差 modeling error。为了使建模误差最小，我们需要调整参数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，使得代价函数 Cost function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J(θ_{0}, θ_{1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的值最小。</p>\n<p>在各种代价函数中，最常用的是平方误差代价函数 Squared error cost function。</p>\n<h2 id=\"如何选择模型的参数-θ\"><a class=\"anchor\" href=\"#如何选择模型的参数-θ\">#</a> 如何选择模型的参数 θ</h2>\n<p>因为 h 是一次方程，它对应两个模型参数 (parameters) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>： 在这里<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mrow><mi>i</mi><mtext>‘</mtext><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">θ_{i‘s}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mtight\">‘</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 指的是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-04.png\" alt=\"img.png\" /></p>\n<p>选取不同的参数 θ0 和 θ1，产生的 h 不同，最终的直线也不同：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-05.png\" alt=\"img.png\" /></p>\n<h2 id=\"建模误差-modeling-error\"><a class=\"anchor\" href=\"#建模误差-modeling-error\">#</a> 建模误差 modeling error</h2>\n<p>参数决定了直线相对于训练集的准确程度，模型所预测值 与 训练集实际值 之间的差距（下图中蓝线所指）就是 建模误差（modeling error）。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-06.png\" alt=\"img.png\" /><br />\n 调整参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_{0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，目标：使建模误差的平方和最小</p>\n<h2 id=\"平方误差代价函数-squared-error-cost-function\"><a class=\"anchor\" href=\"#平方误差代价函数-squared-error-cost-function\">#</a> 平方误差代价函数 Squared error cost function</h2>\n<p>为了使建模误差最小，需要 使代价函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J(θ_{0}, θ_{1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 最小，公式如下。其中 h (x) - y 是预测值和实际值的差，取其平方和。m 指的是数据集的大小，乘以 1/2m 是为了便于计算。这个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J(θ_{0}, θ_{1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>  通常称为 平方误差函数 (Squared error function)，有时也被称为 平方误差代价函数 (Squared error cost function)。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-07.png\" alt=\"img.png\" /></p>\n<p>下面公式的意思是：寻找<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">θ_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，使得 J 值最小。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-08.png\" alt=\"img.png\" /></p>\n<p>我们绘制一个等高线图， 三个坐标分别为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J(θ_{0}, θ_{1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，则可以看出在三维空间中存在一个点，使得 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J(θ_{0}, θ_{1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 最小<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-09.png\" alt=\"img.png\" /></p>\n<h1 id=\"代价函数的直观理解-i\"><a class=\"anchor\" href=\"#代价函数的直观理解-i\">#</a> 代价函数的直观理解 I</h1>\n<p>线性回归模型的假设、参数、代价函数、目标如下：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-10.png\" alt=\"img.png\" /></p>\n<p>取将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 固定为 0 时，代价函数简化为只关于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 的函数：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-11.png\" alt=\"img.png\" /></p>\n<p>下面的例子里，三个数据点的坐标是（1,1）（2,2）（3,3）。当将 θ0 固定为 0，只变化 θ1 时， 代价函数是一条二次曲线。</p>\n<p>当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 分别取值 1，0.5，0 的时候，对应左边从上到下三条曲线。<br />\n当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 取 1 时，J (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>) = 0 , 此时 J (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>) 最小，处于曲线最低点，是我们想要的结果。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-12.png\" alt=\"img.png\" /></p>\n<h1 id=\"代价函数的直观理解-ii\"><a class=\"anchor\" href=\"#代价函数的直观理解-ii\">#</a> 代价函数的直观理解 II</h1>\n<p>当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> 都发生变化时，代价函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J(θ_{0}, θ_{1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 在三维空间中图形如下：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-13.png\" alt=\"img.png\" /></p>\n<p>因为三维图像看起来太复杂， 将它投射到二维平面。引入等高线 contour plot 的概念，也叫 contour figure。等高线上的点，对应的代价函数 J (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> , <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>) 取值相同。<br />\n下面两个图，右边红点对应的直线如左图，可以看出拟合的都不好。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-14.png\" alt=\"img.png\" /><br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-15.png\" alt=\"img.png\" /></p>\n<p>下图取值位于三维图形的最低点，在二维图形上位于等高线的中心。对应的假设函数 h (x) 直线如左图。虽然拟合数据有一些误差（蓝色竖线），但是已经很接近最小值了<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-16.png\" alt=\"img.png\" /></p>\n<h1 id=\"梯度下降\"><a class=\"anchor\" href=\"#梯度下降\">#</a> 梯度下降</h1>\n<h2 id=\"局部最优解-local-optimum\"><a class=\"anchor\" href=\"#局部最优解-local-optimum\">#</a> 局部最优解 local optimum</h2>\n<p>已有一个代价函数，我们的目的是使其最小化。通常情况下，始于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>=0 , <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>=0，调整<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> , <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{θ_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>，止于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">J({θ_0} , {θ_1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的最小值。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-17.png\" alt=\"img.png\" /></p>\n<p>下面这个例子，θ0 和 θ1 没有开始于 0,0。当选取两个不同的起始点，并向着不同方向进行梯度下降时，到达两个不同的最优解，它们称为局部最优解 local optimum。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-18.png\" alt=\"img.png\" /><br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-19.png\" alt=\"img.png\" /></p>\n<h2 id=\"梯度下降算法-gradient-descent-algorithm\"><a class=\"anchor\" href=\"#梯度下降算法-gradient-descent-algorithm\">#</a> 梯度下降算法 Gradient descent algorithm</h2>\n<p>梯度下降算法对 θ 赋值， 使得 J (θ) 按梯度下降最快方向进行， 一直迭代下去， 最终得到局部最小值，即收敛 convergence。梯度下降算法不只用于线性回归， 可以用来最小化任何代价函数 J。公式如下，<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-20.png\" alt=\"img.png\" /></p>\n<p>梯度下降算法中，两个参数 同步更新 simultaneous update（左下）。如果是非同步更新 non-simultaneous update （右下），则不是梯度下降。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-21.png\" alt=\"img.png\" /></p>\n<p>a := b 是赋值操作 assignment ，将 b 的值赋值给 a。<br />\na = b  是真值断言 Truth assertion，判断 a 和 b 是否相等。</p>\n<p>α 是学习速率 learning rate，决定了沿着能让代价函数下降程度最大的方向向下迈出的步子有多大</p>\n<h1 id=\"梯度下降的直观理解\"><a class=\"anchor\" href=\"#梯度下降的直观理解\">#</a> 梯度下降的直观理解</h1>\n<h2 id=\"梯度下降法的更新规则\"><a class=\"anchor\" href=\"#梯度下降法的更新规则\">#</a> 梯度下降法的更新规则</h2>\n<p>梯度下降算法如下图：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-22.png\" alt=\"img.png\" /></p>\n<p>求导的目的，基本上可以说取这个红点的切线，即这条红色直线。由于曲线右侧斜率为正，导数为正。 因此，θ1 减去一个正数乘以 α，值变小。<br />\n曲线左侧斜率为负，导数为负。 因此，θ1 减去一个负数乘以 α，值变大。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-23.png\" alt=\"img.png\" /></p>\n<h2 id=\"学习速率-α-的选择\"><a class=\"anchor\" href=\"#学习速率-α-的选择\">#</a> 学习速率 α 的选择</h2>\n<p>如果 α 太小，只能小碎步下降，需要很多步才能到达全局最低点，很慢。<br />\n如果 α 太大，那么算法可能会越过最低点。一次次越过最低点，离它越来越远。会导致无法收敛， 甚至发散。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-24.png\" alt=\"img.png\" /></p>\n<h2 id=\"不调整学习速率-α-也能收敛\"><a class=\"anchor\" href=\"#不调整学习速率-α-也能收敛\">#</a> 不调整学习速率 α 也能收敛</h2>\n<p>假设将 θ1 初始化在局部最低点。导数为 0，会使得 θ1 不再改变，不会改变参数的值。也解释了为什么即使学习速率 α 保持不变时， 梯度下降也可以收敛到局部最低点。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-25.png\" alt=\"img.png\" /></p>\n<p>为什么不用调整 α 也能到达局部最优点？因为梯度下降一步后， 新的导数会变小，移动的幅度会自动变小。直到最终移动幅度非常小时，已经收敛到局部极小值。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-26.png\" alt=\"img.png\" /></p>\n<h1 id=\"梯度下降的线性回归-gradient-descent-for-linear-regression\"><a class=\"anchor\" href=\"#梯度下降的线性回归-gradient-descent-for-linear-regression\">#</a> 梯度下降的线性回归 Gradient Descent For Linear Regression</h1>\n<h2 id=\"梯度下降和线性回归相结合\"><a class=\"anchor\" href=\"#梯度下降和线性回归相结合\">#</a> 梯度下降和线性回归相结合</h2>\n<p>将平方误差函数 h (x)， 结合梯度下降法， 以及平方代价函数 J (Θ)，得出第一个机器学习算法， 即线性回归 Linear Regression。<br />\n梯度下降算法和线性回归模型的比较：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-27.png\" alt=\"img.png\" /></p>\n<p>对之前的线性回归问题运用梯度下降法，关键在于求出代价函数的导数，即：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-28.png\" alt=\"img.png\" /></p>\n<p>j 分别取 0 和 1 时，其导数如下：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-29.png\" alt=\"img.png\" /></p>\n<p>将上面两个导数带入梯度下降算法中，替代原来的</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial J({θ_0} , {θ_1})}{\\partial\\theta_j}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.399108em;vertical-align:-0.972108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.972108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>梯度下降算法变为：<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-30.png\" alt=\"img.png\" /><br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-31.png\" alt=\"img.png\" /></p>\n<p>虽然梯度下降一般易受局部最小值影响 susceptible to local minima，但我们在线性回归中提出的优化问题只有一个全局最优解，而没有其他局部最优解，代价函数是凸二次函数。因此，梯度下降总是收敛到全局最小值（假设学习率 α 不是太大）。<br />\n<img data-src=\"/pic/wuenda/danbianliangxianxinghuigui-31.png\" alt=\"img.png\" /></p>\n<h2 id=\"批处理梯度下降-batch-gradient-descent\"><a class=\"anchor\" href=\"#批处理梯度下降-batch-gradient-descent\">#</a> 批处理梯度下降 batch gradient descent</h2>\n<ul>\n<li>\n<p>上面使用的算法也叫批处理梯度下降 batch gradient descent，指的是梯度下降的每一步都涉及到所有的训练实例。也有其他类型的非批处理梯度下降法，每次只关注训练集中一些小子集。</p>\n</li>\n<li>\n<p>高等线性代数中有一种计算代价函数 J 最小值的数值解法，不需要梯度下降这种迭代算法，也能解出代价函数 J 的最小值，这是另一种称为正规方程 (normal equations) 的方法。实际上在数据量较大的情况下，梯度下降法比正规方程要更适用一些。</p>\n</li>\n</ul>\n<h1 id=\"相关术语\"><a class=\"anchor\" href=\"#相关术语\">#</a> 相关术语</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>线性回归    Linear regression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>单变量线性回归  Linear regression with one variable</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>代价函数    Cost Function</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>平方误差代价函数 Squared error cost <span class=\"token keyword\">function</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>建模误差    Modeling error</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>等高线　　contour plot 、contour figure</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>梯度下降    Gradient descent</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>批处理梯度下降     Batch gradient descent</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>学习效率 　Learning rate</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>同步更新  simultaneous update</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>非同步更新 non-simultaneous update</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>局部最优    <span class=\"token builtin class-name\">local</span> optimum</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>全局最优    global optimum</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>全局最小值     global minimum</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>局部最小值     <span class=\"token builtin class-name\">local</span> minimum</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>微分项        derivative term</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>微积分        calculus</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>导数　　　 derivatives</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>偏导数        partial derivatives</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>负导数        nagative derivative</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>负斜率        nagative slope</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>收敛            converge</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>发散            diverge</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>陡峭            steep</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>碗型            bow-shaped <span class=\"token keyword\">function</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>凸函数        convex <span class=\"token keyword\">function</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>线性代数     linear algebra</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>迭代算法     iterative algorithm</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>正规方程组     normal equations methods</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>梯度下降的泛化     a generalization of the gradient descent algorithm</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>越过最低点        overshoot the minimum</pre></td></tr></table></figure>",
            "tags": [
                "ai",
                "Andrew Ng Lesson",
                "ai lesson"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/11/04/ai/Andrew%20Ng%20Lesson/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%A4%8D%E4%B9%A0/",
            "url": "https://love.youhuamao.xyz/2022/11/04/ai/Andrew%20Ng%20Lesson/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%A4%8D%E4%B9%A0/",
            "title": "线性代数复习",
            "date_published": "2022-11-03T16:00:00.000Z",
            "content_html": "<h1 id=\"加法和标量乘法\"><a class=\"anchor\" href=\"#加法和标量乘法\">#</a> 加法和标量乘法</h1>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-01.png\" alt=\"img.png\" /></p>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-02.png\" alt=\"img.png\" /></p>\n<h1 id=\"矩阵向量乘法\"><a class=\"anchor\" href=\"#矩阵向量乘法\">#</a> 矩阵向量乘法</h1>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-03.png\" alt=\"img.png\" /></p>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-04.png\" alt=\"img.png\" /></p>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-05.png\" alt=\"img.png\" /></p>\n<p>应用，以预测房子价格为例<br />\n<img data-src=\"/pic/wuenda/xianxingdaishu-06.png\" alt=\"img.png\" /></p>\n<h1 id=\"矩阵乘法\"><a class=\"anchor\" href=\"#矩阵乘法\">#</a> 矩阵乘法</h1>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-07.png\" alt=\"img.png\" /></p>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-08.png\" alt=\"img.png\" /></p>\n<p>应用，以预测房子价格为例</p>\n<p><img data-src=\"/pic/wuenda/xianxingdaishu-9.png\" alt=\"img.png\" /></p>\n<h1 id=\"矩阵乘法特征\"><a class=\"anchor\" href=\"#矩阵乘法特征\">#</a> 矩阵乘法特征</h1>\n<ul>\n<li>\n<p>不符合交换律 commutative　<br />\nA × B ≠ B× A　　【但是对于单位矩阵，有 AI = IA = A】<br />\n<img data-src=\"/pic/wuenda/xianxingdaishu-10.png\" alt=\"img.png\" /></p>\n</li>\n<li>\n<p>符合组合律 associative<br />\nA ×（B× C） =（A × B）× C<br />\n<img data-src=\"/pic/wuenda/xianxingdaishu-10.png\" alt=\"img.png\" /></p>\n</li>\n<li>\n<p>单位矩阵<br />\n<img data-src=\"/pic/wuenda/xianxingdaishu-11.png\" alt=\"img.png\" /></p>\n</li>\n</ul>\n<h1 id=\"逆-转置\"><a class=\"anchor\" href=\"#逆-转置\">#</a> 逆、转置</h1>\n<h2 id=\"矩阵的逆-inverse-matrix\"><a class=\"anchor\" href=\"#矩阵的逆-inverse-matrix\">#</a> 矩阵的逆 Inverse Matrix</h2>\n<p>矩阵的逆 A-1  Inverse Matrix。如矩阵 A 是一个 m× m 矩阵（方阵）， 如果有逆矩阵 A-1 ，则：<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>A</mi><mo>=</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">AA^{-1}=A^{-1}A=I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span><br />\nI 称为单位矩阵 Identity Matrix<br />\n 没有逆矩阵的矩阵称为 奇异矩阵 singular matrix 或者 退化矩阵 degenerate matrix。</p>\n<ul>\n<li>规则：</li>\n</ul>\n<ol>\n<li>只有方阵有逆矩阵。</li>\n<li>零矩阵没有逆矩阵 （还有其他一些矩阵没有逆矩阵，可以想成是一些特别接近零矩阵的矩阵）</li>\n</ol>\n<h2 id=\"矩阵的转置-transpose-matrix\"><a class=\"anchor\" href=\"#矩阵的转置-transpose-matrix\">#</a> 矩阵的转置 Transpose Matrix</h2>\n<ul>\n<li T=\"\">\n<p>矩阵转置 Transpose Matrix ，符号为A^</p>\n</li>\n<li>\n<p>定义：设 A 为 m×n 阶矩阵（即 m 行 n 列），第 i 行 j 列的元素是 a (i,j)，即：A = a (i,j)。定义 A 的转置为这样一个 n×m 阶矩阵 B，满足 B=a (j,i)，即 b (i,j)=a (j,i)（B 的第 i 行第 j 列元素是 A 的第 j 行第 i 列元素），记 AT=B。 (有些书记为 A'=B)<br />\n 直观来看，将 A 的所有元素绕着一条从第 1 行第 1 列元素出发的右下方 45 度的射线作镜面反转，即得到 A 的转置。<br />\n<img data-src=\"/pic/wuenda/xianxingdaishu-12.png\" alt=\"img.png\" /></p>\n</li>\n<li>\n<p>矩阵的转置基本性质<br />\n (A ± B) T = AT ± BT<br />\n(A × B) T= BT × AT<br />\n(AT) T = A<br />\n(KA) T = KAT</p>\n</li>\n<li>\n<p>MATLAB 和 Octave 中矩阵转置：直接打一撇， B = A'。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> octave:<span class=\"token operator\"><span class=\"token file-descriptor important\">7</span>></span> B <span class=\"token operator\">=</span> A'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span> B <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>     <span class=\"token number\">3</span>    <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>     <span class=\"token number\">4</span>   <span class=\"token number\">16</span></pre></td></tr></table></figure><h1 id=\"术语\"><a class=\"anchor\" href=\"#术语\">#</a> 术语</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>up to the numerical precision 由于计算精度的问题</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>essentially 根本上</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ten to the minus seventeen  <span class=\"token number\">10</span>的-17次方</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>round off 四舍五入</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>optimal matrices 最优矩阵</pre></td></tr></table></figure>",
            "tags": [
                "ai",
                "Andrew Ng Lesson",
                "ai lesson"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/11/04/ai/Andrew%20Ng%20Lesson/%E5%A4%9A%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/",
            "url": "https://love.youhuamao.xyz/2022/11/04/ai/Andrew%20Ng%20Lesson/%E5%A4%9A%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/",
            "title": "多变量线性回归",
            "date_published": "2022-11-03T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "ai",
                "Andrew Ng Lesson",
                "ai lesson"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/11/03/utility/MarkDown/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/",
            "url": "https://love.youhuamao.xyz/2022/11/03/utility/MarkDown/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/",
            "title": "数学公式",
            "date_published": "2022-11-02T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "工具",
                "MarkDown",
                "MarkDown"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/11/02/Java/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/",
            "url": "https://love.youhuamao.xyz/2022/11/02/Java/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/",
            "title": "集合",
            "date_published": "2022-11-01T16:00:00.000Z",
            "content_html": "<h1 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h1>\n<ul>\n<li>集合主要是两组 (单列集合，双列集合)</li>\n<li>CoLLection 接口有两个重要的子接口 List Set, 他们的实现子类都是单列集合</li>\n<li>Map 接口的实现子类 是双列集合，存放的 K-V</li>\n</ul>\n<h1 id=\"collection接口实现类的特点\"><a class=\"anchor\" href=\"#collection接口实现类的特点\">#</a> Collection 接口实现类的特点</h1>\n<p>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</p>\n<ul>\n<li>collection 实现子类可以存放多个元素，每个元素可以是 Object</li>\n<li>有些 Collection 的实现类，可以存放重复的元素，有些不可以</li>\n<li>有些 Collection 的实现类，有些是有序的 (List)，有些不是有序 (Set)</li>\n<li>Collection 接口没有直接的实现子类，是通过它的子接口 Set 和 List 来实现的</li>\n</ul>\n<h1 id=\"collection接口常用方法\"><a class=\"anchor\" href=\"#collection接口常用方法\">#</a> Collection 接口常用方法</h1>\n<p>Collection 接口常用方法，以实现子类 ArrayList 来演示（因为 Collection 无法直接实例化）</p>\n<ul>\n<li>常用方法</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>L ist List <span class=\"token operator\">=</span> new</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>add:添加单个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list.add<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//1ist。add<span class=\"token punctuation\">(</span>new Integer<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>List.add<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"list=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>remove:删除指定元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>1ist.remove<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//删除第一个元素</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>List.remove<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//指定删除某个元素</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"List=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>contains:查找元素是否存在</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>list <span class=\"token builtin class-name\">.</span> contains<span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//T</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>size:获取元素个数</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>System.out. println<span class=\"token punctuation\">(</span>list. size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>isEmpty:判断是否为空</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span>List <span class=\"token builtin class-name\">.</span> isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//F</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>cLear:清空</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>List. cLear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>addALL:添加多个元素</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>ArrayList List2 <span class=\"token operator\">=</span> new ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>List2.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"红楼梦\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>List2.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"三国演义\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>List.addALL<span class=\"token punctuation\">(</span>List2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"list=\"</span> + List<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>containsALL:查找多个元素是否都存在</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>list.containsAlL<span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//T</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>removeAll:删除多个元素</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>List.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"聊斋\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>List.removeAlL<span class=\"token punctuation\">(</span>tist2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"List=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//<span class=\"token punctuation\">[</span>聊斋<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h1 id=\"iterator迭代器\"><a class=\"anchor\" href=\"#iterator迭代器\">#</a> Iterator (迭代器)</h1>\n<ul>\n<li>Collection 接口遍历元素方式 1: 使用 Iterator (迭代器)</li>\n<li>Iterator 对象称为迭代器，主要用于遍历 Collection 集合中的元素。</li>\n<li>所有实现了 Collection 接口的集合类都有一个 iterator (方法，用以返回个实现了 lterator 接口的对象，即可以返回一个迭代器。</li>\n<li>Iterator 仅用于遍历集合，Iterator 本身并不存放对象。</li>\n<li>迭代器的执行原理</li>\n<li>在调用 iterator.next () 方法之 前必须要调用 iterator.hasNext (进行检测。若不调用，且下一条记录无效，直接调用 it.next (会抛出 NoSuchElementException 异常。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Iterator iterator <span class=\"token operator\">=</span> coll.iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //得到一个集合的迭代器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:判断是否还有下一个元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>while<span class=\"token punctuation\">(</span>iterator.hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    //next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>:①指针下移②将下移以后集合位置上的元素返回</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System. out.println<span class=\"token punctuation\">(</span>iterator.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Collection col <span class=\"token operator\">=</span> new ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>col.add<span class=\"token punctuation\">(</span>new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"三国演义\"</span>, <span class=\"token string\">\"罗贯中\"</span>,10.1<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>col.add<span class=\"token punctuation\">(</span>new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"小李飞刀\"</span>, <span class=\"token string\">\"古龙\"</span>,5.1<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>col.add<span class=\"token punctuation\">(</span>new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"红楼梦\"</span>, <span class=\"token string\">\"曹雪芹\"</span>,34.6<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>//得到迭代器</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Iterator iterator <span class=\"token operator\">=</span> col.iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>//使用while遍历</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>while<span class=\"token punctuation\">(</span>iterator.hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Object next <span class=\"token operator\">=</span> iterator.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>System. out.println<span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>//再次遍历需要重置迭代器.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>iterator <span class=\"token operator\">=</span> col.iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"for循环增强\"><a class=\"anchor\" href=\"#for循环增强\">#</a> for 循环增强</h1>\n<ul>\n<li>Collection 接口遍 历对象方式 2-for 循环增强.</li>\n<li>增强 for 循环，可以代替 iterator 迭代器， 特点：增强 for 就是简化版的 iterator , 本质一样。只能用于遍历集合或数组。</li>\n<li>基本语法</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>元素类型元素名:集合名或数组名<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    访问元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Collection col <span class=\"token operator\">=</span> new ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>col.add<span class=\"token punctuation\">(</span>new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"三国演义\"</span>, <span class=\"token string\">\"罗贯中\"</span>,10.1<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>col.add<span class=\"token punctuation\">(</span>new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"小李飞刀\"</span>, <span class=\"token string\">\"古龙\"</span>,5.1<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>col.add<span class=\"token punctuation\">(</span>new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"红楼梦\"</span>, <span class=\"token string\">\"曹雪芹\"</span>,34.6<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/,使用增强for</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>0bject book <span class=\"token builtin class-name\">:</span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>s</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"book=\"</span> + book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>//增强for, 也可以直接在数组使用</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>int<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span>, <span class=\"token number\">8</span>，10，90<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token builtin class-name\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span> + i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"list接口\"><a class=\"anchor\" href=\"#list接口\">#</a> List 接口</h1>\n<ul>\n<li>List 接口是 Collection 接口的子接口 List java</li>\n<li>List 集合类中元素有序 (即添加顺序和取出顺序一致)、且可重复</li>\n<li>List 集合中的每个元素都有其对应的顺序索引，即支持索引。</li>\n<li>List 容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//List集合类中元素有序<span class=\"token punctuation\">(</span>即添加顺序和取出顺序一致<span class=\"token punctuation\">)</span>、且可重复</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>List list <span class=\"token operator\">=</span> new ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>List. add<span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>List.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>List.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>List.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"hsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>List.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System。out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"List=\"</span> + list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"list接口常用方法\"><a class=\"anchor\" href=\"#list接口常用方法\">#</a> List 接口常用方法</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>List List <span class=\"token operator\">=</span> new ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>List.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三丰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"贾宝玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//void add<span class=\"token punctuation\">(</span>int index, Object ele<span class=\"token punctuation\">)</span> :在index位置插入eLe元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//在index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>的位置插入一个对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list.add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"幽化猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"list=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>booLean addAll<span class=\"token punctuation\">(</span>int index, Collection eLes<span class=\"token punctuation\">)</span>: 从index位置开始将eLes中的所有元素添加进来</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>List List2 <span class=\"token operator\">=</span> new ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>list2.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>list2.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>list <span class=\"token builtin class-name\">.</span> addALL<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, List2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"list=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>//Object get<span class=\"token punctuation\">(</span>int index<span class=\"token punctuation\">)</span> :获取指定index位置的元素</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>int index0f<span class=\"token punctuation\">(</span>0bject obj<span class=\"token punctuation\">)</span> :返回obj在集合中首次出现的位置</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span>list <span class=\"token builtin class-name\">.</span> index0f<span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span> <span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>int LastIndex0f<span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">)</span> :返回obj在当前集合中末次出现的位置</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>List. add<span class=\"token punctuation\">(</span><span class=\"token string\">\"幽化猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"List=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>System.out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span>list. LastIndex0f<span class=\"token punctuation\">(</span><span class=\"token string\">\"幽化猫\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Object remove <span class=\"token punctuation\">(</span>int index<span class=\"token punctuation\">)</span> :移除指定index位置的元素，并返回此元素</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>List.remove<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"list=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Object set<span class=\"token punctuation\">(</span>int index, Object ele<span class=\"token punctuation\">)</span>: 设置指定index位置的元素为eLe，相当于 是替换。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>List.set<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">\"玛丽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>System. out。printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"List=\"</span> + list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>List subList<span class=\"token punctuation\">(</span>int fromIndex, int toIndex<span class=\"token punctuation\">)</span> :返回从fromIndex到toIndex位置的子集合</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>//注意返回的子集合fromIndex <span class=\"token operator\">&lt;=</span> subList <span class=\"token operator\">&lt;</span> toIndex</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>List returnList <span class=\"token operator\">=</span> List. subList<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> ,2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"returnList=\"</span> + returntist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"list的三种遍历方式\"><a class=\"anchor\" href=\"#list的三种遍历方式\">#</a> List 的三种遍历方式</h1>\n<ul>\n<li>方式一：使用 iterator</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Iterator iter <span class=\"token operator\">=</span> col.iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>while<span class=\"token punctuation\">(</span>iter.hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Object o <span class=\"token operator\">=</span> iter.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>方式二：使用增强 for</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>Object o:col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>方式三：使用普通 for</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> list.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i+ +<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Object object <span class=\"token operator\">=</span> list.get<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"arraylist底层结构和源码分析\"><a class=\"anchor\" href=\"#arraylist底层结构和源码分析\">#</a> ArrayList 底层结构和源码分析</h1>\n<ul>\n<li>permits all elements, including null , ArrayList 可以加入 null, 并且多个</li>\n<li>ArrayList 是由数组来实现数据存储的</li>\n<li>ArrayList 基本等同于 Vector，除了 ArrayList 是线程不安全 (执行效率高) 看源码。在多线程情况下，不建议使用 ArrayList</li>\n</ul>\n<h1 id=\"arraylist扩容机制\"><a class=\"anchor\" href=\"#arraylist扩容机制\">#</a> ArrayList 扩容机制</h1>\n<ul>\n<li>ArrayList 中维护了一个 Object 类型的数组 elementData. [debug 看源码]<br />\ntransient Object[] elementData;</li>\n<li>当创建 ArrayList 对象时，如果使用的是无参构造器，则初始 elementData 容量为 0, 第 1 次添加，则扩容 elementData 为 10, 如需要再次扩容，则扩容 elementData 为 1.5 倍。</li>\n<li>如果使用的是指定大小的构造器，则初始 elementData 容量为指定大小，如果需要扩容，则直接扩容 elementData 为 1.5 倍。</li>\n</ul>\n<h1 id=\"vector底层结构和源码剖析\"><a class=\"anchor\" href=\"#vector底层结构和源码剖析\">#</a> Vector 底层结构和源码剖析</h1>\n<ul>\n<li>Vector 类的定义说明</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class Vector<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>extends AbstractList<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>implements List<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span>, RandomAccess, Cloneable, Serializable</pre></td></tr></table></figure><ul>\n<li>Vector 底层也是一一个对象数组，protected Object [] elementData;</li>\n<li>Vector 是线程同步的，即线程安全，Vector 类的操作方法带有 synchronized</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public synchronized E get<span class=\"token punctuation\">(</span>int index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">=</span> elementCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        throw new ArrayIndexOutOfBoundsException<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> elementData<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在开发中，需要线程同步安全时，考虑使用 Vector</li>\n</ul>\n<h1 id=\"linkedlist底层结构\"><a class=\"anchor\" href=\"#linkedlist底层结构\">#</a> LinkedList 底层结构</h1>\n<ul>\n<li>LinkedList 实现了双向链表和双端队列特点</li>\n<li>可以添加任意元素 (元素可以重复)，包括 null</li>\n<li>线程不安全，没有实现同步</li>\n</ul>\n<h1 id=\"linkedlist底层操作机制\"><a class=\"anchor\" href=\"#linkedlist底层操作机制\">#</a> LinkedList 底层操作机制</h1>\n<ul>\n<li>LinkedList 底层维护了一个双向链息</li>\n<li>LinkedList 中维护了两个属性 first 和 last 分别指向首节点和尾节点</li>\n<li>每个节点 (Node 对象) , 里面又维护了 prev、next、 item 三个属性，其中通过 prev 指向前一个，通过 next 指向后一个节点。最终实现双向链表.</li>\n<li>所以 LinkedList 的元素的添加和删除，不是通过数组完成的，相对来说效率较高。</li>\n<li>模拟一个简单的双向链表</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LinkedList linkedList <span class=\"token operator\">=</span> new LinkedList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>LinkedList.add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedList=\"</span> + LinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"arraylist和linkedlist比较\"><a class=\"anchor\" href=\"#arraylist和linkedlist比较\">#</a> ArrayList 和 LinkedList 比较</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>底层结构        增删的效率      改查的效率</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ArrayList       可变数组        较低            较高    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                数组扩容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>LinkedList      双向链表        较高            较低</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                通过链表追加</pre></td></tr></table></figure><ul>\n<li>如果我们改查的操作多，选择 ArrayList</li>\n<li>如果我们增删的操作多，选择 LinkedList</li>\n<li>一般来说，在程序中，80%-90% 都是查询，因此大部分情况下会选择 ArrayList</li>\n<li>在一 个项目中，根据业务灵活选择，也可能这样，一个模块使用的是 ArrayList, 另外一个模块是 LinkedList.</li>\n</ul>\n<h1 id=\"set接口基本介绍\"><a class=\"anchor\" href=\"#set接口基本介绍\">#</a> Set 接口基本介绍</h1>\n<ul>\n<li>无序 (添加和取出的顺序不一致)，没有索引</li>\n<li>不允许重复元素，所以最多包含一个 null</li>\n<li>和 List 接口 - 样，Set 接口也是 Collection 的子接口，因此，常用方法和 Collection 接一样.</li>\n</ul>\n<h1 id=\"set接口遍历方式\"><a class=\"anchor\" href=\"#set接口遍历方式\">#</a> Set 接口遍历方式</h1>\n<ul>\n<li>同 Collection 的遍历方式样，因为 Set 接口是 Collection 接口的子接口。</li>\n</ul>\n<ol>\n<li>可以使用迭代器</li>\n<li>增强 for</li>\n<li>不能使用索引的方式来获取（因为没有索引）</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//1.以Set接口的实现类HashSet 来讲解Set接口的方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//2.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set接口的实现类的对象<span class=\"token punctuation\">(</span>Set接口对象<span class=\"token punctuation\">)</span>，不能存放重复的元素，可以添加一个nulL</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//3.set接口对象存放数据是无序<span class=\"token punctuation\">(</span>即添加的顺序和取出的顺序不一一致<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//4.注意:取出的顺序的顺序虽然不是添加的顺序，但是他固定.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Set <span class=\"token builtin class-name\">set</span> <span class=\"token operator\">=</span> new HashSet<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>set.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>set.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"lLucy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>set.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//重复</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>set.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>set.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"hsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>set.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"hsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>set.add<span class=\"token punctuation\">(</span>nuLl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>set.add<span class=\"token punctuation\">(</span>nulL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//再次添加null</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//遍历</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>//方式1:使用迭代器</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"=====使用迭代器====\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Iterator iterator <span class=\"token operator\">=</span> set.iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator. hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Object obj <span class=\"token operator\">=</span> iterator.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"obj=\"</span> + obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>//方式2:增强for</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Object o <span class=\"token builtin class-name\">:</span> <span class=\"token builtin class-name\">set</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    System.out.print<span class=\"token punctuation\">(</span><span class=\"token string\">\"0=\"</span> + o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"set接口实现类-hashset\"><a class=\"anchor\" href=\"#set接口实现类-hashset\">#</a> Set 接口实现类 - HashSet</h1>\n<ul>\n<li>HashSet 实现了 Set 接口</li>\n<li>HashSet 实际上是 HashMap，看下源码. (图)<br />\npublic HashSet() {<br />\nmap = new HashMap&lt;&gt;();<br />\n}</li>\n<li>可以存放 nul 值，但是只能有一个 null</li>\n<li>HashSet 不保证元素是有序的，取决于 hash 后，再确定索引的结果。(不保证存放元素的顺序和取出顺序一致)</li>\n<li>不能有重复元素 / 对象 (注意，判断的是哈希值（hashCode 是否一样），不一样才会认为是不同的，比如创建一个新的实例，就不会认为是同一个（就算成员一样）)</li>\n</ul>\n<h1 id=\"hashset扩容机制\"><a class=\"anchor\" href=\"#hashset扩容机制\">#</a> HashSet 扩容机制</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. HashSet底层是HashMap</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>.添加一个元素时，先得到hash值会转成-<span class=\"token operator\">></span> 索引值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>.找到存储数据表table ,看这个索引位置是否已经存放的有元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>.如果没有，直接加入</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>.如果有，调用equals比较，如果相同，就放弃添加，如果不相同，则添加到最后</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span>.在Java8中，如果一条链表的元素个数超过TREEIFY THRESHOLD<span class=\"token punctuation\">(</span>默认是8<span class=\"token punctuation\">)</span>,并且table的大小<span class=\"token operator\">>=</span>MIN TREEIFY CAPACITY<span class=\"token punctuation\">(</span>默认64<span class=\"token punctuation\">)</span>,就会进行树化<span class=\"token punctuation\">(</span>红黑树<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"hashset实例\"><a class=\"anchor\" href=\"#hashset实例\">#</a> HashSet 实例</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>要重写equals和hashCode让其在看到完全相同的成员时返回相同的哈希值（实例里边的）</pre></td></tr></table></figure><h1 id=\"set接口实现类linkedhashset\"><a class=\"anchor\" href=\"#set接口实现类linkedhashset\">#</a> Set 接口实现类 LinkedHashSet</h1>\n<ul>\n<li>LinkedHashSet 是 HashSet 的子类</li>\n<li>LinkedHashSet 底层是一个 LinkedHashMap, 底层维护了一个数组 + 双向链表</li>\n<li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序 (图)，这使得元素看起来是以插入顺序保存的。</li>\n<li>LinkedHashSet 不允许添重复元素</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>.在LinkedHastSet 中维护了一个hash表和双向链表<span class=\"token punctuation\">(</span> LinkedHashSet有head和tail <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>.每一个节点有pre和next属性，这样可以形成双向链表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>.在添加一个元素时，先求hash值，在求索引.确定该元素在hashtable的位置，然后将添加的元素加入到双向链表<span class=\"token punctuation\">(</span>如果已经存在，不添加<span class=\"token punctuation\">[</span>原则和hashset-样<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tail.next <span class=\"token operator\">=</span> newElement //简单指定</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>newElement.pre <span class=\"token operator\">=</span> <span class=\"token function\">tail</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">tail</span> <span class=\"token operator\">=</span> newEelment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">4</span>.这样的话，我们遍历LinkedHashSet也能确保插入顺序和遍历顺序一致</pre></td></tr></table></figure><h1 id=\"map接口\"><a class=\"anchor\" href=\"#map接口\">#</a> Map 接口</h1>\n<ul>\n<li>Map 与 Collection 并列存在。用于保存具有映射关系的数据：Key-Value</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Map map <span class=\"token operator\">=</span> new HashMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"no1\"</span>, <span class=\"token string\">\"幽化猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//k-v</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"no2\"</span>, <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//k-v</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"map=\"</span> + map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Map 中的 key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node 对象中</li>\n<li>Map 中的 key 不允许重复，原因和 HashSet 一样</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Map map <span class=\"token operator\">=</span> new HashMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"no1\"</span>, <span class=\"token string\">\"幽化猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//k-v</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map <span class=\"token builtin class-name\">.</span> put<span class=\"token punctuation\">(</span><span class=\"token string\">\"no2\"</span>, <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//k-v</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"map=\"</span> + map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"no1\"</span>, <span class=\"token string\">\"张三丰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//当有相同的k，就等价于替换.</pre></td></tr></table></figure><ul>\n<li>Map 中的 value 可以重复</li>\n<li>Map 的 key 可以为 null, value 也可以为 null , 注意 key 为 null, 只能有一个，value 为 null , 可以多个.</li>\n<li>常用 String 类作为 Map 的 key</li>\n<li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</li>\n</ul>\n<h1 id=\"map接口和常用方法\"><a class=\"anchor\" href=\"#map接口和常用方法\">#</a> Map 接口和常用方法</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>put:添加</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>remove:根据键删除映射关系</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>get:根据键获取值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>size:获取元素个数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>isEmpty:判断个数是否为0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>clear:清除</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>containsKey:查找键是否存在</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Map map <span class=\"token operator\">=</span> new HashMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"邓超\"</span>，new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>,100<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"邓超\"</span>，<span class=\"token string\">\"孙俪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"王宝强\"</span>，<span class=\"token string\">\"马蓉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"宋喆\"</span>，<span class=\"token string\">\"马蓉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"刘令博\"</span>，null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>map.put<span class=\"token punctuation\">(</span>null,<span class=\"token string\">\"刘亦菲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"鹿晗\"</span>，<span class=\"token string\">\"关晓彤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Object object <span class=\"token operator\">=</span> map.get<span class=\"token punctuation\">(</span><span class=\"token string\">\"邓超\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>map.remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"鹿晗\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>System. out.println<span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>boolean containsKey <span class=\"token operator\">=</span> map.containsKey<span class=\"token punctuation\">(</span>nulI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>System. out.println<span class=\"token punctuation\">(</span>containsKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>9ystem. out.printmn<span class=\"token punctuation\">(</span>map.containsValue<span class=\"token punctuation\">(</span><span class=\"token string\">\"刘办菲\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>map.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>map.isEmpty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>map.clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"map六大遍历方式\"><a class=\"anchor\" href=\"#map六大遍历方式\">#</a> Map 六大遍历方式</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Map map <span class=\"token operator\">=</span> new HashMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"邓超\"</span>，new Book<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>,100<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"邓超\"</span>，<span class=\"token string\">\"孙俪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"王宝强\"</span>，<span class=\"token string\">\"马蓉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"宋喆\"</span>，<span class=\"token string\">\"马蓉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"刘令博\"</span>，null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>map.put<span class=\"token punctuation\">(</span>null,<span class=\"token string\">\"刘亦菲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"鹿晗\"</span>，<span class=\"token string\">\"关晓彤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>一</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//第一组: 先取出所有的Key,</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>通过Key取出对应的Value</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Set keyset <span class=\"token operator\">=</span> map.keySet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>增强for</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"-----第一种 方式-------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>0bject key <span class=\"token builtin class-name\">:</span> keyset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span>key + <span class=\"token string\">\"-\"</span> + map.get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>二</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>System. out. printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"----第二二种方式---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Iterator iterator <span class=\"token operator\">=</span> keyset <span class=\"token builtin class-name\">.</span> iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator.hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Object key <span class=\"token operator\">=</span> iterator.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>System。out. println<span class=\"token punctuation\">(</span>key + <span class=\"token string\">\"_\"</span> + map.get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>三</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ColLection values <span class=\"token operator\">=</span> map 。values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//这 里可以使用所有的Collections使用的遍历 方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>增强for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"---取出所有的value----\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>0bject value <span class=\"token builtin class-name\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    System <span class=\"token builtin class-name\">.</span> out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>四</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"---取出所有的value迭代器----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Iterator iterator2 <span class=\"token operator\">=</span> values. iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator2. hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Object vaLue <span class=\"token operator\">=</span> iterator2.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System <span class=\"token builtin class-name\">.</span> out.printLn<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>五</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Set entrySet <span class=\"token operator\">=</span> map <span class=\"token builtin class-name\">.</span> entrySet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>// EntrySet<span class=\"token operator\">&lt;</span>Map 。Entry<span class=\"token operator\">&lt;</span>K,V<span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 增强for</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"----使用EntrySet的for增 强(第3种)----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>0bject entry <span class=\"token builtin class-name\">:</span> entrySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//将entry 转成Map. Entry</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Map.Entry m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Map. Entry<span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out <span class=\"token builtin class-name\">.</span> println<span class=\"token punctuation\">(</span>m <span class=\"token builtin class-name\">.</span> getKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> + <span class=\"token string\">\"-\"</span> + m. getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>六</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"----使用EntrySet的迭代器(第4种)----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Iterator iterator3 <span class=\"token operator\">=</span> entrySet <span class=\"token builtin class-name\">.</span> iterator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator3. hasNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Object entry <span class=\"token operator\">=</span> iterator3.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    //System <span class=\"token builtin class-name\">.</span> out。printLn<span class=\"token punctuation\">(</span>next <span class=\"token builtin class-name\">.</span> getClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> //HashMap<span class=\"token variable\">$Node</span> - 实现-<span class=\"token operator\">></span> Map <span class=\"token builtin class-name\">.</span> Entry <span class=\"token punctuation\">(</span>getKey, getValue <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    //向下转型Map. Entry</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Map.Entry m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Map <span class=\"token builtin class-name\">.</span> Entry<span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    System. out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span>m. getKey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> + <span class=\"token string\">\"_\"</span> + m. getVaLue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"hashmap小结\"><a class=\"anchor\" href=\"#hashmap小结\">#</a> HashMap 小结</h1>\n<ul>\n<li>Map 接的常用实现类: HashMap、Hashtable 和 Properties.</li>\n<li>HashMap 是 Map 接口使用频率最高的实现类。</li>\n<li>HashMap 是以 key-val 对的方式来存储数据 [案例 Entry]</li>\n<li>key 不能重复，但是是值可以重复，允许使用 null 键和 nulI 值。</li>\n<li>如果添加相同的 key，则会覆盖原来的 key-val , 等同于修改.(key 不会替换，val 会替换)</li>\n<li>与 HashSet - 样，不保证映射的顺序，因为底层是以 hash 表的方式来存储的.</li>\n<li>HashMap 没有实现同步，因此是线程不安全的</li>\n<li>也会进行扩容，当他自己的一个元素有超过八个节点，就会将数组扩容到 64</li>\n</ul>\n<h1 id=\"hashtable的基本介绍\"><a class=\"anchor\" href=\"#hashtable的基本介绍\">#</a> HashTable 的基本介绍</h1>\n<ul>\n<li>存放的元素是键值对：即 K-V</li>\n<li>hashtable 的键和值都不能为 null</li>\n<li>hashTable 使用方法基本上和 HashMap - 样</li>\n<li>hashTable 是线程安全的，hashMap 是线程不安全的</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Hashtable table <span class=\"token operator\">=</span> new Hashtable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//ok </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>table.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span>, <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //ok</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>table.put<span class=\"token punctuation\">(</span>null, <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>table.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span>, nul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//异常</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>table.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"lucy\"</span>, <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>:<span class=\"token punctuation\">;</span>//ok</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>table.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"lic\"</span>, <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//ok</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>table.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"lic\"</span>, <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//替换</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"hashtable扩容机制\"><a class=\"anchor\" href=\"#hashtable扩容机制\">#</a> HashTable 扩容机制</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//简单说明一下Hashtable的底层</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//1.底层有数组Hashtable<span class=\"token variable\">$Entry</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span>初始化大小为11</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//2.临界值threshold <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">11</span> * <span class=\"token number\">0.75</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//3.扩容:按照自己的扩容机制来进行即可。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//4.执行方法addEntry<span class=\"token punctuation\">(</span>hash, key, value, index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 添加K-V封装到Entry</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//5.当if <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> threshoLd<span class=\"token punctuation\">)</span> 满足时，就进行扩容</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//5.按照int newCapacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> + <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 的大小扩容.</pre></td></tr></table></figure><h1 id=\"map接口实现类properties\"><a class=\"anchor\" href=\"#map接口实现类properties\">#</a> Map 接口实现类 Properties</h1>\n<ul>\n<li>Properties 类继承自 Hashtable 类并且实现了 Map 接口，也是使用一种键值对的形式来保存数据。</li>\n<li>他的使用特点和 Hashtable 类似</li>\n<li>Properties 还可以用于从 xxx.properties 文件中，加载数据到 Properties 类对象，并进行读取和修改</li>\n<li>说明：工作后 xxx.properties 文件通常作为配置文件，这个知识点在 IO 流举例</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//1. Properties 继承HashtabLe</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//2. 可以通过k-V存放数据，当然key和value 不能为nu1l</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//增加</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Properties properties <span class=\"token operator\">=</span> new</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/ /properties。put<span class=\"token punctuation\">(</span>null, <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//抛出 空指针异常</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//properties. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span>, nuLl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //抛出空指针异常</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>properties <span class=\"token builtin class-name\">.</span> put<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span>, <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//k-V</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>properties. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"Lucy\"</span>, <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>properties <span class=\"token builtin class-name\">.</span> put<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tic\"</span>, <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>properties. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"Lir\"</span>, <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//如果有相同的key，value被替换</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>//删除</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>properties.remove<span class=\"token punctuation\">(</span><span class=\"token string\">\"lic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//改</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>properties.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span>, <span class=\"token string\">\"北京大学\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>//查</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>System.out.printIn<span class=\"token punctuation\">(</span>properties.get<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>System.out.printin<span class=\"token punctuation\">(</span>properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"如何进行选择\"><a class=\"anchor\" href=\"#如何进行选择\">#</a> 如何进行选择</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）先判断存储的类型<span class=\"token punctuation\">(</span>一组对象或一组键值对<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>）一-组对象: Collection接口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>允许重复: List</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    增删多: LinkedList <span class=\"token punctuation\">[</span>底层维护了一个双向链表<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    改查多: ArrayList <span class=\"token punctuation\">[</span>底层维护Object类型的可变数组<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不允许重复: Set</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    无序: HashSet <span class=\"token punctuation\">[</span>底层是HashMap ，维护了一个哈希表即<span class=\"token punctuation\">(</span>数组+链表+红黑树<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    排序: TreeSet</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    插入和取出顺序一致: LinkedHashSet ， 维护数组+双向链表</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3</span>）一组键值对: Map</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    键无序: HashMap <span class=\"token punctuation\">[</span>底层是:哈希表jdk7: 数组+链表，jdk8: 数组+链表+红黑树<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    键排序: TreeMap</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    键插入和取出顺序-致: LinkedHashMap</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    读取文件Properties</pre></td></tr></table></figure><h1 id=\"treemap\"><a class=\"anchor\" href=\"#treemap\">#</a> TreeMap</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//使用默认的构造器，创建TreeMap,是无序的<span class=\"token punctuation\">(</span>也没有排序<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>TreeMap treeMap <span class=\"token operator\">=</span> new</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>TreeMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>treeMap. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span>, <span class=\"token string\">\"杰克\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>treeMap. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"tqm\"</span>,<span class=\"token string\">\"汤姆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>treeMap.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"kristina\"</span>,<span class=\"token string\">\"克瑞斯提诺\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>treeMap. put<span class=\"token punctuation\">(</span><span class=\"token string\">\"smith\"</span>, <span class=\"token string\">\"斯密斯\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"treemap=\"</span> + treeMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>按照传入的k<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span>的大小进行排序</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>TreeMap treeMap <span class=\"token operator\">=</span> new TreeMap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>TreeMap treeMap <span class=\"token operator\">=</span> new TreeMap <span class=\"token punctuation\">(</span>new Comparator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    @override</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    public int compare<span class=\"token punctuation\">(</span>0bject o1, object o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        //按照传入的k<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> 的大小进行排序</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">((</span>String<span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">.</span> compareTo<span class=\"token punctuation\">((</span>String<span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>TreeMap treeMap <span class=\"token operator\">=</span> new TreeMap <span class=\"token punctuation\">(</span>new <span class=\"token function-name function\">Comparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    @override</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    public int compare<span class=\"token punctuation\">(</span>0bject o1, object o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        //按照传入的k<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> 的长度大小进行排序</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">((</span>String<span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">)</span>.length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> -<span class=\"token punctuation\">((</span>String<span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">)</span>.length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"collections工具类\"><a class=\"anchor\" href=\"#collections工具类\">#</a> Collections 工具类</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//创建ArrayList集合，用于测试。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>L ist list <span class=\"token operator\">=</span> new</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ArrayList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>List.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"king\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tist.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"'milan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>reverse<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span>:反转List 中元素的顺序</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Collections <span class=\"token builtin class-name\">.</span> reverse<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"List=\"</span> + List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>shuffle<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span>:对List 集合元素进行随机排序</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>for<span class=\"token punctuation\">(</span>inti<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ColLections .shuffle<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    System. out. printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"tist=\"</span> + List<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>sort<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span>:根据元素的自然顺序对指定List 集合元素按升序排序</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ColLections.sort<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"自然排序后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out. println<span class=\"token punctuation\">(</span><span class=\"token string\">\"list=\"</span> + list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>sort<span class=\"token punctuation\">(</span>List, Comparator<span class=\"token punctuation\">)</span>: 根据指定的Comparator 产生的顺序对List 集合元素</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>//我们希望按照字符串的长度大小排序</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ColLections <span class=\"token builtin class-name\">.</span> sort<span class=\"token punctuation\">(</span>list, new <span class=\"token function-name function\">Comparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        @override</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        public int compare<span class=\"token punctuation\">(</span>0bject o1, Object o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">((</span>String<span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">)</span>.Length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 一 <span class=\"token punctuation\">((</span>String<span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">)</span>.Length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>swap<span class=\"token punctuation\">(</span>List, int, int<span class=\"token punctuation\">)</span>:将指定list集合中的i处元素和j处元素进行交换</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Object max<span class=\"token punctuation\">(</span>Collection<span class=\"token punctuation\">)</span>:根据元素的自然顺序，返回给定集合中的最大元素</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Object max<span class=\"token punctuation\">(</span>Collection, Comparator<span class=\"token punctuation\">)</span>: 根据Comparator指定的顺序，返回给定集合中的最大元素</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Object min<span class=\"token punctuation\">(</span>Collection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Object min<span class=\"token punctuation\">(</span>Collection, Comparator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>int frequency<span class=\"token punctuation\">(</span>Collection, Object<span class=\"token punctuation\">)</span>: 返回指定集合中指定元素的出现次数</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>void copy<span class=\"token punctuation\">(</span>List dest,List src<span class=\"token punctuation\">)</span>: 将src中的内容复制到dest中</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>boolean replaceAll<span class=\"token punctuation\">(</span>List list, Object oldVal, Object newVal<span class=\"token punctuation\">)</span>:使用新值替换List对象的所有旧值</pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/11/01/Java/Java%E5%9F%BA%E7%A1%80/Math%E7%B1%BB/",
            "url": "https://love.youhuamao.xyz/2022/11/01/Java/Java%E5%9F%BA%E7%A1%80/Math%E7%B1%BB/",
            "title": "Math类",
            "date_published": "2022-10-31T16:00:00.000Z",
            "content_html": "<h1 id=\"math类常见方法\"><a class=\"anchor\" href=\"#math类常见方法\">#</a> Math 类常见方法</h1>\n<ul>\n<li>均为静态方法</li>\n<li>abs 绝对值</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int abs <span class=\"token operator\">=</span> Math.abs<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>pow 求幂</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>double pow <span class=\"token operator\">=</span> Math.pow<span class=\"token punctuation\">(</span>-3.5, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>pow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>ceil 向上取整</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//3.ceil向上取整,返回<span class=\"token operator\">></span> <span class=\"token operator\">=</span>该参数的最小整数<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>double ceil <span class=\"token operator\">=</span> Math.ceil<span class=\"token punctuation\">(</span>-3.0001<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Svstem.out. println<span class=\"token punctuation\">(</span>ceil<span class=\"token punctuation\">)</span>:</pre></td></tr></table></figure><ul>\n<li>floor 向下取整</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//4.floor向下取整，返回<span class=\"token operator\">&lt;</span> <span class=\"token operator\">=</span>该参数的最大整数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>double floor <span class=\"token operator\">=</span> Math.floor<span class=\"token punctuation\">(</span>-4.999<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>round 四舍五入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//5.round四舍五入Math.floor<span class=\"token punctuation\">(</span>该参数+ <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>long round <span class=\"token operator\">=</span> Math.round<span class=\"token punctuation\">(</span>-5.001<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>round<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>sqrt 求开方</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>double sqrt <span class=\"token operator\">=</span> Math.sqrt<span class=\"token punctuation\">(</span>-9.0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>random 求随机数 // 思考：请写出获取 a-b 之间的一个随机整数，a,b 均为整数？2-7</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//7.random返回随机数<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>--1<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//<span class=\"token punctuation\">[</span>a-b<span class=\"token punctuation\">]</span>:int num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Math.random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>* <span class=\"token punctuation\">(</span>b-a+1<span class=\"token punctuation\">)</span> +a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>double random <span class=\"token operator\">=</span> Math.random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>max 求两个数的最大值</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int abs <span class=\"token operator\">=</span> Math.abs<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>min 求两个数的最小值</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int abs <span class=\"token operator\">=</span> Math.abs<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>abs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/11/01/Java/Java%E5%9F%BA%E7%A1%80/Arrays,%E5%A4%A7%E6%95%B0,%E6%97%A5%E6%9C%9F/",
            "url": "https://love.youhuamao.xyz/2022/11/01/Java/Java%E5%9F%BA%E7%A1%80/Arrays,%E5%A4%A7%E6%95%B0,%E6%97%A5%E6%9C%9F/",
            "title": "Arrays,大数,日期",
            "date_published": "2022-10-31T16:00:00.000Z",
            "content_html": "<h1 id=\"arrays\"><a class=\"anchor\" href=\"#arrays\">#</a> Arrays</h1>\n<p>Arrays 里面包含了 - - 系列静态方法，用于管理或操作数组 (比如排序和搜索)。</p>\n<ul>\n<li>toString 返回数组的字符串形式<br />\n Arrays.toString (arr)</li>\n<li>sort 排序 (自然排序和定制排序) Integer arr [] = {1,-1, 7, 0, 89};</li>\n<li>binarySearch 通过二分搜索法进行查找，要求必须排好序<br />\n int index = Arrays.binarySearch (arr, 3);</li>\n<li>copyOf 数组元素的复制<br />\n Integer [] newArr = Arrays.copyOf (arr, arr.length);</li>\n<li>fill 数组元素的填充<br />\n Integer [] num = new Integer<span 9,3,2=\"\"></span>;<br />\nArrays.fill(num, 99);</li>\n<li>equals 比较两个数组元素内容是否完全<br />\n致<br />\n boolean equals = Arrays.equals (arr, arr2);</li>\n<li>asList 将一组值，转换成 list<br />\nList&lt; Integer&gt; asList = Arrays.asList(2,3,4,5,6, 1);<br />\nSystem.out.println(&quot;asList=&quot; + asList);</li>\n</ul>\n<h1 id=\"system类\"><a class=\"anchor\" href=\"#system类\">#</a> System 类</h1>\n<ul>\n<li>exit 退出当前程序</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//exit 退出当前程序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"ok1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//老韩解读</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> 表示程序退出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//0表示一个状态 正常的状态</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System.exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//</pre></td></tr></table></figure><ul>\n<li>arraycopy : 复制数组元素，比较适合底层调用，一般使用 Arrays.copyOf 完成复制数组.</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">src</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1,2</span>,3<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>int<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dest <span class=\"token operator\">=</span> new int<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System.arraycopy<span class=\"token punctuation\">(</span>src, <span class=\"token number\">0</span>, dest, <span class=\"token number\">0</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"dest=\"</span> + Arrays.toString<span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//源数组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//* @param  src   the <span class=\"token builtin class-name\">source</span> array。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//srcPos:从源数组的哪个索引位置开始拷贝</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//* @param  srcPos  starting position <span class=\"token keyword\">in</span> the <span class=\"token builtin class-name\">source</span> array 。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>//dest:目标数组，即把源数组的数据拷贝到哪个数组</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>//* @param dest    the destination array <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>//destPos:把源数组的数据拷贝到目标数组的哪个索引</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>//* @param destPos  starting position <span class=\"token keyword\">in</span> the destination data 。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>//Length:从源数组拷贝多少个数据到目标数组</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>//* @param  Length </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>the number of array eLements to be copied.</pre></td></tr></table></figure><ul>\n<li>currentTimeMillens: 返回当前时间距离 1970-1-1 的毫秒数</li>\n<li>gc: 运行垃圾回收机制 System.gc (0;</li>\n</ul>\n<h1 id=\"大数处理biginteger和bigdecimal类\"><a class=\"anchor\" href=\"#大数处理biginteger和bigdecimal类\">#</a> 大数处理（BigInteger 和 BigDecimal 类）</h1>\n<p>BigInteger 适合保存比较大的整型<br />\n BigDecimal 适合保存精度更高的浮点型 (小数)</p>\n<h1 id=\"biginteger和bigdecimal类常见方法\"><a class=\"anchor\" href=\"#biginteger和bigdecimal类常见方法\">#</a> BigInteger 和 BigDecimal 类常见方法</h1>\n<ul>\n<li>add 加</li>\n<li>subtract 减</li>\n<li>multiply 乘</li>\n<li>divide 除</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BigInteger b1 <span class=\"token operator\">=</span> new BigInteger<span class=\"token punctuation\">(</span><span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BigInteger b2 <span class=\"token operator\">=</span> new BigInteger<span class=\"token punctuation\">(</span><span class=\"token string\">\"200\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// <span class=\"token number\">2</span>.调用常见的运算方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// System.out.println<span class=\"token punctuation\">(</span>b1 + b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>不能使用这样的+方法运行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1.add<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//加</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1.subtract<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//减</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1.multiply<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//乘</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1.divide<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//除</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>BigDecimal b1 <span class=\"token operator\">=</span> new BigDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">\" 1234567890.567\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BigDecimal b2 <span class=\"token operator\">=</span> new BigDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">\" 123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>/ <span class=\"token number\">2</span>.调用常见的运算方法</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>”System.out.println<span class=\"token punctuation\">(</span>b1 +b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>不能使用+号运算<span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1 .add<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//加</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1.subtract<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//减</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1.multiply<span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//乘</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>//后面这个BigDecimal.ROUND CEILING需要指定，是精度</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>//没有这个参数，则会提示:错误</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>//在调用divide方法时，指定精度即可。BigDecimal. ROUND_ CEILING</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>//如果有无限循环小数，就会保留分子的精度</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>b1.divide<span class=\"token punctuation\">(</span>b2, BigDecimal.ROUND_CEILING<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>// 除</pre></td></tr></table></figure><h1 id=\"date\"><a class=\"anchor\" href=\"#date\">#</a> Date</h1>\n<ul>\n<li>Date: 精确到毫秒，代表特定的瞬间</li>\n<li>SimpleDateFormat: 格式和解析日期的类 SimpleDateFormat 格式化和解析日期的具体类。它允许进行格式化 (日期 -&gt; 文本) 解析 (文本 -&gt; 日期) 和规范化.</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//1.获取当前系统时间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//2.这里的Date 类是在java。util包</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//3.默认输出的日期格式是国外的方式，因此通常需要对格式进行转换</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Date d1 <span class=\"token operator\">=</span> new Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//获取当前系统时间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"当前日期=\"</span> + d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Date d2 <span class=\"token operator\">=</span> new Date<span class=\"token punctuation\">(</span><span class=\"token number\">9234567</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //通过指定毫秒数得到时间</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>d1.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> //获取某个时间对应的亳秒数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SimpLeDateFormat sdf <span class=\"token operator\">=</span> new SimpLeDateFormat<span class=\"token punctuation\">(</span> <span class=\"token string\">\"yyyy年MM月dd日hh:mm:ss E\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>String <span class=\"token function\">format</span> <span class=\"token operator\">=</span> sdf.format<span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // format:将日期转换成指定格式的字符串</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>//1. 可以把一个格式化的String 转成对应的Date</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>String S <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">\"1996年01月01日10:20:30 星期一\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Date parse <span class=\"token operator\">=</span> sdf.parse<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"日期类\"><a class=\"anchor\" href=\"#日期类\">#</a> 日期类</h1>\n<ul>\n<li>第二代日期类，主要就是 Calendar 类 (日历)。</li>\n<li>Calendar 类是一 个抽象类，它为特定瞬间导一 组诸如 YEAR、 MONTH、DAY OF MONTH、HOUR 等日历字段之间的转换提供了些方法， 并为操作日历字段 (例如获得下星期的日期) 提供了一些方法。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>.CaLendar是一个抽象类，并且构造器是private</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>.可以通过getInstance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 来获取实例</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//2. 获取日历对象的某个日历字段</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CaLendar c <span class=\"token operator\">=</span> CaLendar <span class=\"token builtin class-name\">.</span> getInstance<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //创建日历类对象//比较简单，自由</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System .out. printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"年: \"</span> + c. get<span class=\"token punctuation\">(</span>CaLendar. YEAR<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System. out. printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"月:\"</span>+ <span class=\"token punctuation\">(</span>c. get<span class=\"token punctuation\">(</span>CaLendar .MONTH<span class=\"token punctuation\">)</span> + <span class=\"token number\">1</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>System. out. printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"日:\"</span>+ c.get <span class=\"token punctuation\">(</span>CaLendar.DAY_0F_MONTH<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>System. out. printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"小时:\"</span>+ C. get <span class=\"token punctuation\">(</span>CaLendar <span class=\"token builtin class-name\">.</span> HOUR<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out. println<span class=\"token punctuation\">(</span><span class=\"token string\">\"分钟:\"</span>+ c.get<span class=\"token punctuation\">(</span>CaLendar .MINUTE<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out。printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"秒:\"</span>+ C. get <span class=\"token punctuation\">(</span>CaLendar. SECOND<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>//Calender没有专门的格式化方法，所以需要程序员自己来组合显示</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>//Calender没有专门的格式化方法，所以需要程序员自己来组合显示</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span>c <span class=\"token builtin class-name\">.</span> get<span class=\"token punctuation\">(</span>CaLendar.YEAR<span class=\"token punctuation\">)</span> + <span class=\"token string\">\"年\"</span> + <span class=\"token punctuation\">(</span>c. get<span class=\"token punctuation\">(</span>CaLendar .MONTH<span class=\"token punctuation\">)</span> + <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> + <span class=\"token string\">\"月\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Calendar 问题</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>可变性:像日期和时间这样的类应该是不可变的。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>偏移性: Date中的年份是从1900开始的，而月份都从0开始。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>格式化:格式化只对Date有用，Calendar则不行。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>此外，它们也不是线程安全的:不能处理闰秒等<span class=\"token punctuation\">(</span>每隔2天，多出1s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"第三代日期类\"><a class=\"anchor\" href=\"#第三代日期类\">#</a> 第三代日期类</h1>\n<ul>\n<li>LocalDate (日期 / 年月日)、LocalTime (时间 / 时分秒)、 LocalDateTime (日期时间 / 年月日时分秒分 JDK8 加入</li>\n<li>LocalDate 只包含日期，可以获取日期字段<br />\n LocalTime 只包含时间，可以获取时间字段<br />\n LocalDateTime 包含日期 + 时间，可以获取日期和时间字段</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LocaLDateTime Ldt <span class=\"token operator\">=</span> LocaLDateTime .now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //LocaLDate 。now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//LocaLTime <span class=\"token builtin class-name\">.</span> now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System. out <span class=\"token builtin class-name\">.</span> println<span class=\"token punctuation\">(</span>Ldt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System.out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"年=\"</span> + Ldt.getYear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"月=\"</span> + Ldt .getMonth<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"月=\"</span> + Ldt. getMonthValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"日=\"</span> + Ldt. getDayOfMonth<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"时=\"</span> + Ldt <span class=\"token builtin class-name\">.</span> getHour<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"分=\"</span> + Ldt. getMinute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"秒=\"</span> + Ldt <span class=\"token builtin class-name\">.</span> getSecond<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LocaLDate now <span class=\"token operator\">=</span> LogaLDate.now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span>now.getYear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>日期类格式</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LocalDateTime ldt <span class=\"token operator\">=</span> LocalDateTime.now0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//关于DateTimeFormatter的各个格式参数，需要看jdk8的文档.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Date TimeFormatter dtf <span class=\"token operator\">=</span> Date TimeFormatter. ofPattern<span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日HHI时mm分钟ss秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>String strDate <span class=\"token operator\">=</span> dtf.format<span class=\"token punctuation\">(</span>ldt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Instant 时间戳</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类似于Date</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>提供了一系列和Date类转换的方式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Instant --<span class=\"token operator\">></span> Date:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Date <span class=\"token function\">date</span> <span class=\"token operator\">=</span> Date.from<span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Date --<span class=\"token operator\">></span> Instant:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Instant instant <span class=\"token operator\">=</span> date.tolnstant<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//1.通过静态方法now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>获取表示当前时间戳的对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Instant now <span class=\"token operator\">=</span> Instant.now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>System.out.printLn<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>//2.通过from可以把Instant转成Date</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Date <span class=\"token function\">date</span> <span class=\"token operator\">=</span> Date.from <span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>//3.通过date的toInstant<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>可以把date 转成Instant对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Instant instant <span class=\"token operator\">=</span> date.toInstant<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>//提供pLus和minus方法可以对当前时间进行加或者减</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>//看看890天后，是什么时候把年月日-时分秒</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>LocaLDateTime LocalDateTime <span class=\"token operator\">=</span> Ldt. pLusDays<span class=\"token punctuation\">(</span><span class=\"token number\">890</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>System <span class=\"token builtin class-name\">.</span> out <span class=\"token builtin class-name\">.</span> printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"890天后=\"</span>+ dateTimeFormatter <span class=\"token builtin class-name\">.</span> format<span class=\"token punctuation\">(</span>LocaLDateTime<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>//看看在3456分钟前是什么时候，把年月日-时分秒输出</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>LocaLDateTime LocaLDateTime2 <span class=\"token operator\">=</span> Ldt 。minusMinutes <span class=\"token punctuation\">(</span><span class=\"token number\">3456</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>System. out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"3456分钟前日期=\"</span> + dateTimeFormatter. <span class=\"token function\">format</span> <span class=\"token punctuation\">(</span>LocaLDateTime2<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/11/01/ai/Andrew%20Ng%20Lesson/%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "url": "https://love.youhuamao.xyz/2022/11/01/ai/Andrew%20Ng%20Lesson/%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "title": "介绍和基本概念",
            "date_published": "2022-10-31T16:00:00.000Z",
            "content_html": "<h1 id=\"机器学习是什么\"><a class=\"anchor\" href=\"#机器学习是什么\">#</a> 机器学习是什么</h1>\n<h2 id=\"机器学习的定义\"><a class=\"anchor\" href=\"#机器学习的定义\">#</a> 机器学习的定义</h2>\n<ul>\n<li>Arthur Samuel (1959). Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed.<br />\n 机器学习：在进行特定编程的情况下，给予计算机学习能力的领域。</li>\n<li>Tom Mitchell (1998) Well-posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.<br />\n 卡内基梅隆大学 Tom 定义：一个程序被认为能从经验 E 中学习，解决任务 T，达到性能度量值 P，当且仅当，有了经验 E 后，经过 P 评判，程序在处理 T 时的性能有所提升。</li>\n</ul>\n<h2 id=\"机器学习算法\"><a class=\"anchor\" href=\"#机器学习算法\">#</a> 机器学习算法</h2>\n<ul>\n<li>\n<p>Supervised Learning 监督学习：学习数据带有标签</p>\n</li>\n<li>\n<p>Unsupervised Learning 无监督学习：没有任何的标签，或者有相同的标签。已知数据集，不知如何处理，也未告知每个数据点是什么。<br />\n<img data-src=\"/pic/wuenda/542362-20181026165456165-1973271475.png\" alt=\"fenlei.png\" /><img data-src=\"/pic/wuenda/julei.png\" alt=\"julei.png\" /><br />\n（下边的例子，无监督学习将数据划分为两个集合，也就是聚类 clustering algorithm）</p>\n</li>\n<li>\n<p>Reinforcement learning 强化学习</p>\n</li>\n<li>\n<p>recommender systems 推荐系统</p>\n</li>\n</ul>\n<h2 id=\"为什么要学习为什么使用\"><a class=\"anchor\" href=\"#为什么要学习为什么使用\">#</a> 为什么要学习为什么使用，</h2>\n<ul>\n<li>If you actually tried to develop a machine learning system, how to make those best practices type decisions about the way in which you build your system. 如何在构建机器学习系统的时候选择最好的实践类型决策，节省时间。</li>\n</ul>\n<h1 id=\"监督学习\"><a class=\"anchor\" href=\"#监督学习\">#</a> 监督学习</h1>\n<h2 id=\"regression回归问题预测结果是连续的输出值\"><a class=\"anchor\" href=\"#regression回归问题预测结果是连续的输出值\">#</a> Regression 回归问题：预测结果是连续的输出值</h2>\n<p>在历史房价数据的基础上，预测房屋价格。可以使用直线拟合（粉色），也可以使用二次曲线拟合（蓝色）。<br />\n<img data-src=\"/pic/wuenda/jianduxuexi-01.png\" alt=\"fenlei.png\" /><br />\n 监督学习：基于已有的正确结果      回归问题：预测连续的输出值</p>\n<h2 id=\"classification分类问题预测结果是离散的多个值\"><a class=\"anchor\" href=\"#classification分类问题预测结果是离散的多个值\">#</a> Classification 分类问题：预测结果是离散的多个值</h2>\n<p><img data-src=\"/pic/wuenda/jianduxuexi-02.png\" alt=\"img.png\" /><br />\n 下图是基于两个特征（两个维度）进行预测的例子， 右边是其他可能维度（维度可能有无穷多个）<br />\n<img data-src=\"/pic/wuenda/jianduxuexi-03.png\" alt=\"img.png\" /></p>\n<h2 id=\"区分-分类问题和回归问题\"><a class=\"anchor\" href=\"#区分-分类问题和回归问题\">#</a> 区分 “分类问题” 和 “回归问题”</h2>\n<p><img data-src=\"/pic/wuenda/jianduxuexi-04.png\" alt=\"img.png\" /></p>\n<h1 id=\"无监督学习\"><a class=\"anchor\" href=\"#无监督学习\">#</a> 无监督学习</h1>\n<h2 id=\"聚类算法clustering-algorithm-在现实生活中的应用\"><a class=\"anchor\" href=\"#聚类算法clustering-algorithm-在现实生活中的应用\">#</a> 聚类算法 clustering algorithm 在现实生活中的应用</h2>\n<p>1、Google News 每天将爬来的网址分为一个个的新闻专题。<br />\n2、基因信息分组。<br />\n<img data-src=\"/pic/wuenda/wujianduxuexi-01.png\" alt=\"img.png\" /><br />\n3、组织大型计算机集群。 社交网络的分析。市场分割。天文数据分析<br />\n<img data-src=\"/pic/wuenda/wujianduxuexi-02.png\" alt=\"img.png\" /><br />\n4、鸡尾酒 party 问题，将混在一起的多个音频源拆开。<br />\n<img data-src=\"/pic/wuenda/wujianduxuexi-03.png\" alt=\"img.png\" /><br />\n 通过这个例子，特别强调了 Octave 和 MATLAB 这些软件的简洁之处，这个算法的实现在 Octave 里只需要一行代码</p>\n",
            "tags": [
                "ai",
                "Andrew Ng Lesson",
                "ai lesson"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/31/Java/Java%E5%9F%BA%E7%A1%80/String%EF%BC%8CStringBuffer%EF%BC%8CStringBuilder/",
            "url": "https://love.youhuamao.xyz/2022/10/31/Java/Java%E5%9F%BA%E7%A1%80/String%EF%BC%8CStringBuffer%EF%BC%8CStringBuilder/",
            "title": "String，StringBuffer，StringBuilder",
            "date_published": "2022-10-30T16:00:00.000Z",
            "content_html": "<h1 id=\"string类的理解和创建对象\"><a class=\"anchor\" href=\"#string类的理解和创建对象\">#</a> String 类的理解和创建对象</h1>\n<ul>\n<li>\n<p>String 对象用于保存字符串，也就是一组字符序列</p>\n</li>\n<li>\n<p>字符串常量对象是用双引号括起的字符序列。例如: &quot;你好&quot;、&quot;12.97&quot;、 &quot;boy&quot; 等</p>\n</li>\n<li>\n<p>字符串的字符使用 Unicode 字符编码，一个字符 (不区分字母还县汉宁占两个宁节</p>\n</li>\n<li>\n<p>String 类较常用构造方法 (其它看手册):<br />\nString s1 = new String();<br />\nString s2 = new String(String original);<br />\nString s3 = new String(char[] a);<br />\nString s4 = new String(char[] a,int startIndex,int count)</p>\n</li>\n<li>\n<p>String 有属性 private final char value []; 用于存放字符串内容 一定要注意: value 是一个 final 类型，不可以修改其地址，但可以修改值</p>\n</li>\n<li>\n<p>创建对象的两种方式<br />\n方式一：直接赋值 Strings = &quot;hspedu&quot;;</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>方式- :先从常量池查看是否有<span class=\"token string\">\"hsp\"</span>数据空间，如果有，直接指向<span class=\"token punctuation\">;</span>如果没有则重新创建，然后指向。s最终指向的是常量池的空间地址</pre></td></tr></table></figure><p>方式二：调用构造器 String S = new String (&quot;hspedu&quot;);</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>方式二:先在堆中创建空间，里面维护了value属性，指向常量池的hsp空间。如果常量池没有<span class=\"token string\">\"hsp\"</span>,重新创建，如果有，直接通过value指向。 最终指向的是堆中的空间地址。</pre></td></tr></table></figure><h1 id=\"字符串特性\"><a class=\"anchor\" href=\"#字符串特性\">#</a> 字符串特性</h1>\n<ul>\n<li>String 是一个 final 类， 代表不可变的字符序列</li>\n<li>字符串是不可变的。一个字符串对象旦被分配， 其内容是不可变的.</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span> //创建a对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String b <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>//创建 b对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//老韩解读</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//1.先创建一个StringBuilder sb <span class=\"token operator\">=</span> StringBuilder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//2. 执行sb. append<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//3. sb. append<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//4. String <span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span> sb. toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//最后其实是c指向堆中的对象<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> -<span class=\"token operator\">></span>池中<span class=\"token string\">\"helloabd\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>String C <span class=\"token operator\">=</span>a+b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>String a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>+<span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> //String a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>+ <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> //<span class=\"token operator\">==</span><span class=\"token operator\">></span>优化等价String a <span class=\"token operator\">=</span> \"helloabc <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>底层是 StringBuilder sb = new StringBuilder (); sb.append (a);sb.append (b); sb 是在堆中，并且 append 是在原来字符串的基础上追加的.</li>\n<li>重要规则，Stringc1 =&quot;ab&quot; + &quot;cd&quot;; 常量相加，看的是池。 Stringc1 = a + b; 变量相加，是在堆中</li>\n</ul>\n<h1 id=\"srtring类常见方法\"><a class=\"anchor\" href=\"#srtring类常见方法\">#</a> Srtring 类常见方法</h1>\n<ul>\n<li>equals // 区分大小写，判断内容是否相等</li>\n<li>equalslgnoreCase // 忽略大小写的判断内容是否相等</li>\n<li>length // 获取字符的个数，字符串的长度</li>\n<li>indexOf // 获取字符在字符串中第 1 次出现的索引，索引从 0 开始，如果找不到，返回 - 1</li>\n<li>lastlndexOf // 获取字符在字符串中最后 1 次出现的索引，索引从 0 开始，如找不到，返回 - 1</li>\n<li>substring // 截取指定范围的子串</li>\n<li>trim // 去前后空格</li>\n<li>charAt: 获取某索引处的字符，注意不能使用 Str [index] 这种方式</li>\n<li>toUpperCase</li>\n<li>toLowerCase</li>\n<li>concat</li>\n<li>replace 替换字符串中的字符</li>\n<li>split 分割字符串，对于某些分割字符，我们需要转义比如 | \\ 等案例: String poem = &quot;锄禾日当午，汗滴禾下土，谁知盘中餐粒粒皆辛苦&quot;; 和文件路径.</li>\n<li>compareTp // 比较两个字符串的大小</li>\n<li>toCharArray // 转换成字符数组</li>\n<li>format // 格式字符串，% s 字符串 % c 字符 % d 整型 %.2f 浮点型案例，将一个人的信息格式化输出。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String i <span class=\"token operator\">=</span> String.format<span class=\"token punctuation\">(</span>我的年龄是%d,name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"stringbuffer类\"><a class=\"anchor\" href=\"#stringbuffer类\">#</a> StringBuffer 类</h1>\n<ul>\n<li>java.lang.StringBuffer 代表可变的字符序列，可以对字符串内容进行增删。</li>\n<li>很多方法与 String 相同，但 StringBuffer 是可变长度的。</li>\n<li>StringBuffer 是一个容器。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. StringBuffer 的直接父类是AbstractStringBuilder</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>. StringBuffer 实现了Serializable, 即StringBuffer的对象可以串行化</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>.在父类中 AbstractStringBuilder 有属性char<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vaLue,不是final 该value数组存放字符串内容，引出存放在堆中的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>. StringBuffer 是一个final类，不能被继承</pre></td></tr></table></figure><h1 id=\"string-vs-stringbuffer\"><a class=\"anchor\" href=\"#string-vs-stringbuffer\">#</a> String VS StringBuffer</h1>\n<ul>\n<li>String 保存的是字符串常量，里面的值不能更改，每次 String 类的更新实际上就是更改地址，效率较低 //private final char value [];</li>\n<li>StringBuffer 保存的是字符串变量，里面的值可以更改，每次 StringBuffer 的更新实际上可以更新内容，不用每次更新地址 (当空间不够时更新)，效率较高<br />\n //char [] value; / 这个放在堆.</li>\n</ul>\n<h1 id=\"stringbuffer构造器\"><a class=\"anchor\" href=\"#stringbuffer构造器\">#</a> StringBuffer 构造器</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>StringBuffer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>构造一个其中不带字符的字符串缓冲区，其初始容量为16个字符。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>StringBuffer<span class=\"token punctuation\">(</span>CharSequence <span class=\"token function\">seq</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>public java.lang StringBuilder<span class=\"token punctuation\">(</span>CharSequence <span class=\"token function\">seq</span><span class=\"token punctuation\">)</span>构造- - -个字符串缓冲区，它包含与指定的CharSequence相同的字符。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>StringBuffer<span class=\"token punctuation\">(</span>int capacity<span class=\"token punctuation\">)</span> //capacity <span class=\"token punctuation\">[</span>容量<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>构造-一个不带字符，但具有指定初始容量的字符串缓冲区。即对char<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>大小进行指定</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>StringBuffer<span class=\"token punctuation\">(</span>String str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。</pre></td></tr></table></figure><h1 id=\"string和stringbuffer相互转换\"><a class=\"anchor\" href=\"#string和stringbuffer相互转换\">#</a> String 和 StringBuffer 相互转换</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/ String --<span class=\"token operator\">></span> StringBuffer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Strings <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//方式1:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>StringBuffer b1 <span class=\"token operator\">=</span> new StringBuffer<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/方式2:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>StringBuffer b2 <span class=\"token operator\">=</span> new StringBuffer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b2.append<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>/ StringBuffer 一<span class=\"token operator\">></span> String</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>//方式1:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>String s2 <span class=\"token operator\">=</span> b1.toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //b1 <span class=\"token punctuation\">[</span>StringBuffer<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>//方式2:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>String s3 <span class=\"token operator\">=</span> new String<span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"stringbuffer方法\"><a class=\"anchor\" href=\"#stringbuffer方法\">#</a> StringBuffer 方法</h1>\n<ul>\n<li>增 append</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>StringBuffer s <span class=\"token operator\">=</span> new StringBuffer<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//增</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s.append<span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>// <span class=\"token string\">\"hello,\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s.append<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三丰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//<span class=\"token string\">\"hello,张三丰”</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s.append(\"</span>赵敏<span class=\"token string\">\" ).append(100).append(true).append(10. 5);//\"</span>hello,张三丰赵敏100true10.5<span class=\"token string\">\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System.out.printLn(s);//\"</span>he7O,张三丰赵敏100true10.5\"</pre></td></tr></table></figure><ul>\n<li>删 delete (start,end)</li>\n<li>改 replace (start,end,string)// 将 start---end 间的内容替换掉，不含 end</li>\n<li>查 indexOf // 查找子串在字符串第 1 次出现的索引，如果找不到返回 - 1</li>\n<li>插 insert</li>\n<li>获取长度 length</li>\n</ul>\n<h1 id=\"stringbuilder类\"><a class=\"anchor\" href=\"#stringbuilder类\">#</a> StringBuilder 类</h1>\n<ul>\n<li>个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API, 但不保证同步 (StringBuilder 不是线程安全)。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。</li>\n<li>在 StringBuilder . 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//老韩解读</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//1. StringBuilder 继承AbstractStringBuilder 类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//2. 实现了SeriaLizable ,说明StringBuilder对象是可以串行化<span class=\"token punctuation\">(</span>对象可以网络传输，可以保存到文件<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//3. StringBuilder 是final类，不能被继承</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//4. StringBuilder 对象字符序列仍然是存放在其父类AbstractStringBuilder的 char<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vaLue <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//因此，字符序列是堆中</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//5. StringBuilder的方法，没有做互斥的处理,即没有synchronized 关键字,因此在单线程的情况下使用</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>StringBuilder stringBuilder <span class=\"token operator\">=</span> new StringBuilder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/31/Java/Java%E5%9F%BA%E7%A1%80/%E5%8C%85%E8%A3%85%E7%B1%BB/",
            "url": "https://love.youhuamao.xyz/2022/10/31/Java/Java%E5%9F%BA%E7%A1%80/%E5%8C%85%E8%A3%85%E7%B1%BB/",
            "title": "包装类",
            "date_published": "2022-10-30T16:00:00.000Z",
            "content_html": "<h1 id=\"包装类\"><a class=\"anchor\" href=\"#包装类\">#</a> 包装类</h1>\n<ul>\n<li>装箱与拆箱<br />\n wokankanzenmexianshi</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//演示int <span class=\"token operator\">&lt;</span>--<span class=\"token operator\">></span> Integer 的装箱和拆箱</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//jdk5前是手动装箱和拆箱</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//手动装箱int-<span class=\"token operator\">></span>Integer</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Integer integer <span class=\"token operator\">=</span> new Integer<span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//第一种手动装箱方式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Integer integer1 <span class=\"token operator\">=</span> Integer.value0f<span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//第二种手动装箱方式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//手动拆箱</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//Integer -<span class=\"token operator\">></span> int</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>int i <span class=\"token operator\">=</span> integer.intVaLue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>//jdk5后，就可以自动装箱和自动拆箱</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>int n2 <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>//自动装箱int -<span class=\"token operator\">></span> Integer</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Integer integer2 <span class=\"token operator\">=</span> n2 //底层使用的是: Integer.valueOf<span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//自动拆箱Integer -<span class=\"token operator\">></span> int </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>int n3 <span class=\"token operator\">=</span> integer2<span class=\"token punctuation\">;</span> //底层仍然使用的是intValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法</pre></td></tr></table></figure><h1 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>基本数据类型        包装类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>boolean             Boolean</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>char                Character</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>byte                Byte</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>short               Short</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int                 Integer</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>long                Long</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>float               Float</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>double              Double</pre></td></tr></table></figure><h1 id=\"包装类方法\"><a class=\"anchor\" href=\"#包装类方法\">#</a> 包装类方法</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//包装类<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span>String</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Integer i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>//自 动装箱</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//方式1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>string str1 <span class=\"token operator\">=</span> i +<span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//方式2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>String str2 <span class=\"token operator\">=</span> i.toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//方式3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>String str3 <span class=\"token operator\">=</span> String.valueOf<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>//String -<span class=\"token operator\">></span>包装类<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>String str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Integer i2 <span class=\"token operator\">=</span> Integer.parseInt<span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//使用到自动装箱</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Integer i3 <span class=\"token operator\">=</span>new Integer<span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//构造器</pre></td></tr></table></figure><h1 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Integer.MIN VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //返回最小值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Integer.MAX VALUE<span class=\"token punctuation\">)</span>://返回最大值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System.out.printIn<span class=\"token punctuation\">(</span>Character.isDigit<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//判断是不是数字</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Character.isLetter<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//判断是不是字母</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Character.isUpperCase<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//判断是不是大写</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Character.isLowerCase<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//判断是不是小写</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Character.isWhitespace<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//判断是不是空格</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Character.toUpperCase<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//转成大写</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>Character.toLowerCase<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//转成小写</pre></td></tr></table></figure><h1 id=\"易错\"><a class=\"anchor\" href=\"#易错\">#</a> 易错</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Integer i <span class=\"token operator\">=</span> new Integer<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Integer j <span class=\"token operator\">=</span> new Integer<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>System. out,println<span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //False</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//所以，这里主要是看范围-128 ~ <span class=\"token number\">127</span>就是直接返回</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Integer m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> //底层Integer.valueOf<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> -<span class=\"token operator\">></span>阅读源码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Integer n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>//底层Integer.valueOf<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System. out.println<span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//T</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>//所以，这里主要是看范围-128 ~ <span class=\"token number\">127</span>就是直接返回</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>//否则，就new Integer<span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Integer X <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>//底层Integer.valueOf<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Integer y <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span>//底层Integer.valueOf<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//false</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>//只要有基本数据类型，判断的就是值是否相同</pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/30/Java/SSM/Mybatis/%E7%BC%93%E5%AD%98/",
            "url": "https://love.youhuamao.xyz/2022/10/30/Java/SSM/Mybatis/%E7%BC%93%E5%AD%98/",
            "title": "缓存",
            "date_published": "2022-10-29T16:00:00.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>查询 <span class=\"token builtin class-name\">:</span> 连接数据库，耗资源<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>一次查询的结果，给他暂存在一个可以直接取到的地方<span class=\"token operator\">!</span> --<span class=\"token operator\">></span>内存:缓存</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</pre></td></tr></table></figure><ul>\n<li>什么是缓存 [Cache]?</li>\n</ul>\n<ol>\n<li>存在内存中的临时数据。</li>\n<li>将用户经常查询的数据放在缓存 (内存) 中，用户去查询数据就不用从磁盘上 (关系型数据库数据文件) 查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>\n</ol>\n<ul>\n<li>为什么使用缓存？<br />\n 减少和数据库的交互次数，减少系统开销，提高系统效率。</li>\n<li>什么样的数据能使用缓存？<br />\n 经常查询并且不经常改变的数据。</li>\n</ul>\n<h1 id=\"mybatis缓存\"><a class=\"anchor\" href=\"#mybatis缓存\">#</a> Mybatis 缓存</h1>\n<ul>\n<li>MyBatis 包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效<br />\n率。</li>\n<li>MyBatis 系统中默认定义了两级缓存：一级缓存和二级缓存</li>\n</ul>\n<ol>\n<li>默认情况下，只有一 - 级缓存开启。 (SqlSession 级别的缓存， 也称为本地缓存)</li>\n<li>二级缓存需要手动开启和配置，他是基于 namespace 级别的缓存。</li>\n<li>为了提高扩展性，MyBatis 定义了缓存接口 Cache。我们可以通过实现 Cache 接口来自定义二级缓存</li>\n</ol>\n<h1 id=\"一级缓存\"><a class=\"anchor\" href=\"#一级缓存\">#</a> 一级缓存</h1>\n<ul>\n<li>一级缓存也叫本地缓存: SqlSession</li>\n</ul>\n<ol>\n<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>\n<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>\n</ol>\n<ul>\n<li>测试步骤：</li>\n</ul>\n<ol>\n<li>开启日志</li>\n<li>测试一个在 Sesion 中查询两次相同记录</li>\n<li>查看日志输出</li>\n</ol>\n<ul>\n<li>缓存失效的情况</li>\n<li>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</li>\n<li>查询不同的 Mapper.xml</li>\n<li>手动清理缓存</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sqlSession.clearCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"一级缓存小结\"><a class=\"anchor\" href=\"#一级缓存小结\">#</a> 一级缓存小结</h1>\n<p>一级缓存默认是开启的， 只在一 - 次 SqlSession 中有效，也就是拿到连接到关闭连接这个区间段！<br />\n 一级缓存相当于一个 Map</p>\n<h1 id=\"二级缓存\"><a class=\"anchor\" href=\"#二级缓存\">#</a> 二级缓存</h1>\n<ul>\n<li>二级缓存也叫全局缓存，一 - 级缓存作用域太低了，所以诞生了二级缓存</li>\n<li>基于 namespace 级别的缓存，- 个名称空间，对应一个二级缓存；</li>\n<li>工作机制</li>\n</ul>\n<ol>\n<li>一个会话查询一 条数据，这个数据就会被放在当前会话的一 - 级缓存中；</li>\n<li>如果当前会话关闭了，这个会话对应的一 - 级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>\n<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>\n<li>不同的 mapper 查出的数据会放在自己对应的缓存 (map) 中；</li>\n</ol>\n<ul>\n<li>步骤</li>\n</ul>\n<ol>\n<li>开启全局缓存</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>setting <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"cacheEnabled\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span>/<span class=\"token operator\">></span> //显示的开启全局缓存</pre></td></tr></table></figure><ol start=\"2\">\n<li>在要使用二级缓存的 Mapper 中开启</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--在当前Mapper. xmL中使用二级缓存--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>cache/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>也可以自定义参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>cache</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">eviction</span><span class=\"token operator\">=</span> <span class=\"token string\">\"FIFO\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">flushInterval</span><span class=\"token operator\">=</span><span class=\"token string\">\"60000\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">size</span><span class=\"token operator\">=</span><span class=\"token string\">\"512\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">read0nly</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span>/<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>测试<br />\n问题：我们需要将实体类序列化！否则就会报错！<br />\nCaused by: java. io. NotSerializableException: com.kuang.pojo.User<br />\n 解决办法：让实体类 implements Serializable</li>\n</ol>\n<h1 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结:</h1>\n<ul>\n<li>只要开启了二级缓存，在同一个 Mapper 下就有效 I</li>\n<li>所有的数据都会先放在一级缓存中；</li>\n<li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li>\n</ul>\n<h1 id=\"缓存原理\"><a class=\"anchor\" href=\"#缓存原理\">#</a> 缓存原理</h1>\n<p><img data-src=\"/pic/java/huancunyuanli.png\" alt=\"缓存原理.png\" /></p>\n<h1 id=\"ehcahe\"><a class=\"anchor\" href=\"#ehcahe\">#</a> Ehcahe</h1>\n<ul>\n<li>导包</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- https://mvnrepository. com/ artifact/org. mybatis. caches/mybatis-ehcache --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">></span>org.mybatis.caches<span class=\"token operator\">&lt;</span>/groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">></span>mybatis-ehcache<span class=\"token operator\">&lt;</span>/artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span><span class=\"token number\">1.1</span>.<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>cache <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.mybatis.caches.ehcache\"</span>/<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>ehcache.xml</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>?xml <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span>?<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>ehcache xmlns:xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi:noNamespaceSchemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://ehcache.org/ehcache.xsd\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token assign-left variable\">updateCheck</span><span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>diskStore <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token string\">\"./tmpdir/Tmp_EhCache\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>defaultCache</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token assign-left variable\">eternal</span><span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token assign-left variable\">maxElementsInMemory</span><span class=\"token operator\">=</span><span class=\"token string\">\"10000\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token assign-left variable\">overflowToDisk</span><span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token assign-left variable\">diskPersistent</span><span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token assign-left variable\">timeToIdleSeconds</span><span class=\"token operator\">=</span><span class=\"token string\">\"1800\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token assign-left variable\">timeToLiveSeconds</span><span class=\"token operator\">=</span><span class=\"token string\">\"259200\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token assign-left variable\">memoryStoreEvictionPolicy</span><span class=\"token operator\">=</span><span class=\"token string\">\"LRU\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>cache</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"cloud_user\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token assign-left variable\">eternal</span><span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token assign-left variable\">maxElementsInMemory</span><span class=\"token operator\">=</span><span class=\"token string\">\"5000\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token assign-left variable\">overflowToDisk</span><span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token assign-left variable\">diskPersistent</span><span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token assign-left variable\">timeToIdleSeconds</span><span class=\"token operator\">=</span><span class=\"token string\">\"1800\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token assign-left variable\">timeToLiveSeconds</span><span class=\"token operator\">=</span><span class=\"token string\">\"1800\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token assign-left variable\">memoryStoreEvictionPolicy</span><span class=\"token operator\">=</span><span class=\"token string\">\"LRU\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span>/ehcache<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/27/Java/SSM/Mybatis/%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%84%E7%90%86/",
            "url": "https://love.youhuamao.xyz/2022/10/27/Java/SSM/Mybatis/%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%84%E7%90%86/",
            "title": "多对一处理",
            "date_published": "2022-10-26T16:00:00.000Z",
            "content_html": "<h1 id=\"多对一\"><a class=\"anchor\" href=\"#多对一\">#</a> 多对一</h1>\n<ul>\n<li>多个学生，对应一个老师</li>\n<li>对于学生这边而言，关联.. 多个学生，关联 - 一个老师 [多对一]</li>\n<li>对于老师而言，集合，一个老师，有很多学生 [一对多]</li>\n<li>SQL</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE TABLE <span class=\"token variable\"><span class=\"token variable\">`</span>teacher<span class=\"token variable\">`</span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span> INT NOT NULL PRIMARY KEY,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> DEFAULT NULL</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span>ENGINE <span class=\"token operator\">=</span> INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INSERT INTO teacher VALUES<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,<span class=\"token string\">'秦老师'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CREATE TABLE <span class=\"token variable\"><span class=\"token variable\">`</span>student<span class=\"token variable\">`</span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span> INT NOT NULL PRIMARY KEY,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> DEFAULT NULL,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token variable\"><span class=\"token variable\">`</span>tid<span class=\"token variable\">`</span></span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> DEFAULT NULL,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    CONSTRAINT <span class=\"token variable\"><span class=\"token variable\">`</span>fktid<span class=\"token variable\">`</span></span> FOREIGN KEY <span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>tid<span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span> REFERENCES <span class=\"token variable\"><span class=\"token variable\">`</span>teacher<span class=\"token variable\">`</span></span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span>ENGINE <span class=\"token operator\">=</span> INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>INSERT INTO student VALUES <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,<span class=\"token string\">'小明'</span>,1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>INSERT INTO student VALUES <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>,<span class=\"token string\">'小红'</span>,1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>INSERT INTO student VALUES <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>,<span class=\"token string\">'小张'</span>,1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>INSERT INTO student VALUES <span class=\"token punctuation\">(</span><span class=\"token number\">4</span>,<span class=\"token string\">'小李'</span>,1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>INSERT INTO student VALUES <span class=\"token punctuation\">(</span><span class=\"token number\">5</span>,<span class=\"token string\">'小王'</span>,1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"测试环境处理\"><a class=\"anchor\" href=\"#测试环境处理\">#</a> 测试环境处理</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>.导入lombok</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>.新建实体类Teacher, Student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>.建立Mapper接口</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>.建立Mapper.XML文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>.在核心配置文件中绑定注册我们的Mapper接口或者文件<span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span>方式很多 随心选<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span>.测试查询是否能够成功<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// <span class=\"token operator\">!</span><span class=\"token operator\">!</span>编写配置文件中的类要写全路径<span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr></table></figure><h1 id=\"按照嵌套查询处理\"><a class=\"anchor\" href=\"#按照嵌套查询处理\">#</a> 按照嵌套查询处理</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>resultMap <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"StudentTeacher\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.Student\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        //复杂的属性，我们需要单独处理 对象：association   集合：collection</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>association <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"teacher\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"tid\"</span> <span class=\"token assign-left variable\">javaType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.Teacher\"</span> <span class=\"token assign-left variable\">select</span><span class=\"token operator\">=</span><span class=\"token string\">\"getTeacher\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/resultMap<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getStudent\"</span> <span class=\"token assign-left variable\">resultMap</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.dao.StudentTeacher\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">select</span> * from student</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getTeacher\"</span> <span class=\"token assign-left variable\">resultType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.Teacher\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">select</span> * from teacher where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>public class Student <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    private int <span class=\"token function\">id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    private String name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    private Teacher teacher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>public class Teacher <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    private int <span class=\"token function\">id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    private String name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"按照结果查询处理\"><a class=\"anchor\" href=\"#按照结果查询处理\">#</a> 按照结果查询处理</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getStudent2\"</span> <span class=\"token assign-left variable\">resultMap</span><span class=\"token operator\">=</span><span class=\"token string\">\"StudentTeacher2\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">select</span> s.id sid,s.name sname,t. name tname</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    from student s, teacher t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    where s.tid <span class=\"token operator\">=</span> t.id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>resu1tMap <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"StudentTeacher2\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"Student\"</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"sid\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"sname\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>association <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"teacher\"</span> <span class=\"token assign-left variable\">javaType</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Teacher\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"tname\"</span>/ <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/association<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>/resultMap<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"一对多处理\"><a class=\"anchor\" href=\"#一对多处理\">#</a> 一对多处理</h1>\n<ul>\n<li>实体类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class Teacher <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    private int <span class=\"token function\">id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    private String name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    private List<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> students<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>public class Student <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    private int <span class=\"token function\">id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    private String name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    private int tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>按结果嵌套查询</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getStudent\"</span> <span class=\"token assign-left variable\">resultMap</span><span class=\"token operator\">=</span><span class=\"token string\">\"StudentTeacher\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">select</span> * from student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getTeacher\"</span> <span class=\"token assign-left variable\">resultType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.Teacher\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">select</span> * from teacher where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span>resultMap <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"StudentTeacher\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.Student\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        // 集合中的范型用ofType获取 javaType指定属性的类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span>association <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"teacher\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"tid\"</span> <span class=\"token assign-left variable\">javaType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.Teacher\"</span> <span class=\"token assign-left variable\">select</span><span class=\"token operator\">=</span><span class=\"token string\">\"getTeacher\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/resultMap<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>a</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getTeacher2\"</span> <span class=\"token assign-left variable\">resultMap</span><span class=\"token operator\">=</span><span class=\"token string\">\"TeacherStudent2\"</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">select</span> from mybatis.teacher where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;tid&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>resultMap <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"TeacherStudent2\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"Teacher\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>collection <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"students\"</span> <span class=\"token assign-left variable\">javaType</span><span class=\"token operator\">=</span><span class=\"token string\">\"ArrayList\"</span> <span class=\"token assign-left variable\">ofType</span><span class=\"token operator\">=</span><span class=\"token string\">\"Student\"</span> <span class=\"token assign-left variable\">select</span><span class=\"token operator\">=</span><span class=\"token string\">\" getStudentByTeacherId\"</span> <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>/resu1tMap<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\" getStudentByTeacherId\"</span> <span class=\"token assign-left variable\">resultType</span><span class=\"token operator\">=</span><span class=\"token string\">\"Student\"</span><span class=\"token operator\">>|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">select</span> * from mybatis. student where tid <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;tid&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h1>\n<ul>\n<li>关联 - association [多对一]</li>\n<li>集合 - collection [- 对多]</li>\n<li>javaType &amp; ofType</li>\n</ul>\n<ol>\n<li>JavaType 用来指定实体类中属性的类型</li>\n<li>ofType 用来指定映射到 List 或者集合中的 pojo 类型，泛型中的约束类型！</li>\n</ol>\n<h1 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h1>\n<ul>\n<li>保证 SQL 的可读性，尽量保证通俗易懂</li>\n<li>注意一对多和多对一中，属性名和字段的问题！</li>\n<li>如果问题不好排查错误，可以使用日志，建议使用 Log4j</li>\n</ul>\n<h1 id=\"高频\"><a class=\"anchor\" href=\"#高频\">#</a> 高频</h1>\n<ul>\n<li>Mysql 引擎</li>\n<li>InnoDB 底层原理</li>\n<li>索引</li>\n<li>索引优化！</li>\n<li>不要写慢 sql（慢的 sql 语句）</li>\n</ul>\n",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/25/Java/SSM/Mybatis/%E6%B3%A8%E8%A7%A3/",
            "url": "https://love.youhuamao.xyz/2022/10/25/Java/SSM/Mybatis/%E6%B3%A8%E8%A7%A3/",
            "title": "注解",
            "date_published": "2022-10-24T16:00:00.000Z",
            "content_html": "<p>// <span class=\"spoiler\" title=\"你知道得太多了\">编写配置文件中的类要写全路径</span></p>\n<pre><code>&lt;mappers&gt;\n</code></pre>\n<p>&lt;!--        &lt;mapper resource=&quot;com/kuang/dao/UserMapper.xml&quot;/&gt;--&gt;<br />\n&lt;mapper class=&quot;com.kuang.dao.UserMapper&quot;/&gt;<br />\n&lt;/mappers&gt;</p>\n<h1 id=\"面向接口编程\"><a class=\"anchor\" href=\"#面向接口编程\">#</a> 面向接口编程</h1>\n<ul>\n<li>之前学过面向对象编程，也学习过接口，但在真正的开发中，很多时候会选择面向接口编程</li>\n<li>** 根本原因: <mark>解耦</mark>，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</li>\n<li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的，对系统设计人员来讲就不那么重要了；</li>\n<li>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设<br />\n计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</li>\n</ul>\n<h1 id=\"关于接口的理解\"><a class=\"anchor\" href=\"#关于接口的理解\">#</a> 关于接口的理解</h1>\n<ul>\n<li>接口从更深层次的理解，应是定义 (规范，约束) 与实现 (名实分离的原则) 的分离。</li>\n<li>接口的本身反映了系统设计人员对系统的抽象理解。</li>\n<li>接口应有两类:</li>\n<li>第一类是对一个个体的抽象，它可对应为一个抽象体 (abstract class);</li>\n<li>第二类是对一个个体某 - 方面的抽象，即形成一个抽象面 (interface) ;</li>\n<li>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</li>\n</ul>\n<h1 id=\"三个面向区别\"><a class=\"anchor\" href=\"#三个面向区别\">#</a> 三个面向区别</h1>\n<ul>\n<li>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法.</li>\n<li>面向过程是指，我们考虑问题时，以一个具体的流程 (事务过程) 为单位，考虑它的实现.</li>\n<li>接口设计与非接口设计是针对复用技术而言的，与面向对象 (过程) 不是一个问题更多的体现就是对系统整体的架构</li>\n</ul>\n<h1 id=\"使用注解开发\"><a class=\"anchor\" href=\"#使用注解开发\">#</a> 使用注解开发</h1>\n<ul>\n<li>注解在接口上实现</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public interface UserMapper <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    @Select<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> getUsers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>需要再核心配置文件中绑定接口！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>mappers<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>mapper <span class=\"token assign-left variable\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.dao.UserMapper\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/mappers<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"crud\"><a class=\"anchor\" href=\"#crud\">#</a> CRUD</h1>\n<ul>\n<li>实现自动提交事务</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public static SqlSession <span class=\"token function-name function\">getSqlSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> sqlSessionFactory.openSession<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //设置为true 自动提交事务</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>编写接口，增加注解</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Select<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user\"</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> getUsers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    // 方法存在多个参数，所有的参数前面必须加上@Param<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>注解</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    @Select<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user where id = #&#123;id&#125; \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    User getUserByID<span class=\"token punctuation\">(</span>@Param<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> int <span class=\"token function\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    @Insert<span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into user(id,name, pwd) values (#&#123;id&#125; , #&#123;name&#125; , #&#123;password&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    int addUser<span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    @Update<span class=\"token punctuation\">(</span><span class=\"token string\">\"update user set name=#&#123; name&#125; , pwd=#&#123;password&#125; where id = #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    int updateUser<span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    @Delete<span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from user where id = #&#123;uid&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            int deleteUser<span class=\"token punctuation\">(</span>@Param<span class=\"token punctuation\">(</span><span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">)</span> int <span class=\"token function\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Test</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    public void <span class=\"token function-name function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token function\">users</span> <span class=\"token operator\">=</span> mapper.getUsers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>User user <span class=\"token builtin class-name\">:</span> <span class=\"token function\">users</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    @Test</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    public void <span class=\"token function-name function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        User UserById <span class=\"token operator\">=</span> mapper.getUserByID<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        System.out.println<span class=\"token punctuation\">(</span>UserById<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    @Test</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    public void <span class=\"token function-name function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        mapper.addUser<span class=\"token punctuation\">(</span>new User<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>,<span class=\"token string\">\"hello\"</span>,<span class=\"token string\">\"123123\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    @Test</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    public void <span class=\"token function-name function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        mapper.updateUser<span class=\"token punctuation\">(</span>new User<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>,<span class=\"token string\">\"to\"</span>,<span class=\"token string\">\"213213\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    @Test</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    public void <span class=\"token function-name function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        mapper.deleteUser<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"关于param注解\"><a class=\"anchor\" href=\"#关于param注解\">#</a> 关于 @Param () 注解</h1>\n<ul>\n<li>基本类型的参数或者 String 类型，需要加上</li>\n<li>引用类型不需要加</li>\n<li>如果只有一个基本类型的话，可以忽略，但是建议都加上！</li>\n<li>我们在 SQL 中引用的就是我们这里的 @Param () 中设定的属性名！</li>\n</ul>\n",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/25/Java/SSM/Mybatis/Lombok/",
            "url": "https://love.youhuamao.xyz/2022/10/25/Java/SSM/Mybatis/Lombok/",
            "title": "Lombok",
            "date_published": "2022-10-24T16:00:00.000Z",
            "content_html": "<p>// <span class=\"spoiler\" title=\"你知道得太多了\">编写配置文件中的类要写全路径</span></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Lombok是一款Java开发插件， 使得Java开发者可以通过其定义的一些注解来消除业务工程中冗长和繁琐的代码， 尤其对于简单的Java</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>模型对象<span class=\"token punctuation\">(</span>POJO<span class=\"token punctuation\">)</span> 。在开发环境中使用Lombok插件后，Java开发人员可以节省出重复构建,诸如hashCode和equals这样的方法以及各</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>种业务对象模型的accessor和ToString等方法的大量时间。对于这些方法，它能够在编译源代码期间自动帮我们生成这些方法，并没有如</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>反射那样降低程序的性能。</pre></td></tr></table></figure><h1 id=\"使用步骤\"><a class=\"anchor\" href=\"#使用步骤\">#</a> 使用步骤</h1>\n<ul>\n<li>1 下载 Lombok 插件</li>\n<li>2 导入 jar 包（maven 导入）</li>\n<li>3</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Getter and @Setter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@FieldNameConstants</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>@ToString</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>@EqualsAndHashCode</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@Data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>@Builder</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>@SuperBuilder</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>@Singular</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>@Delegate</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>@Value</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>@Accessors</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>@Wither</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>@With</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>@SneakyThrows</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>@StandardException</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>@val</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>@var</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>experimental @var</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>@UtilityClass</pre></td></tr></table></figure><ul>\n<li>说明</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@data  //生成一些方法，构造器，setter，getter，toString，hashCode等方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>@AllArgsConstructor  //生成带有所有参数的构造器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@ToString  //生成toString方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@EqualsAndHashCode //生成EqualsAndHashCode方法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>@Getter and @Setter  //生成gettter喝setter ，加在类上生成所有成员的，加在成员上只生成该成员的</pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/23/Java/SSM/Mybatis/%E6%97%A5%E5%BF%97/",
            "url": "https://love.youhuamao.xyz/2022/10/23/Java/SSM/Mybatis/%E6%97%A5%E5%BF%97/",
            "title": "日志",
            "date_published": "2022-10-22T16:00:00.000Z",
            "content_html": "<p>// <span class=\"spoiler\" title=\"你知道得太多了\">编写配置文件中的类要写全路径</span></p>\n<h1 id=\"日志工厂\"><a class=\"anchor\" href=\"#日志工厂\">#</a> 日志工厂</h1>\n<ul>\n<li>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！<br />\n 曾经: sout. debug<br />\n 现在：日志工厂！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SLF4J</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>LOG4J <span class=\"token punctuation\">[</span>掌握<span class=\"token punctuation\">]</span><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LOG4J2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>I</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>jJDK_ _LOGGING</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>COMMONS_ _LOGGING</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>STDOUT_ LOGGING <span class=\"token punctuation\">[</span>掌握<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NO_ LOGGING</pre></td></tr></table></figure><ul>\n<li>在 Mybatis 中具体使用那个一日志实现，在设置中设定！STDOUT_ LOGGING 标准日志输出 在 mybatis 核心配置文件中，配置我们的日志！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>settings<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>setting <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"logImpl\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"STDOUT_LOGGING\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/settings<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"log4j\"><a class=\"anchor\" href=\"#log4j\">#</a> LOG4J</h1>\n<ul>\n<li>什么是 log4j</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Log4j是Apache的一-个开源项目，通过使用Log4j,我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>我们也可以控制每一条日志的输出格式<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</pre></td></tr></table></figure><ul>\n<li>导入 log4j 的包</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--log4j--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token operator\">&lt;</span>groupId<span class=\"token operator\">></span>log4j<span class=\"token operator\">&lt;</span>/groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token operator\">&lt;</span>artifactId<span class=\"token operator\">></span>log4j<span class=\"token operator\">&lt;</span>/artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span><span class=\"token number\">1.2</span>.1<span class=\"token operator\"><span class=\"token file-descriptor important\">7</span>&lt;</span>/version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>/dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>log4j.properties</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#将等级为 DEBUG 的日志信息输出到 console 和 file 这两个目的地，console 和 file 的定义在下面的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">log4j.rootLogger</span><span class=\"token operator\">=</span>DEBUG,console,file</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#控制台输出的相关设置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>log4j.appender.console <span class=\"token operator\">=</span> org.apache.log4j.ConsoleAppender</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>log4j.appender.console.Target <span class=\"token operator\">=</span> System.out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">log4j.appender.console.Threshold</span><span class=\"token operator\">=</span>DEBUG</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>log4j.appender.console.layout <span class=\"token operator\">=</span> org.apache.log4j.PatternLayout</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">log4j.appender.console.layout.ConversionPattern</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>%c<span class=\"token punctuation\">]</span>-%m%n</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#文件输出的相关设置</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>log4j.appender.file <span class=\"token operator\">=</span> org.apache.log4j.RollingFileAppender</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">log4j.appender.file.File</span><span class=\"token operator\">=</span>./log/kuang.log //文件输出位置</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">log4j.appender.file.MaxFileSize</span><span class=\"token operator\">=</span>10mb</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">log4j.appender.file.Threshold</span><span class=\"token operator\">=</span>DEBUG</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">log4j.appender.file.layout</span><span class=\"token operator\">=</span>org.apache.log4j.PatternLayout</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">log4j.appender.file.layout.ConversionPattern</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>%p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>%d<span class=\"token punctuation\">&#123;</span>yy-MM-dd<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>%c<span class=\"token punctuation\">]</span>%m%n</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#日志输出级别</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token assign-left variable\">log4j.logger.org.mybatis</span><span class=\"token operator\">=</span>DEBUG</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token assign-left variable\">log4j.logger.java.sql</span><span class=\"token operator\">=</span>DEBUG</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token assign-left variable\">log4j.logger.java.sql.Statement</span><span class=\"token operator\">=</span>DEBUG</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token assign-left variable\">log4j.logger.java.sql.ResultSet</span><span class=\"token operator\">=</span>DEBUG</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token assign-left variable\">log4j.logger.java.sql.PreparedStatement</span><span class=\"token operator\">=</span>DEBUG</pre></td></tr></table></figure><ul>\n<li>配置 log4j 日志实现</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>settings<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--        <span class=\"token operator\">&lt;</span>setting <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"logImpl\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"STDOUT_LOGGING\"</span>/<span class=\"token operator\">></span>--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>setting <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"logImpl\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"LOG4J\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/settings<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在要使用Log4j的类中，导入包import org.apache.log4j.Logger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>日志对象,参数为当前类的class</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>static Logger logger <span class=\"token operator\">=</span> Logger. getLogger<span class=\"token punctuation\">(</span>UserDaoTest.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>日志级别</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    @Test</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    public void <span class=\"token function-name function\">testLog4j</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        logger.info<span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        logger.debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        logger.error<span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/23/Java/SSM/Mybatis/%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/",
            "url": "https://love.youhuamao.xyz/2022/10/23/Java/SSM/Mybatis/%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/",
            "title": "配置解析",
            "date_published": "2022-10-22T16:00:00.000Z",
            "content_html": "<p>// <span class=\"spoiler\" title=\"你知道得太多了\">编写配置文件中的类要写全路径</span></p>\n<h1 id=\"核心配置文件\"><a class=\"anchor\" href=\"#核心配置文件\">#</a> 核心配置文件</h1>\n<ul>\n<li>mybatis-config.xml</li>\n<li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>configuration <span class=\"token punctuation\">(</span>配置<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>properties <span class=\"token punctuation\">(</span>属性<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>settings <span class=\"token punctuation\">(</span>设置<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>typeAliases <span class=\"token punctuation\">(</span>类型别名<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>typeHandlers <span class=\"token punctuation\">(</span>类型处理器<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>objectFactory <span class=\"token punctuation\">(</span>对象工厂<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>plugins <span class=\"token punctuation\">(</span>插件<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>envi ronments <span class=\"token punctuation\">(</span> 环境配置<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>envi ronment <span class=\"token punctuation\">(</span>环境变量<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>transacti onManager <span class=\"token punctuation\">(</span>事务管理器<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>datasource <span class=\"token punctuation\">(</span>数据源<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>databaseIdProvider <span class=\"token punctuation\">(</span>数据库厂商标识<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>mappers <span class=\"token punctuation\">(</span>映射器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"环境配置environments\"><a class=\"anchor\" href=\"#环境配置environments\">#</a> 环境配置（environments）</h1>\n<ul>\n<li>MyBatis 可以配置成适应多种环境</li>\n<li>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</li>\n<li>事务管理器（transactionManager）在 MyBatis 中有两种类型的事务管理器（也就是 type=&quot;[JDBC|MANAGED]&quot;）</li>\n<li>数据源（dataSource） 有三种内建的数据源类型（也就是 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>environments <span class=\"token assign-left variable\">default</span><span class=\"token operator\">=</span><span class=\"token string\">\"development\"</span><span class=\"token operator\">></span> //default<span class=\"token operator\">=</span><span class=\"token string\">\"使用的连接池\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>environment <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"development\"</span><span class=\"token operator\">></span>    //一套环境</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>transactionManager <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"JDBC\"</span>/<span class=\"token operator\">></span> //事务管理器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/transactionManager<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>dataSource <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"POOLED\"</span><span class=\"token operator\">></span>  //连接池</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;driver&#125;</span>\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"url\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;url&#125;</span>\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;username&#125;</span>\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;password&#125;</span>\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/dataSource<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token operator\">&lt;</span>/environment<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span>/environments<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h1>\n<ul>\n<li>在 xml 中，所有标签都是有顺序的，读取配置文件需要放在前边</li>\n<li>编写一个配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">driver</span><span class=\"token operator\">=</span>com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class=\"token operator\">=</span>false<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">useUnicode</span><span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>UTF-8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>g123698745</pre></td></tr></table></figure><ul>\n<li>在核心配置文件中映入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>properties <span class=\"token assign-left variable\">resource</span><span class=\"token operator\">=</span><span class=\"token string\">\"db.properties\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span>/<span class=\"token operator\">></span> //可以直接配置属性，但是外部配置文件会覆盖同名内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span> <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token string\">\"11111\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>properties<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>可以直接引入外部文件</li>\n<li>可以增加其中一些属性的配置</li>\n<li>如果两个文件有同一个字段，优先使用外部配置文件的！</li>\n</ul>\n<h1 id=\"类型别名\"><a class=\"anchor\" href=\"#类型别名\">#</a> 类型别名</h1>\n<ul>\n<li>类型别名是为 Java 类型设置一个短的名字。</li>\n<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--可以给实体类起别名--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>typeAliases<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>typeAlias <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.User\"</span> <span class=\"token assign-left variable\">alias</span><span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>/typeAliases<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean, 比如：归描实体类的包，它的默认别名就为这个类的类名，首字母小写！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--可以给实体类起别名--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>typeAliases<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>package <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>/typeAliases<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>在实体类比较少的时候，使用第一种方式。 如果实体类十分多，建议使用第二种。</li>\n<li>第一种可以 DIY 别名，第二种则。不行，如果非要改，需要在实体。上增加注解</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@A1ias <span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pub1ic class User <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"设置\"><a class=\"anchor\" href=\"#设置\">#</a> 设置</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>设置名 \t            描述 \t                                                有效值 \t        默认值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cacheEnabled \t    全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。 \t<span class=\"token boolean\">true</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span> \t<span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lazyLoadingEnabled \t延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    特定关联关系中可通过设置 fetchType 属性来覆盖该项的开</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    关状态。 \t                                            <span class=\"token boolean\">true</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span> \t<span class=\"token boolean\">false</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logImpl \t        指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 \t    SLF4J <span class=\"token operator\">|</span> LOG4J（3.5.9 起废弃） </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                                                            <span class=\"token operator\">|</span> LOG4J2 <span class=\"token operator\">|</span> JDK_LOGGING <span class=\"token operator\">|</span> COMMONS_LOGGING <span class=\"token operator\">|</span> STDOUT_LOGGING <span class=\"token operator\">|</span> NO_LOGGING \t    未设置</pre></td></tr></table></figure><h1 id=\"映射器mappers\"><a class=\"anchor\" href=\"#映射器mappers\">#</a> 映射器（mappers）</h1>\n<p>MapperRegistry: 注册绑定我们的 Mapper 文件；</p>\n<ul>\n<li>方式一</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>mappers<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>mapper <span class=\"token assign-left variable\">resource</span><span class=\"token operator\">=</span><span class=\"token string\">\"com/kuang/dao/UserMapper.xml\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/mappers<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>方式二；使用 class 文件绑定注册</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>mappers<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>mapper <span class=\"token assign-left variable\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.dao.UserMapper\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/mappers<span class=\"token operator\">></span></pre></td></tr></table></figure><ol>\n<li>接口和他的 Mapper 配置文件必须同名！</li>\n<li>接口和他的 Mapper 配置文件必须在同一个包下！</li>\n</ol>\n<ul>\n<li>方式三</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>mappers<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>mapper <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.dao.UserMapper\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/mappers<span class=\"token operator\">></span></pre></td></tr></table></figure><ol>\n<li>接口和他的 Mapper 配置文件必须同名！</li>\n<li>接口和他的 Mapper 配置文件必须在同一个包下！</li>\n</ol>\n<h1 id=\"生命周期和作用域\"><a class=\"anchor\" href=\"#生命周期和作用域\">#</a> 生命周期和作用域</h1>\n<ul>\n<li>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</li>\n</ul>\n<p>![img]/pic/java/shengmingzhouqi.png</p>\n<ul>\n<li>SqISessionFactoryBuilder:</li>\n</ul>\n<ol>\n<li>一旦创建了 SqlSessionFactory, 就不再需要它了</li>\n<li>局部变量</li>\n</ol>\n<ul>\n<li>SqlSessionFactory:</li>\n</ul>\n<ol>\n<li>说白了就是可以想象为：数据库连接池</li>\n<li>SqlSessionFactory - - 旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</li>\n<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。</li>\n<li>最简单的就是使用单例模式或者静态单例模式。</li>\n</ol>\n<ul>\n<li>SqISession</li>\n</ul>\n<ol>\n<li>连接到连接池的一个请求！</li>\n<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>\n<li>用完之后需要赶紧关闭，否则资源被占用！</li>\n</ol>\n<p>![img]/pic/java/map.png</p>\n<h1 id=\"解决属性名和字段名不一致的问题\"><a class=\"anchor\" href=\"#解决属性名和字段名不一致的问题\">#</a> 解决属性名和字段名不一致的问题</h1>\n<ul>\n<li>问题</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>public class User <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    private int <span class=\"token function\">id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    private String name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    private String password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> * from mybatis.user where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//类型处理器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">select</span> id,name,pwd from mybatis.user where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;</span></pre></td></tr></table></figure><ul>\n<li>解决办法</li>\n</ul>\n<ol>\n<li>起别名</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>select i <span class=\"token assign-left variable\">d</span><span class=\"token operator\">=</span><span class=\"token string\">\"getuserById\"</span> <span class=\"token assign-left variable\">resultType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com. kuang. pojo.User\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> id,name,pwd as password from mybatis.user where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>/se1ect<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改映射</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 结果集映射</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>resultMap <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"UserMap\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.User\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span> <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span> <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>result <span class=\"token assign-left variable\">column</span><span class=\"token operator\">=</span><span class=\"token string\">\"pwd\"</span> <span class=\"token assign-left variable\">property</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/resultMap<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getUserById\"</span> <span class=\"token assign-left variable\">resultMap</span><span class=\"token operator\">=</span><span class=\"token string\">\"UserMap\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">select</span> * from mybatis.user where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>resu1tMap 元素是 MyBatis 中最重要最强大的元素</li>\n<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句<br />\n只需要描述它们的关系就行了。</li>\n</ul>\n",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/23/Java/SSM/Mybatis/%E5%88%86%E9%A1%B5/",
            "url": "https://love.youhuamao.xyz/2022/10/23/Java/SSM/Mybatis/%E5%88%86%E9%A1%B5/",
            "title": "日志",
            "date_published": "2022-10-22T16:00:00.000Z",
            "content_html": "<p>// <span class=\"spoiler\" title=\"你知道得太多了\">编写配置文件中的类要写全路径</span></p>\n<h1 id=\"为什么要分页\"><a class=\"anchor\" href=\"#为什么要分页\">#</a> 为什么要分页</h1>\n<ul>\n<li>减少数据的处理量</li>\n</ul>\n<h1 id=\"使用limit分页\"><a class=\"anchor\" href=\"#使用limit分页\">#</a> 使用 Limit 分页</h1>\n<ul>\n<li>语法: SELECT * from user limit startIndex, pagesize;</li>\n<li>SELECT * from user limit 3; #[0,n]</li>\n</ul>\n<h1 id=\"使用mybatis实现分页核心sql\"><a class=\"anchor\" href=\"#使用mybatis实现分页核心sql\">#</a> 使用 Mybatis 实现分页，核心 SQL</h1>\n<ul>\n<li>接口</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//分页</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> getuserByLimi t<span class=\"token punctuation\">(</span>Map<span class=\"token operator\">&lt;</span>String, Integer<span class=\"token operator\">></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Mapper.xml</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--//分页--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getuserByLimit\"</span> <span class=\"token assign-left variable\">parameterType</span><span class=\"token operator\">=</span><span class=\"token string\">\"map\"</span> resu <span class=\"token assign-left variable\">7tMap</span><span class=\"token operator\">=</span><span class=\"token string\">\"UserMap\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">select</span> * from mybatis.user limit <span class=\"token comment\">#&#123;startIndex&#125; , #&#123;pagesize&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Test</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    public void <span class=\"token function-name function\">getUserByLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        HashMap<span class=\"token operator\">&lt;</span>String, Integer<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> new HashMap<span class=\"token operator\">&lt;</span>String, Integer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"startIndex\"</span>,0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"pageSize\"</span>,2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> userList <span class=\"token operator\">=</span> mapper.getUserByLimit<span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        for<span class=\"token punctuation\">(</span>User user <span class=\"token builtin class-name\">:</span> userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"rowbounds分页\"><a class=\"anchor\" href=\"#rowbounds分页\">#</a> RowBounds 分页</h1>\n<ul>\n<li>接口</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//分页2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> getuse rByRowBounds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">|</span></pre></td></tr></table></figure><ul>\n<li>mapper.xml</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--分页2--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getUserByRowBounds\"</span> <span class=\"token assign-left variable\">resultMap</span><span class=\"token operator\">=</span><span class=\"token string\">\"UserMap \"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">select</span> * from mybatis. user</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Test</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    pub1ic void <span class=\"token function-name function\">getuserByRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Sq1Session sq1Session <span class=\"token operator\">=</span> Mybatisutils. getsq1session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        //RowBounds实现</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        RowBounds rowBounds <span class=\"token operator\">=</span> new RowBounds<span class=\"token punctuation\">(</span><span class=\"token number\">1,2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        //通过Java代码层面实现分页</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> userlist <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        sq1Session. selectList<span class=\"token punctuation\">(</span><span class=\"token string\">\"com. kuang. dao.UserMapper . getuserByRowBounds\"</span>，nu11 , rowBounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>User user <span class=\"token builtin class-name\">:</span> userList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        System. out. print1n<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        sqlSession.c1ose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"分页插件-mybatis分页插件-pagehelper\"><a class=\"anchor\" href=\"#分页插件-mybatis分页插件-pagehelper\">#</a> 分页插件 MyBatis 分页插件 PageHelper</h1>\n",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/22/Java/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://love.youhuamao.xyz/2022/10/22/Java/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "异常处理",
            "date_published": "2022-10-21T16:00:00.000Z",
            "content_html": "<h1 id=\"异常介绍\"><a class=\"anchor\" href=\"#异常介绍\">#</a> 异常介绍</h1>\n<p>Java 语言中，将程序执行中发生的不正常情况称为 “异常”。(开发过程中的语法错误和逻辑错误不是异常)</p>\n<ul>\n<li>执行过程中所发生的异常事件可分为两大类</li>\n</ul>\n<ol>\n<li>Error (错误): Java 虚拟机无法解决的严重问题。如: JVM 系统内部错误、资源耗尽等严重情况。比如: StackOverflowError [栈溢出] 和 OOM (out ofmemory), Error 是严重错误，程序会崩溃。</li>\n<li>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如空指针访问，试图读取不存在的文件，网络连接中断等等，Exception 分为两大类：运行时异常 [程序运行时，发生的异常] 和编译时异常 [编程时，编译器检查出的异常]。</li>\n</ol>\n<ul>\n<li>异常分为两大类，运行时异常和编译时异常。运行时异常，编译器不要求强制处置的异常。</li>\n<li>一般是指编程时的逻辑错误，是程序员应该避免其出现的异常。java.lang.RuntimeException 类及它的子类都是运行时异常</li>\n<li>对于运行时异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li>\n<li>编译时异常，是编译器要求必须处置的异常。</li>\n</ul>\n<h1 id=\"常见运行时异常\"><a class=\"anchor\" href=\"#常见运行时异常\">#</a> 常见运行时异常</h1>\n<ul>\n<li>NullPointerException 空指针异常 NullPointerException.java 当应用程序试图在需要对象的地方使用 null 时，抛出该异常</li>\n<li>ArithmeticException 数学运算异常 当出现异常的运算条件时，抛出此异常。例如，一个整数 “除以零” 时，抛出此类的一一个实例</li>\n<li>ArrayIndexOutOfBoundsException 数组下标越界异常用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</li>\n<li>ClassCastException 类型转换异常当试图将对象强制转换为不是实例的子类时，抛出该异常。例如，以下代码将生成一个 ClassCastException</li>\n<li>NumberFormatException 数字格式不正确异常当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常 =&gt; 使用异常我们可以确保输入是满足条件数字.</li>\n</ul>\n<h1 id=\"常见的编译异常\"><a class=\"anchor\" href=\"#常见的编译异常\">#</a> 常见的编译异常</h1>\n<p>编译异常是指在编译期间，就必须处理的异常，否则代码不能通过编译。</p>\n<ul>\n<li>SQLException // 操作数据库时，查询表可能发生异常</li>\n<li>IOException // 操作文件时，发生的异常</li>\n<li>FileNotFoundException // 当操作一个不存在的文件时， 发生异常</li>\n<li>ClassNotFoundException // 加载类，而该类不存在时，异常</li>\n<li>EOFException / 操作文件，到文件末尾，发生异常</li>\n<li>IllegalArguementException // 参数异常</li>\n</ul>\n<h1 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<p>异常处理就是当异常发生时，对异常处理的方式。</p>\n<ul>\n<li>try-catch-finally 程序员在代码中捕获发生的异常，自行处理</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码/可能有异常</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>catch<span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    //捕获到异常</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    //1当异常发生时</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    //2.系统将异常封装成Exception对象e,传递给catch</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    //3得到异常对象后，程序 员，自己处理</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    //4.注意,如果没有发生异常catch代码块不执行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>finally<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        //1.不管try代码块是否有异常 发生，始终要执行finally</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        //2.所以，通常将释放资源的代码，放在finally</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>throws 将发生的异常抛出，交给调用者 (方法) 来处理，最顶级的处理者就是 JVM</li>\n<li>如果程序员，没有显示是处理异常，默认 throws</li>\n</ul>\n<h1 id=\"try-catch\"><a class=\"anchor\" href=\"#try-catch\">#</a> try-catch</h1>\n<ul>\n<li>Java 提供 try 和 catch 块来处理异常。try 块用于包含可能出错的代码。catch 块用于处理 try 块中发生的异常。可以根据需要在程序中有多个 try..catch 块。</li>\n<li>如果异常发生了，则异常发生后面的代码不会执行，直接进入到 catch 块.</li>\n<li>如果异常没有发生，则顺序执行 try 的代码块，不会进入到 catch.</li>\n<li>如果希望不管是否发生异常，都执行某段代码 (比如关闭连接，释放资源等) 则使用如下代码 - finally</li>\n<li>可以有多个 catch 语句，捕获不同的异常 (进行不同的业务处理)，要求父类异常在后，子类异常在前，比如 (Exception 在后，NullPointerException 在前)，如果发生异常，只会匹配一 - 个 catch</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Person person <span class=\"token operator\">=</span> new Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    person <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    System.out.printLn<span class=\"token punctuation\">(</span>person.getName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> //NuLLPointerException</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    int n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    int n2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    int res <span class=\"token operator\">=</span> n1 / n2<span class=\"token punctuation\">;</span> //ArithmeticException</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>NullPointerException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    System.out.printLn<span class=\"token punctuation\">(</span><span class=\"token string\">\"空指针异常=\"</span> + e.getMessage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>ArithmeticException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"算术异常=\"</span> + e.getMessage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    System.out.printLn<span class=\"token punctuation\">(</span>e.getMessage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>可以进行 try-finally 配合使用，这种用法相当于没有捕获异常，因此程序会直接崩掉。应用场景，就是执行一段代码，不管是否发生异常，都必须执行某个业务逻辑</li>\n</ul>\n<h1 id=\"throw异常处理\"><a class=\"anchor\" href=\"#throw异常处理\">#</a> throw 异常处理</h1>\n<ul>\n<li>如果一个方法 (中的语句执行时) 可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。（例如 f2 方法被 f1 调用，f1 就是 f2 的调用者）</li>\n<li>在方法声明中用 throws 语句可以声明抛出异常的列表，throws 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</li>\n<li>对于编译异常，程序中必须处理，比如 try-atch 或者 throws</li>\n<li>对于运行时异常，程序中如果没有处理，默认就是 throws 的方式处理</li>\n<li>子类重写父类的方法时，对抛出异常的规定：于类重写的方法，所抛出的异常类型要么和父类抛出的异常一致， 要么为父类抛出的异常的类型的子类型</li>\n<li>在 throws 过程中，如果有方法 try-catch , 就相当于处理异常，就可以不必 throws</li>\n</ul>\n<h1 id=\"自定义异常\"><a class=\"anchor\" href=\"#自定义异常\">#</a> 自定义异常</h1>\n<ul>\n<li>定义类：自定义异常类名 (程序员自己写) 继承 Exception 或 RuntimeException</li>\n<li>如果继承 Exception, 属于编译异常</li>\n<li>如果继承 RuntimeException, 属于运行异常 (一般来说，继承 RuntimeException)</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int age <span class=\"token operator\">=</span><span class=\"token number\">180</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//要求范围在18 - <span class=\"token number\">120</span>之间，否则抛出一个自定义异常</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>if<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span> <span class=\"token operator\">&amp;&amp;</span> age <span class=\"token operator\">&lt;=</span><span class=\"token number\">120</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//这里我们可以通过构造器,设置信息</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>throw new AgeException<span class=\"token punctuation\">(</span><span class=\"token string\">\"年龄需要在18~120之 间\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"你的年龄范围正确.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//自定义一一个异常</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cLass AgeException extends RuntimeException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    pubLic AgeException<span class=\"token punctuation\">(</span>String message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>//构造器</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        super<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"throw和throws的区别\"><a class=\"anchor\" href=\"#throw和throws的区别\">#</a> throw 和 throws 的区别</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>意义                        位置            后面跟的东西</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>throws  异常处理的一种方式          方法声明处      异常类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>throw   手动生成异常对象的关键字    方法体中        异常对象 <span class=\"token punctuation\">(</span>new 异常类型<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/22/Java/SSM/Mybatis/Map%E5%92%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/",
            "url": "https://love.youhuamao.xyz/2022/10/22/Java/SSM/Mybatis/Map%E5%92%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/",
            "title": "Map和模糊查询",
            "date_published": "2022-10-21T16:00:00.000Z",
            "content_html": "<p>// <span class=\"spoiler\" title=\"你知道得太多了\">编写配置文件中的类要写全路径</span></p>\n<h1 id=\"万能的map\"><a class=\"anchor\" href=\"#万能的map\">#</a> 万能的 Map</h1>\n<ul>\n<li>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用 Map!</li>\n<li>使用 map 在写 sql 语句的时候，占位符内的名称可以与前边的不一致，类型一致即可</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int addUser2<span class=\"token punctuation\">(</span>Map<span class=\"token operator\">&lt;</span>String, Object<span class=\"token operator\">></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>insert <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"addUser2\"</span> <span class=\"token assign-left variable\">parameterType</span><span class=\"token operator\">=</span><span class=\"token string\">\"map\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        insert into mybatis.user <span class=\"token punctuation\">(</span>id,pwd<span class=\"token punctuation\">)</span> values<span class=\"token punctuation\">(</span><span class=\"token comment\">#&#123;userid&#125;,#&#123;passWord&#125;); // 可以与前边的不一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/insert<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Test</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    public void <span class=\"token function-name function\">addUser2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        HashMap<span class=\"token operator\">&lt;</span>String, Object<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> new HashMap<span class=\"token operator\">&lt;</span>String,Object<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"userid\"</span>,5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   //提供参数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"userName\"</span>,<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        map.put<span class=\"token punctuation\">(</span><span class=\"token string\">\"passWord\"</span>,<span class=\"token string\">\"2222333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        mapper.addUser2<span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Map 传递参数，直接在 sq | 中取出 key 即可！[parameterType=&quot;map&quot;]<br />\n 对象传递参数，直接在 sq | 中取对象的属性即可！[parameterType=&quot;Object&quot;]<br />\n 只有一个基本类型参数的情况下，可以直接在 sq | 中取到！<br />\n 多个参数用 Map, 或者注解！</li>\n</ul>\n<h1 id=\"模糊查询\"><a class=\"anchor\" href=\"#模糊查询\">#</a> 模糊查询</h1>\n<ul>\n<li>Java 代码执行的时候，传递通配符 % %</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Test</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    public void <span class=\"token function-name function\">getUserLike</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> userList <span class=\"token operator\">=</span> mapper.getUserLike<span class=\"token punctuation\">(</span><span class=\"token string\">\"%李%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        for<span class=\"token punctuation\">(</span>User user <span class=\"token builtin class-name\">:</span> userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在 sq | 拼接中使用通配符！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getUserLike\"</span> <span class=\"token assign-left variable\">resultType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.User\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">select</span> * from mybatis.user where name like <span class=\"token string\">\"%\"</span>#<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">&#125;</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/22/Java/SSM/Mybatis/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/",
            "url": "https://love.youhuamao.xyz/2022/10/22/Java/SSM/Mybatis/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/",
            "title": "初识别Mybatis",
            "date_published": "2022-10-21T16:00:00.000Z",
            "content_html": "<p>// <span class=\"spoiler\" title=\"你知道得太多了\">编写配置文件中的类要写全路径</span></p>\n<h1 id=\"crud\"><a class=\"anchor\" href=\"#crud\">#</a> CRUD</h1>\n<ul>\n<li>namespace<br />\nnamespace 中的包名要和 Dao/mapper 接口的包名一致！</li>\n<li>select<br />\n 选择查询语句</li>\n</ul>\n<ol>\n<li>id : 就是对应的 namespace 中的方法名；</li>\n<li>resultType: Sq | 语句执行的返回值！</li>\n<li>parameterType : 参数类型！</li>\n</ol>\n<ul>\n<li>select</li>\n</ul>\n<ol>\n<li>编写接口</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//inster一个用户</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    int getUserById<span class=\"token punctuation\">(</span>User user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>编写对应的 mapper 中的 sq | 语句</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>select <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"getUserById\"</span> <span class=\"token assign-left variable\">parameterType</span><span class=\"token operator\">=</span><span class=\"token string\">\"int\"</span> <span class=\"token assign-left variable\">resultType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.User\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">select</span> * from mybatis.user where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;  // 前后需要一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/select<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@Test</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    public void <span class=\"token function-name function\">getUserById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        SqlSession sqlSession <span class=\"token operator\">=</span> MybatisUtils.getSqlSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        UserMapper mapper <span class=\"token operator\">=</span> sqlSession.getMapper<span class=\"token punctuation\">(</span>UserMapper.class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        User user <span class=\"token operator\">=</span> mapper.getUserById<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        System.out.println<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        sqlSession.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>insert</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>insert <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"addUser\"</span> <span class=\"token assign-left variable\">parameterType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.User\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        insert into mybatis.user <span class=\"token punctuation\">(</span>id,name,pwd<span class=\"token punctuation\">)</span> values<span class=\"token punctuation\">(</span><span class=\"token comment\">#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/insert<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>update</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>update <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"updateUser\"</span> <span class=\"token assign-left variable\">parameterType</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.kuang.pojo.User\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        update mybatis.user <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token comment\">#&#123;name&#125;,pwd=#&#123;pwd&#125; = where id = #&#123;id&#125;;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/update<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>delete</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>delete <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span><span class=\"token string\">\"deleteUser\"</span> <span class=\"token assign-left variable\">parameterType</span><span class=\"token operator\">=</span><span class=\"token string\">\"int\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        delete from mybatis.user where <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;id&#125;;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/delete<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>增删改需要提交事务</li>\n</ul>\n",
            "tags": [
                "学习Java",
                "SSM",
                "Mybatis",
                "java"
            ]
        }
    ]
}