{
    "version": "https://jsonfeed.org/version/1",
    "title": "幽化猫の博客",
    "subtitle": "生活朗朗，万物可爱",
    "icon": "https://love.youhuamao.xyz/images/favicon.ico",
    "description": "这是一个人的博客",
    "home_page_url": "https://love.youhuamao.xyz",
    "items": [
        {
            "id": "https://love.youhuamao.xyz/2022/09/22/tutorial/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "url": "https://love.youhuamao.xyz/2022/09/22/tutorial/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "title": "Hexo + Shoka 主题 + vercel 搭建的属于自己的博客站点",
            "date_published": "2022-09-21T16:00:00.000Z",
            "content_html": "<p>Hexo + Shoka 主题 + vercel 搭建的属于自己的博客站点<br />\n全程记得要管理员权限</p>\n<h1 id=\"安装nodejsgithexo\"><a class=\"anchor\" href=\"#安装nodejsgithexo\">#</a> 安装 node.js，Git，Hexo</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">Node.js 官网</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">Git 官网</span></li>\n<li>检验是否安装成功</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token parameter variable\">--version</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><ul>\n<li>安装 Hexo<br />\n 选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：F\\QiQi_Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装，第一次可能需要久一点输入命令后等一等，再输入第二条命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><ul>\n<li>Hexo 初始化<br />\n第一个命令，如图所示则安装成功如果失败了就再输入一次，第二个命令表示安装 hexo 部署到 git page 的 deployer</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><p>[HN~{$BSD}0SL9`26B0(M<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uZWxlbWVjZG4uY29tL2FuemhpeXUtYmxvZ0AxLjEuNi9pbWcvcG9zdC9ibG9nLWNvbnN0cnVjdC85LnBuZw==\">(6.png</span></p>\n<ul>\n<li>本地查看效果</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo generate</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo server</pre></td></tr></table></figure><p>执行完即可登录 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000/</span> 查看效果</p>\n<h1 id=\"将博客部署到github-pages上懒蛋正在写了\"><a class=\"anchor\" href=\"#将博客部署到github-pages上懒蛋正在写了\">#</a> 将博客部署到 Github Pages 上（懒蛋正在写了）</h1>\n<ul>\n<li>我懒，先不写</li>\n<li>首先在 github 上创建你的同名仓库，笔者叫 youhuamao，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS15b3VodWFtYW8tNHM0b3MxMGdwbmgweGt5cG8ydjNkLmdpdGh1Yi5pbw==\">我创建的就是 youhuamao.github.io</span></li>\n<li>配置 SSH 密钥：只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：F\\QiQi_Blog） Git Bash Here 输入以下命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"your email@example.com\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//引号里面填写你的邮箱地址，比如我的是2315329173@qq.com</pre></td></tr></table></figure><p>之后会出现</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Generating public/private rsa key pair.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Enter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/c/Users/you/.ssh/id_rsa<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//到这里可以直接回车将密钥按默认文件进行存储</pre></td></tr></table></figure><p>再之后</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//这里是要你输入密码，其实不需要输什么密码，直接回车就行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Enter same passphrase again:</pre></td></tr></table></figure><p>接下来</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Your identification has been saved <span class=\"token keyword\">in</span> /c/Users/you/.ssh/id_rsa.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Your public key has been saved <span class=\"token keyword\">in</span> /c/Users/you/.ssh/id_rsa.pub.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>The key fingerprint is</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这里是各种字母数字组成的字符串，结尾是你的邮箱</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>The key's randomart image is</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#这里也是各种字母数字符号组成的字符串</span></pre></td></tr></table></figure><p>之后复制公钥</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#该公钥一般存在 C 盘 user 中，此命令失败的话可以直接找到该文件并且用记事本打开复制</span></pre></td></tr></table></figure><ul>\n<li>在 GitHub 账户中添加你的公钥</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>登录你得github，进入Settings</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>点击SSH and GPG Keys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>选择New SSH key</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>将公钥复制再K中 点击Add SSH key</pre></td></tr></table></figure><ul>\n<li>测试<br />\n直接在桌面右键 点击 Git Bash Here，输入以下命令输入以下命令：注意：git@github.com 不要做任何更改！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 之后输入 yes</span></pre></td></tr></table></figure><ul>\n<li>配置 Git 个人信息<br />\n Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"此处填你的用户名\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"此处填你的邮箱\"</span></pre></td></tr></table></figure><ul>\n<li>登录 Github 打开自己的项目 <span class=\"exturl\" data-url=\"aHR0cDovL3lvdXJuYW1lLmdpdGh1Yi5pbw==\">yourname.github.io</span></li>\n<li>鼠标移到 Code 按钮，点击按钮复制，或者直接把 SSH 全部复制</li>\n<li>打开你创建的 Hexo 文件夹（如：F:\\QiQi_Blog\\Hexo），右键用记事本（或者 Notepad++、Vs Code 等）打开该文件夹下的 _config.yml 文件</li>\n<li>滑到最下面，修改 _config.yml 文件并保存</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deploy:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  type: <span class=\"token function\">git</span> <span class=\"token comment\">#注意空格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  repository: git@github.com:youhuamao/youhuamao.github.io.git <span class=\"token comment\">#刚刚复制的内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  branch: main <span class=\"token comment\">#填分支，有的人是 master，有的是 main</span></pre></td></tr></table></figure><ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#执行过后会让你输入 github 账号密码</span></pre></td></tr></table></figure><ul>\n<li>如果此时报以下错误，说明你的 deployer 没有安装成功</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ERROR Deployer not found: <span class=\"token function\">git</span></pre></td></tr></table></figure><ul>\n<li>需要执行以下命令再安装一次</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><ul>\n<li>再执行</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo d</pre></td></tr></table></figure><h1 id=\"安装hexo主题\"><a class=\"anchor\" href=\"#安装hexo主题\">#</a> 安装 Hexo 主题</h1>\n<ul>\n<li>快速安装</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cd your-blog</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p>打开主题目录，内有 example 文件夹，提供了配置文件的 demo 供参考。!! 我写的时候跟个傻蛋似的不知道看！！</p>\n<ul>\n<li>安装依赖插件<br />\n安装前，记得务必卸载掉默认的 hexo-renderer-marked ，以及别的 markdown 文件渲染器。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 卸载依赖插件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> un hexo-renderer-marked <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">yarn</span> remove hexo-renderer-marked</pre></td></tr></table></figure><p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-renderer-multi-markdown-it</pre></td></tr></table></figure><p>用同上方法安装 hexo-autoprefixer</p>\n<h1 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h1>\n<ul>\n<li>加入 markdown 配置，用来渲染 md 文件</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>markdown:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  render: <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    html: <span class=\"token boolean\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    xhtmlOut: <span class=\"token boolean\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    breaks: <span class=\"token boolean\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    linkify: <span class=\"token boolean\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    typographer: </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    quotes: <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  plugins: <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        name: markdown-it-toc-and-anchor</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        options: <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          tocClassName: <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          anchorClassName: <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        name: markdown-it-multimd-table</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        options:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          multiline: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          rowspan: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          headerless: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        name: ./markdown-it-furigana</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        options:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          fallbackParens: <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        name: ./markdown-it-spoiler</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        options:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          title: <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr></table></figure><ul>\n<li>加入 minify 配置，压缩 css/js/html</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>minify:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  html:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    exclude: <span class=\"token comment\"># 排除 hexo-feed 用到的模板文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      - <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      - <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      - <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  css:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    exclude:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      - <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  js:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    mangle:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      toplevel: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    output:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    compress:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    exclude:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      - <span class=\"token string\">'**/*.min.js'</span></pre></td></tr></table></figure><ul>\n<li>autoprefixer 配置建议</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>autoprefixer:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  exclude:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    - <span class=\"token string\">'*.min.css'</span></pre></td></tr></table></figure><ul>\n<li>algolia 配置建议</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>algolia:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  appId: <span class=\"token comment\">#Your appId</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  apiKey: <span class=\"token comment\">#Your apiKey</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  adminApiKey: <span class=\"token comment\">#Your adminApiKey</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  chunkSize: <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  indexName: <span class=\"token comment\">#\"shoka\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  fields:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    - title <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    - path <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    - categories <span class=\"token comment\">#推荐配置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    - content:strip:truncate,0,2000</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    - gallery</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    - photos</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - tags</pre></td></tr></table></figure><ul>\n<li>feed 配置建议</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keywords: <span class=\"token comment\">#站点关键词，用 “,” 分隔</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>feed:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    limit: <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    order_by: <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    tag_dir: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    category_dir: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    rss:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        template: <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        output: <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    atom:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        template: <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        output: <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    jsonFeed:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        template: <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        output: <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure><h1 id=\"应用主题\"><a class=\"anchor\" href=\"#应用主题\">#</a> 应用主题</h1>\n<ul>\n<li>修改站点配置文件 &lt;root&gt;/_config.yml ，把主题改为 shoka</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>theme: shoka</pre></td></tr></table></figure><ul>\n<li>修改主题配置<br />\n主题配置的所有参数在 &lt;root&gt;/themes/shoka/_config.yml 文件中。<br />\n为了方便主题升级，请在根目录新建一个 yml 文件，命名为 _config.shoka.yml<br />\n 也就是说，所有主题的自定义配置均保存于 &lt;root&gt;/_config.shoka.yml 文件。</li>\n</ul>\n<h1 id=\"弄到现在你的博客基本可以用了确实可以用\"><a class=\"anchor\" href=\"#弄到现在你的博客基本可以用了确实可以用\">#</a> 弄到现在你的博客基本可以用了（确实可以用）</h1>\n",
            "tags": [
                "教程",
                "搭建博客"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/21/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/",
            "url": "https://love.youhuamao.xyz/2022/09/21/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/",
            "title": "类与对象",
            "date_published": "2022-09-20T16:00:00.000Z",
            "content_html": "<p>类是抽象的，概念的，代表一类事物比如人类，猫类... 即它是数据类型.<br />\n 对象是具体的，实际的，代表一个具体事物， 即是实例<br />\n类是对象的模板，对象是类的一个个体，对应一个实例</p>\n<h1 id=\"对象存在内部布局\"><a class=\"anchor\" href=\"#对象存在内部布局\">#</a> 对象存在内部布局</h1>\n<ul>\n<li>与数组差不多，对象在栈中有地址，指向堆中，其中数字存放在堆中，而若是字符串则在堆中存放的是地址，该地址指向方法区的字符串</li>\n<li>真正的对象在堆中，而在栈中的叫对象引用（对象名）</li>\n<li>在方法区还会加载类的信息。1. 属性信息 2. 行为（方法信息）</li>\n</ul>\n<h1 id=\"属性概念\"><a class=\"anchor\" href=\"#属性概念\">#</a> 属性概念</h1>\n<ul>\n<li>从概念或叫法上看：成员变量 = 属性 = feld（字段） (成员变量是用来表示属性)</li>\n<li>属性是类的一个组成部分，一般是基本数据类型，也可是引用类型 (对象，数组)。比如我们前面定义猫类的 int age 就是属性</li>\n<li>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名；</li>\n<li>属性的定义类型可以为任意类型，包含基本类型或引用类型</li>\n<li>属性如果不赋值，有默认值，规则和数组一致。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//p1 是对象名 (对象引用)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//new Person () 创建的对象空间 (数据) 才是真正的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 四个属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">double</span> sal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isPass <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"创建对象\"><a class=\"anchor\" href=\"#创建对象\">#</a> 创建对象</h1>\n<ul>\n<li>先声明再创建 Cat cat ; cat = new Cat ();</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Cat</span> cat <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明对象 cat</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 声明对象后，会在栈中创建 cat，但是是空值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 创建对象后，会在栈中开辟空间，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 访问对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>cat<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>直接创建 Cat cat = new Cat ();</li>\n</ul>\n<h1 id=\"对象分配机制\"><a class=\"anchor\" href=\"#对象分配机制\">#</a> 对象分配机制</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们定义一个人类<span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>包括名字<span class=\"token punctuation\">,</span>年龄<span class=\"token punctuation\">)</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p1<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1 赋给了 p2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr></table></figure><h1 id=\"类和对象的内存分配机制\"><a class=\"anchor\" href=\"#类和对象的内存分配机制\">#</a> 类和对象的内存分配机制</h1>\n<ul>\n<li>Java 内存的结构分析<br />\n栈：一般存放基本数据类型 (局部变量)<br />\n 堆：存放对象 (Cat cat , 数组等)<br />\n 方法区：常量池 (常量，比如字符串)，类加载信息<br />\n示意图 [Cat (name, age, price)]</li>\n<li>Java 创建对象的流程简单分析<br />\n Person p = new Person ();<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3AubmFtZQ==\">p.name</span> = &quot;jack&quot; ;<br />\np.age = 10<br />\n 先加载 Person 类信息 (属性和方法信息，只会加载次)<br />\n 在堆中分配空间，进行默认初始化 (看规则)，把地址赋给 p，p 就指向对象<br />\n把地址赋给 p , p 就指向对象<br />\n进行指定初始化</li>\n</ul>\n<h1 id=\"方法调用机制\"><a class=\"anchor\" href=\"#方法调用机制\">#</a> 方法调用机制</h1>\n<ul>\n<li>调用方法后，会在栈中开辟空间，运行方法</li>\n<li>1. 当程序执行到方法时，就会开辟一个独立的空间 (栈空间)<br />\n 2. 当方法执行完毕，或者执行到 return 语句就会返回，<br />\n3. 返回到调用方法的地方<br />\n 4. 返回后，继续执行方法后面的代码<br />\n 5. 当 main 方法 (栈) 执行完毕，整个程序退出</li>\n</ul>\n<h1 id=\"成员方法的定义\"><a class=\"anchor\" href=\"#成员方法的定义\">#</a> 成员方法的定义</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span>返回数据类型方法名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>返回值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1.</span>参数列表<span class=\"token operator\">:</span>表示成员方法输入<span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2.</span>数据类型<span class=\"token punctuation\">(</span>返回类型<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>表示成员方法输出，<span class=\"token keyword\">void</span>表示没有返回值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3.</span>方法主体<span class=\"token operator\">:</span>表示为了实现某<span class=\"token operator\">-</span>功能代码块</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4.</span><span class=\"token keyword\">return</span> 语句不是必须的。</pre></td></tr></table></figure><h1 id=\"方法使用细节\"><a class=\"anchor\" href=\"#方法使用细节\">#</a> 方法使用细节</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span>一个方法最多有一个返回值<span class=\"token punctuation\">[</span>思考，如何返回多个结果返回数组<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>返回类型可以为任意类型，包含基本类型或引用类型<span class=\"token punctuation\">(</span>数组，对象<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">return</span>值<span class=\"token punctuation\">;</span>而且要求返回值类型必须和<span class=\"token keyword\">return</span>的值类型一致或兼容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4.</span>如果方法是<span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>则方法体中可以没有<span class=\"token keyword\">return</span>语句，或者只写<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 方法名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>遵循驼峰命名法，最好见名知义，表达出该功能的意思即可，比如得到两个数的和</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>getSum<span class=\"token punctuation\">,</span>开发中按照规范</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 形参列表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1.</span>一个方法可以有<span class=\"token number\">0</span>个参数，也可以有多个参数，中间用逗号隔开，比如<span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2.</span>参数类型可以为任意类型，包含基本类型或引用类型，比如<span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3.</span>调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数<span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>getSum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">4.</span>方法定义时的参数称为形式参数，简称形参<span class=\"token punctuation\">;</span>方法调用时的参数称为实际参数，简称实参，实</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>参和形参的类型要一致或兼容、个数、顺序必须一致<span class=\"token operator\">!</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但里</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>面不能再定义方法<span class=\"token operator\">!</span>即<span class=\"token operator\">:</span>方法不能嵌套定义。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 方法细节调用说明</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">1.</span>同一个类中的方法调用<span class=\"token operator\">:</span>直接调用即可。比如<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>案例演示<span class=\"token operator\">:</span> <span class=\"token class-name\">A</span>类sayOk调用<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 同一个类中的方法调用：直接调用即可</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pnint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"print()方法被调用n=\"</span><span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//say0k 调用 print</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">2.</span>跨类中的方法<span class=\"token class-name\">A</span>类调用<span class=\"token class-name\">B</span>类方法<span class=\"token operator\">:</span>需要通过对象名调用。比如对象名<span class=\"token punctuation\">.</span>方法名<span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>案例演示<span class=\"token operator\">:</span> <span class=\"token class-name\">B</span>类sayHello调用<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Sys</span> tem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B类中的hi()被执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 同一个类中的方法调用：直接调用即可</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pnint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"print()方法被调用n=\"</span><span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//say0k 调用 print</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 创建 B 对象，然后在调用方法即可</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m1()方法被调用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Bb</span><span class=\"token operator\">=</span><span class=\"token function\">newB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        b<span class=\"token punctuation\">.</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m1()继续执行:)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 编写一个 main 方法</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    a<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token number\">3.</span>特别说明一下<span class=\"token operator\">:</span>跨类的方法调用和方法的访问修饰符相关，先暂时这么提一下，</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>后面我们讲到访问修饰符时，还要再细说。</pre></td></tr></table></figure><h1 id=\"成员方法传参机制\"><a class=\"anchor\" href=\"#成员方法传参机制\">#</a> 成员方法传参机制</h1>\n<ul>\n<li>基本数据类型，传递的是值 (值拷贝) , 形参的任何改变不影响实参</li>\n<li>引用类型传递的是地址 (传递也是值，但是值是地址) , 可以通过形参影响实参！</li>\n</ul>\n<h1 id=\"方法重载\"><a class=\"anchor\" href=\"#方法重载\">#</a> 方法重载</h1>\n<ul>\n<li>java 中允许同一个类中，多个同名方法的存在，但要求形参列表不一致！</li>\n<li>方法名：必须相同<br />\n形参列表：必须不同 (形参类型或个数或顺序，至少有一样不同，参数名无要求)<br />\n 返回类型：无要求</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCalculator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 两个整数的和</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 一个整数，个 double 的和</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 一个 double ，一个 Int 和</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>doubLe n1 <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 三个 int 的和</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"可变参数\"><a class=\"anchor\" href=\"#可变参数\">#</a> 可变参数</h1>\n<ul>\n<li>可变参数的实参可以为 0 个或任意多个。</li>\n<li>可变参数的实参可以为数组。</li>\n<li>可变参数的本质就是数组.</li>\n<li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li>\n<li>一个形参列表中只能出现一个可变参数</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 可以使用方法重载</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//2 个数的和</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//3 个数的和</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> n3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span><span class=\"token number\">4</span>个数的和</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> n3 <span class=\"token operator\">+</span> n4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 上面的三个方法名称相同，功能相同，参数个数不同 -> 使用可变参数优化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//int... 表示接受的是可变参数，类型是 int , 即可以接收多个 int (0 - 多) I</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 使用可变参数时，可以当做数组来使用即 nums 可以当做数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> nums <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收的参数个数=\"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    res <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h1>\n<ul>\n<li>在 java 编程中，I 主要的变量就是属性 (成员变量) 和局部变量。</li>\n<li>我们说的局部变量一般是指在成员方法中定义的变量。 [举例 Cat 类: cry]</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token char\">'Jack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>java 中作用域的分类<br />\n全局变量：也就是属性，作用域为整个类体 Cat 类: cry eat 等方法使用属性<br />\n局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中！（一般是在方法内的）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 全局变量：也就是属性，作用域为整个类体 Cat 类 : cry eat| 等方法使用属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 属性在定义时，可以直接赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定的值是 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//1. 局部变量一般是指在成员方法中定义的变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//2. n 和 name 就是局部变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//3. n 和 name 的作用域在 cry 方法中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在cry中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在eat中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>全局变量 (属性) 可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使<br />\n用，因为没有默认值。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 全局变量：也就是属性，作用域为整个类体 Cat 类 : cry eat| 等方法使用属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 属性在定义时，可以直接赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定的值是 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 全局变量 (属性) 可以不赋值，直接使用，因为有默认值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 局部变量必须赋值后，才能使用，因为没有默认值。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认值 0.0 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 局部变量必须赋值后，才能使用，因为没有默认值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> <span class=\"token string\">\"北京的猫\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 局部变量若不初始化会报错</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"num=\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"address=\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"weight=\"</span> <span class=\"token operator\">+</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//1. 局部变量一般是指在成员方法中定义的变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//2. n 和 name 就是局部变量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//3. n 和 name 的作用域在 cry 方法中</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在cry中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在eat中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"作用域细节\"><a class=\"anchor\" href=\"#作用域细节\">#</a> 作用域细节</h1>\n<ul>\n<li>属性和局部变量可以重名，访问时遵循就近原则。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 细节属性和局部变量可以重名，访问时遵循就近原则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say( ) name=\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//king</span></pre></td></tr></table></figure><ul>\n<li>在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 细节属性和局部变量可以重名，访问时遵循就近原则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say( ) name=\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> 北京\"<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//String address =” 上海 \";// 错误，重复定义变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">String</span> naime <span class=\"token operator\">=</span> <span class=\"token string\">\"yhm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>属性生命周期较长，伴随着对象的创建而创建，伴随着对象的死亡而死亡。局部变<br />\n量，生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而死亡。<br />\n即在一次方法调用过程中。</p>\n</li>\n<li>\n<p>作用域不同<br />\n全局变量：可以被本类使用，或其他类使用 (通过对象调用)<br />\n 局部变量：只能在本类中对应的方法中使用</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VarScopeDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        局部变量，生命周期较短，伴随着它的代码块的执行而创建，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        伴随着代码块的结束而销毁。即在一次方法调用过程中</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//p1.say ();// 当执行 say 方法时， say 方法的局部变量比如 name ，会创建，当 say 执行完毕后</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//name 局 部变量就销毁，但是属性 (全局变量) 仍然可以使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">T</span> t1<span class=\"token operator\">=</span><span class=\"token function\">newT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一种跨类访问对象属性的方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第二种跨类访问对象属性的方式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 全局变量 / 属性：可以被本类使用，或其他类使用 (通过对象调用)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jack</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jack </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 细节属性和局部变量可以重名，访问时遵循就近原则</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say( ) name=\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> 北京\"<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//String address =” 上海 \";// 错误，重复定义变量</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">String</span> naime <span class=\"token operator\">=</span> <span class=\"token string\">\"yhm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修饰符不同<br />\n全局变量 / 属性可以加修饰符<br />\n局部变量不可以加修饰符</li>\n</ul>\n<h1 id=\"构造器\"><a class=\"anchor\" href=\"#构造器\">#</a> 构造器</h1>\n<ul>\n<li>构造方法又叫构造器 (constructor), 是类的一种特殊的方法，它的主要作用是完成对新对象的初始化</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>修饰符<span class=\"token punctuation\">]</span>方法名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    方法体<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//1. 构造器没有返回值，也不能写 void</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//2. 构造器的名称和类 Person 一样</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//3. (String pName, int pAge) 是构造器形参列表，规则和成员方法 - 样</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pAge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        name <span class=\"token operator\">=</span> pName <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        age <span class=\"token operator\">=</span> pAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 当我们 new 一个对象时，直接通过构造器指定名字和年龄</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1) 构造器的修饰符可以默认<br />\n 2) 构造器没有返回值<br />\n 3) 方法名和类名字必须样<br />\n 4) 参数列表和成员方法一样的规则<br />\n 5) 在创建对象时，系统会自动的调用该类的构造器完成对象的初始化。</p>\n<h1 id=\"构造器细节\"><a class=\"anchor\" href=\"#构造器细节\">#</a> 构造器细节</h1>\n<ul>\n<li>一个类可以定义多个不同的构造器，即构造器重载<br />\n比如：我们可以再给 Person 类定义一个构造器，用来创建对象的时候，只指定人名，不需要指定年龄</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructorDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 编写一个 main 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"king\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第一个构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第 2 个构造器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 第一个构造器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pAge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    name <span class=\"token operator\">=</span> pName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    age <span class=\"token operator\">=</span> pAge <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 第 2 个构造器，只指定人名，不需要指定年龄</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    name <span class=\"token operator\">=</span> pName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>构造器名和类名要相同</li>\n<li>构造器没有返回值</li>\n<li>构造器是完成对象的初始化，并不是创建对象</li>\n<li>在创建对象时，系统自动的调用该类的构造方法</li>\n<li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器 (也叫默认构造器)，比如 Person (){}, 使用 javap 指令反编译查看</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果程序员没有定义构造器， 系统会自动给类生成一个默认无参构造器 (也叫默认构造器)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    默认构造器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Dog () &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>一旦定义了自己的构造器默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下，即: Person (){}</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructorDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 编写一个 main 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Dog</span> dog1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；<span class=\"token comment\">// 使用的是默认无参构造器（也叫默认构造器）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，即无法使用 Dog dog1 = new Dog ()；</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 除非显式的定义一下，即: Dog ()&#123;&#125; 写 (这点很重要)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 显式的定义 - 下无参构造器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"对象创建流程分析\"><a class=\"anchor\" href=\"#对象创建流程分析\">#</a> 对象创建流程分析</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 类 Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        name<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span><span class=\"token comment\">// 给属性赋值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        age<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//..</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Person</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小倩\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>●流程分析</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1.</span>加载<span class=\"token class-name\">Person</span>类信息<span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>只会加载一<span class=\"token operator\">-</span>次</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2.</span>在堆中分配空间<span class=\"token punctuation\">(</span>地址<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">3.</span>完成对象初始化<span class=\"token punctuation\">[</span><span class=\"token number\">3.1</span> 默认初始化age<span class=\"token operator\">=</span><span class=\"token number\">0</span> name<span class=\"token operator\">=</span><span class=\"token keyword\">null</span> <span class=\"token number\">3.2</span> 显式初始化age <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.3</span> 构造器初始化 age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>，name <span class=\"token operator\">=</span> 小倩<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">4.</span>在对象在堆中的地址，返回给<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>p是对象名，也可以理解成是对象的引用<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"this\"><a class=\"anchor\" href=\"#this\">#</a> this</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//this.name 就是当前对象的属性 name</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//this.age 就是当前对象的属性 age</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简单的说，哪个对象调用，this 就代表哪个对象 (this 在堆中有个指向自己这个对象的地址)</p>\n<h1 id=\"this细节\"><a class=\"anchor\" href=\"#this细节\">#</a> this 细节</h1>\n<ol>\n<li>this 关键字可以用来访问本类的属性、方法、构造器</li>\n<li>this 用于区分当前类的属性和局部变量</li>\n<li>访问成员方法的语法: this. 方法名 (参数列表);</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThisDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">/</span> <span class=\"token operator\">/</span>编写一个main方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">T</span> t1<span class=\"token operator\">=</span><span class=\"token function\">newT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 细节：访问成员方法的语法 :this. 方法名 (参数列表);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print1n</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1()方法..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f2()方法..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 调用本类的 f1 </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 第一种方式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 第二种方式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>访问构造器语法: this (参数列表); 注意只能在构造器中使用</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 细节：访问构造器语法: this (参数列表);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 注意只能在构造器中使用 (即只能在构造器中访问另外一个构造器，即只能在构造器中访问另外一个构造器必须放在第一条语句）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 访问构造器语法: this (参数列表); 必须放置第一条语句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span> <span class=\"token punctuation\">.</span> out <span class=\"token punctuation\">.</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T()构造器\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 这里去访问 T (String name, int age) 构造器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T(String name, int age) 构造器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>this 不能在类定义的外部使用，只能在类定义的方法中使用。</li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/20/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84/",
            "url": "https://love.youhuamao.xyz/2022/09/20/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84/",
            "title": "数组",
            "date_published": "2022-09-19T16:00:00.000Z",
            "content_html": "<p>数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。<br />\n即：数 (数据) 组 (一组) 就是一组数据</p>\n<h1 id=\"定义数组\"><a class=\"anchor\" href=\"#定义数组\">#</a> 定义数组</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hen <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> hen<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>动态初始化</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建了一个数组，</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  数据类型<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>或者<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先声明数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>静态初始化</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>元素值<span class=\"token punctuation\">,</span>元素值<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h1 id=\"数组赋值机制\"><a class=\"anchor\" href=\"#数组赋值机制\">#</a> 数组赋值机制</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基本数据类型赋值， 赋值方式为值拷贝</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>n2 <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1=\"</span> <span class=\"token operator\">+</span> n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'n2=\"</span> <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//80 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 是一个地址，arr2 变化会影响到 arr1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 把 arr1 赋给 arr2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//arr1 = &#123;10,2,3&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//arr2 = &#123;10,2,3&#125;</span></pre></td></tr></table></figure><h1 id=\"数组拷贝\"><a class=\"anchor\" href=\"#数组拷贝\">#</a> 数组拷贝</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建一个新的数组 arr2, 开辟新的数据空间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 大小 arr1. length;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 遍历 arr1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>把每个元素拷贝到arr2对应的元素位置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">I</span></pre></td></tr></table></figure><h1 id=\"数组反转\"><a class=\"anchor\" href=\"#数组反转\">#</a> 数组反转</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 交换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算数组的长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 每次交换时，对应的下标是 arr [i] 和 arr [arr.length-i]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>inti<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token number\">1</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 逆序赋值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//1. 先创建一个新的数组 arr2, 大小 arr.length</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//2. 逆序遍历 arr, 将每个元素拷贝到 arr2 的元素中 (顺序拷贝)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//3. 建议增加一个循环变量 j -> 0 -> 5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 逆序遍历 arr </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    arr2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//4. 当 for 循环结束，arr2 就是一个逆序的数组 &#123;66，55，44, 33,222，6&#125;</span></pre></td></tr></table></figure><h1 id=\"数组扩容\"><a class=\"anchor\" href=\"#数组扩容\">#</a> 数组扩容</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 新建数组，让原数组指向新数组，完成扩容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrNew <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 遍历 arr 数组，依次将 arr 的元素拷贝到 arrNew 数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    arrNew<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 把 4 赋给 arrNew 最后一个元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    arrNew<span class=\"token punctuation\">[</span> arrNew。length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 让 arr 指向 arrNew ,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    arr <span class=\"token operator\">=</span> arrNew<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 可以写成 do while 循环，</span></pre></td></tr></table></figure><h1 id=\"二维数组\"><a class=\"anchor\" href=\"#二维数组\">#</a> 二维数组</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  数据类型<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 列数不确定</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一 维数组，但是只是确定一维数组的个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr <span class=\"token punctuation\">.</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 遍历 arr 每个一维数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 给每个一维数组开空间 new</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 如果没有给一维数组 new , 那么 arr [i] 就是 null</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 遍历一维数组，并给维数组的每个元素赋值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// i = 0:1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// i = 1:2:2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// i = 2:3:3:3</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/14/Java/Java%E5%9F%BA%E7%A1%80/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "url": "https://love.youhuamao.xyz/2022/09/14/Java/Java%E5%9F%BA%E7%A1%80/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "title": "运算符",
            "date_published": "2022-09-13T16:00:00.000Z",
            "content_html": "<h1 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2.5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 作为独立的语句使用：前 ++ 和后 ++ 都完全等价于 i=i+1;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 作为表达式使用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 前 ++: ++i 先自增后赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 后 ++: i++ 先赋值后自增</span></pre></td></tr></table></figure><h1 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h1>\n<ul>\n<li>关系运算符的结果都是 boolean 型，也就是要么是 true, 要么是 false</li>\n<li>关系表达式经常用在 if 结构的条件中或循环结构的条件中</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token boolean\">false</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">!=</span> <span class=\"token number\">7</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> 7 false</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8 <span class=\"token punctuation\">></span></span> <span class=\"token number\">7</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">>=</span> <span class=\"token number\">7</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">instanceof</span> 检查是否是类的对象 <span class=\"token string\">\"hsp\"</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span>  <span class=\"token boolean\">true</span></pre></td></tr></table></figure><h1 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">&amp;</span>h<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>叫逻辑与<span class=\"token operator\">:</span>规则<span class=\"token operator\">:</span>当a和b同时为<span class=\"token boolean\">true</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token operator\">&amp;&amp;</span>b <span class=\"token operator\">:</span> <span class=\"token operator\">&amp;&amp;</span>叫短路与<span class=\"token operator\">:</span>规则<span class=\"token operator\">:</span>当a和b同时为<span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token operator\">|</span>b<span class=\"token operator\">:</span><span class=\"token operator\">|</span>叫逻辑或，规则<span class=\"token operator\">:</span>当a和b <span class=\"token punctuation\">,</span>有一<span class=\"token operator\">-</span>个为<span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token operator\">||</span>b<span class=\"token operator\">:</span><span class=\"token constant\">II</span>叫短路或，规则<span class=\"token operator\">:</span>当a和b，有一个为<span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">!</span>a<span class=\"token operator\">:</span>叫取反，或者非运算。当a为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>当a为<span class=\"token boolean\">false</span>是，结果为<span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token operator\">^</span>b<span class=\"token operator\">:</span>叫逻辑异或，当a和b不同时，则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span>和<span class=\"token operator\">&amp;</span>使用区别</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token operator\">&amp;&amp;</span>短路与<span class=\"token operator\">:</span>如果第一个条件为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>则第二个条件不会判断，最终结果为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> 效率高</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token operator\">&amp;</span>逻辑与<span class=\"token operator\">:</span>不管第一一个条件是否为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>第二个条件都要判断，效率低</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3.</span>开发中，我们使用的基本是短路与<span class=\"token operator\">&amp;&amp;</span>，效率高</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token constant\">II</span>和<span class=\"token operator\">|</span>使用区别</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">||</span>短路或<span class=\"token operator\">:</span>如果第个条件为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> 则第二个条件不会判断，最终结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>效率高</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">|</span>逻辑或<span class=\"token operator\">:</span>不管第一个条件是否为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> 第二个条件都要判断，效率低</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">3</span> 开发中，我们基本使用<span class=\"token operator\">||</span></pre></td></tr></table></figure><h1 id=\"三元运算符\"><a class=\"anchor\" href=\"#三元运算符\">#</a> 三元运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>条件表达式<span class=\"token operator\">?</span>表达式<span class=\"token number\">1</span><span class=\"token operator\">:</span>表达式<span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span>如果条件表达式为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>运算后的结果是表达式<span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>如果条件表达式为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>运算后的结果是表达式<span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> result<span class=\"token operator\">:</span> a<span class=\"token operator\">></span>b <span class=\"token operator\">?</span> a<span class=\"token operator\">++</span> <span class=\"token operator\">:</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//98</span></pre></td></tr></table></figure><h1 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> myScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入名字\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入年龄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"进制\"><a class=\"anchor\" href=\"#进制\">#</a> 进制</h1>\n<ul>\n<li>二进制: 0,1 , 满 2 进 1. 以 0b 或 0B 开头。</li>\n<li>十进制: 0-9 满 10 进 1。</li>\n<li>八进制: 0-7，满 8 进 1. 以数字 0 开头表示。</li>\n<li>十六进制: 0-9 及 A (10)-F (15)，满 16 进 1. 以 0x 或 0X 开头表示。此处的 A-F 不区分大小写。</li>\n</ul>\n<h1 id=\"位运算符\"><a class=\"anchor\" href=\"#位运算符\">#</a> 位运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>按位与<span class=\"token operator\">&amp;</span>    两位全为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>结果为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>否则为<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>按位或<span class=\"token operator\">|</span>    两位有一个为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>结果为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>否则为<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>按位异或<span class=\"token operator\">^</span>  两位一个为<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span> <span class=\"token operator\">-</span>个为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>结果为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>否则为<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>按位取反<span class=\"token operator\">~</span>  <span class=\"token number\">0</span><span class=\"token operator\">-></span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">-></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1.</span> 二进制的最高位是符号位<span class=\"token operator\">:</span> <span class=\"token number\">0</span>表示正数<span class=\"token punctuation\">,</span><span class=\"token number\">1</span>表示负数<span class=\"token punctuation\">(</span>老韩口诀<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token operator\">-></span><span class=\"token number\">0</span> <span class=\"token number\">1</span><span class=\"token operator\">-></span><span class=\"token operator\">-</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2.</span> 正数的原码，反码，补码都一样<span class=\"token punctuation\">(</span>三码合<span class=\"token operator\">-</span>一<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3.</span> 负数的反码<span class=\"token operator\">=</span>它的原码符号位不变，其它位取反<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">-></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">-></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4.</span> 负数的补码<span class=\"token operator\">=</span>它的反码<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span>负数的反码<span class=\"token operator\">=</span>负数的补码<span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token number\">0</span>的反码，补码都是<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">6.</span> java没有无符号数，换言之，java中的数都是有符号的</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">7.</span> 在计算机运算的时候，都是以补码的方式来运算的<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">8.</span> 当我们看运算结果的时候，要看他的原码<span class=\"token punctuation\">(</span>重点<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//1. 先得到 2 的补码 => 2 的原码 00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//2 的补码 00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//2. 3 的补码 3 的原码 00000000 00000000 00000000 00000011</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//3 的补码 00000000 00000000 00000000 00000011</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//3. 按位 & amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//00000000 00000000 00000000 00000011</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//00000000 00000000 00000000 00000010 &amp; 运算后的补码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 运算后的原码也是 00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 结果就是 2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">pritln</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">&amp;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2 </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 推导</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//1. 先得到 - 2 的原码 10000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//2. -2 的反码        11111111 11111111 11111111 11111101</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//3. -2 的补码        11111111 11111111 11111111 11111110</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//4. ~-2 操作         00000000 00000000 00000000 00000001 运 算后的补码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//5. 运算后的原码就是   00000000 00000000 00000000 00000001 => 1 </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 还有 3 个位运算符 >>、&lt;&lt; 和 >> </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 运算规则:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">1.</span> 算术右移<span class=\"token operator\">>></span><span class=\"token operator\">:</span>低位溢出<span class=\"token punctuation\">,</span>符号位不变，并用符号位补溢出的高位</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">2.</span> 算术左移<span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">:</span>符号位不变低位补<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">3.</span> <span class=\"token operator\">>>></span>逻辑右移也叫无符号右移运算规则是<span class=\"token operator\">:</span>低位溢出，高位补<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">4.</span> 特别说明<span class=\"token operator\">:</span>没有<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span>符号</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">>></span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 => 00000001 => 00000000 本质 1 / 2 / 2 = 0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 => 00000001 => 00000100 本质 1 * 2 * 2 = 4</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/13/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "https://love.youhuamao.xyz/2022/09/13/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "数据类型",
            "date_published": "2022-09-12T16:00:00.000Z",
            "content_html": "<p>Java 数据类型有基本数据类型和引用数据类型</p>\n<h1 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h1>\n<h2 id=\"整数类型\"><a class=\"anchor\" href=\"#整数类型\">#</a> 整数类型</h2>\n<ul>\n<li>byte [字节] 1 字节<br />\n short [短整型] 2 字节<br />\n int [整型] 4 字节<br />\n long [长整型] 8 字节</li>\n</ul>\n<h2 id=\"浮点数类型\"><a class=\"anchor\" href=\"#浮点数类型\">#</a> 浮点数类型</h2>\n<ul>\n<li>单精度 float 4 字节<br />\n双精度 double 8 字节</li>\n</ul>\n<pre><code class=\"language-Java\">//Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加‘f’或‘F'\nfloat num1 = 1.1; //错\nfloat num2 = 1.1F; //对\ndouble num3 = 1.1; //对\ndouble num3 = 1.1f; //对\ndouble num5 = .123; //等价于0.123\nSystem.out.println(5.12e2);//512.0\nSystem.out.println(5.12E-2); //0.0512\n//浮点数使用陷阱: 2.7和8.1/3比较\ndouble num11 = 2. 7 ;\ndouble num12 = 8.1 / 3; //2.7\nSystem.out.println(num11);/ /2.7\nSystem.out.println(num12);//接近2.7的一个小数，而不是2.7 \n\n\n//得到一个重要的使用点:当我们对运算结果是小数的进行相等判断是，要小心\n//应该是以两个数的差值的绝对值，在某个精度范围类判断\nif( num11 == num12) &#123;\n    System.out.println(&quot;相等&quot; );\n&#125;\n//正确的写法\nif (Math。abs (num11 - num12) &lt; 0. 000001)&#123;\n    System.out.println(&quot;差值非常小，到我的规定精度，认为相等...&quot;);\n&#125;\n\n</code></pre>\n<h2 id=\"字符类型\"><a class=\"anchor\" href=\"#字符类型\">#</a> 字符类型</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//    (这是制表位)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> c3 <span class=\"token operator\">=</span> <span class=\"token char\">'猫'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 猫</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> c4 <span class=\"token operator\">=</span> <span class=\"token number\">97</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 在 java 中， char 的本质是 一个整数，在输出时，是 unicode 码对 应的字符</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">char</span> c5 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 'a' 对应的数字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//97</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//char 类型 是可以进行运算的， 相当于一个整数，因为它都对应有 Unicode 码 .</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//107 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">char</span> c5 <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//98+1==> 99</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//99</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//99-> 对应的字符 -> 编码表 ASCII (规定好的)=>C</span></pre></td></tr></table></figure><h2 id=\"布尔类型\"><a class=\"anchor\" href=\"#布尔类型\">#</a> 布尔类型</h2>\n<p>boolean false true</p>\n<h2 id=\"自动转换类型\"><a class=\"anchor\" href=\"#自动转换类型\">#</a> 自动转换类型</h2>\n<p>当 java 程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换<br />\n数据类型按精度 (容量) 大小排序为<br />\n char int long float double<br />\nbyte short int long float double</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 有多种类型的数据混合运算时，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>intn1<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">float</span> d1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误 n1 + 1.1 => 结果类型是 double</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 n1 + 1.1 => 结果类型是 double</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">float</span> d1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1.1F</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 n1 + 1.1 => 结果类型是 float</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//(byte, short) 和 char 之间不会相互自动转换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 当把具体数赋给 byte 时，(1) 先判断该数是否在 byte 范围内， 如果是就可以</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">byte</span> b1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 128-127 值给变量，判断范围</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//n2 是 int</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">byte</span> b2 <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，原因：如果是变量赋值，判断类型，int 字节比 byte 多</span></pre></td></tr></table></figure><h2 id=\"强制类型转换\"><a class=\"anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h2>\n<ul>\n<li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符 (), 但可能造成精度降低或溢出</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">3.5</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token operator\">*</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错，因为 dobule 不可以转 int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">3.5</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token operator\">*</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//44</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//char 类型可以保存 int 的常量值，但不能保存 int 的变量值，需要强转</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">char</span> c3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>m<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//100 对应的字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//byte,short 和 short 类型在进行运算时，当做 int 类型处理。</span></pre></td></tr></table></figure><h2 id=\"与string的转换\"><a class=\"anchor\" href=\"#与string的转换\">#</a> 与 String 的转换</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1.1F</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> f1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> d1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> b1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//String-> 对应的基本数据类型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">String</span> s5 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">float</span> num3 <span class=\"token operator\">=</span> <span class=\"token class-name\">FLoat</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">long</span> num4 <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">byte</span> num5 <span class=\"token operator\">=</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseByte</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseBoolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">short</span> num6 <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseShort</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">/</span> <span class=\"token operator\">/</span>解读</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>s5<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>得到s5字符串的第一个字符</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">rintln</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/12/shujuku/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://love.youhuamao.xyz/2022/09/12/shujuku/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "什么是数据库",
            "date_published": "2022-09-11T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是数据库\"><a class=\"anchor\" href=\"#什么是数据库\">#</a> 什么是数据库</h1>\n<ul>\n<li>数据库 (DB，DataBase)</li>\n<li>概念：数据仓库，软件，安装在操作系统（window，Linux，mac... 之上）SQL, 可以存储大量数据。500 万。</li>\n<li>作用：存储数据，管理数据</li>\n</ul>\n<h1 id=\"关系型数据库sql\"><a class=\"anchor\" href=\"#关系型数据库sql\">#</a> 关系型数据库 (SQL)</h1>\n<ul>\n<li>MySQL, Oracle, Sql Server, DB2, SQLlite</li>\n<li>通过表和表之间，行和列之间的关系进行数据的存储，学员信息表，考勤表。</li>\n</ul>\n<h1 id=\"非关系型数据库nosql-not-only\"><a class=\"anchor\" href=\"#非关系型数据库nosql-not-only\">#</a> 非关系型数据库 (NoSQL) Not Only</h1>\n<ul>\n<li>Redis, MongDB</li>\n<li>非关系型数据库，对象存储，通过对象的自身的属性来决定。</li>\n</ul>\n<h1 id=\"dbms数据库管理系统\"><a class=\"anchor\" href=\"#dbms数据库管理系统\">#</a> DBMS (数据库管理系统)</h1>\n<ul>\n<li>数据库的管理软件，科学有效的管理我们的数据。维护和获取数据；</li>\n<li>MySQL, 数据库管理系统！</li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/05/Java/Java/",
            "url": "https://love.youhuamao.xyz/2022/09/05/Java/Java/",
            "title": "文章Java",
            "date_published": "2022-09-05T06:06:39.138Z",
            "content_html": "<h1 id=\"这里开始使用markdown书写博客正文\"><a class=\"anchor\" href=\"#这里开始使用markdown书写博客正文\">#</a> 这里开始使用 Markdown 书写博客正文</h1>\n",
            "tags": [
                "学习Java",
                "前端",
                "组件"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/jQuery/",
            "url": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/jQuery/",
            "title": "jQuery",
            "date_published": "2022-09-03T16:00:00.000Z",
            "content_html": "<h1 id=\"获取-jquery\"><a class=\"anchor\" href=\"#获取-jquery\">#</a> 获取 jQuery</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Tit1e<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">&lt;!--cdn 引入 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https: //cdn. bootcss. com/jquery/3.4.1/core.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1ib/jquery-3.4.1. js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span> script<span class=\"token operator\">></span> #本地引入</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"test-jquery\"</span><span class=\"token operator\">></span> 点我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 选择器就是 css 的选贼器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#test-jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, jQuery'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>公式 $(selctor).action()</pre></td></tr></table></figure><h1 id=\"选择器\"><a class=\"anchor\" href=\"#选择器\">#</a> 选择器</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//原生js，选择器少，麻烦不好记</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//标签</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document. getE lementsByTagName () ;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>document. getE1 ementById() ;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//类</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>document. getE 1 ementsByClassName () ;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//jquery CsS 中的选择器它全部都能用!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$('p').c1ick(); //标签选择器</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>$('#id1'). c1ick(); //id选择器</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>$(' .class1').click() //class选择器 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>文档网站 http://jguery.cuishifeng.cn/</pre></td></tr></table></figure><h1 id=\"事件\"><a class=\"anchor\" href=\"#事件\">#</a> 事件</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">#divMove</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    $<span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>. <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!-- 要求：获取鼠标当前的一 - 个坐标 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mouse : <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mouseMove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>divMove<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>在这里移动鼠标试试</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 当网页元素加载完毕之后，响应事件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">' #divMove'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">mousemove</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">' #mouseMove'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x:'</span><span class=\"token constant\">T</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>pageX <span class=\"token operator\">+</span> <span class=\"token string\">'y:'</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span> pageY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"操作dom\"><a class=\"anchor\" href=\"#操作dom\">#</a> 操作 DOM</h1>\n<ul>\n<li>节点文本操作</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test-ul<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>python<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>Python<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$(' #test-u1 1i [name=python]'). text(; //获得值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$(' #test-u1 1i [name=python]'). text('设置值'); //设置值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$( ' #test-u1').htm1(); //获得值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>$(' #test-ul').htm1(' <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span> 123<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span>'): //设置值</pre></td></tr></table></figure><h1 id=\"元素的显示和隐藏\"><a class=\"anchor\" href=\"#元素的显示和隐藏\">#</a> 元素的显示和隐藏</h1>\n<ul>\n<li>本质 display :none</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$(' #test-u1 1i [name=python]').show()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$(' #test-u11i [name=python]').hide()</pre></td></tr></table></figure><ul>\n<li>娱乐测试</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$(window).width()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ (window) . hei ght()</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$(' #test-u11i [name=python] '). togg1e();</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E5%86%85%E9%83%A8%E5%AF%B9%E8%B1%A1/",
            "url": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E5%86%85%E9%83%A8%E5%AF%B9%E8%B1%A1/",
            "title": "内部对象",
            "date_published": "2022-09-03T16:00:00.000Z",
            "content_html": "<h1 id=\"标准对象\"><a class=\"anchor\" href=\"#标准对象\">#</a> 标准对象</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>typeof 123</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\"number\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>typeof '123'</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\"string\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>typeof true</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"boolean\"</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>typeof NaN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"number\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>typeof []</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\"object\"</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>typeof &#123;&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\"object\"</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>typeof Math.abs</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\"function\"</pre></td></tr></table></figure><h1 id=\"date\"><a class=\"anchor\" href=\"#date\">#</a> Date</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var now = new Date(); //Sat Jan 04 2020 10:47 :06 GMT+0800 (中国标准时间)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>now. getFu11year(); //年</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>now. getMonth(; //月0~11 代表月</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>now. getDate(); //日</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>now. getDay(); //星期几</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>now. gethours(); //时</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>now. getMinutes(); //分</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>now. getSeconds(); //秒</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>now. getTime(); //时间戳全世界统-一1970 1.1 0:00:00毫秒数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console.1og (new Date (1578106175991)) //时间戳转 为时间</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>转换</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>now = new Date (1578106175991)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Sat Jan 04 2020 10:49:35 GMT+0800 (中国标准时间)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>now. toLocalestring //注意，调用是一个方式，不是一个属性!</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>f toLocalestring() &#123; [native code] &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>now. toLocalestring()</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\"2020/1/4上午10:49:35\"</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>now. toGMTString()</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\"Sat，04 Jan 2020 02:49:35 GMT\"</pre></td></tr></table></figure><h1 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h1>\n<p>JSON 字符串和 JS 对象的转化</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var user = &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name: \"qinjiang\" ，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age: 3,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sex: '男'</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//对象转化为json字符串&#123;\"name\" : \"qinjiang\"，\"age\":3,\"sex\":\"男\"&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>var jsonUser = JSON. stringi fy(user);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//json字符串转化为对象参数为json 字符串</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>var obj = JSON. parse(' &#123;\"name\":\"qinjiang\", \"age\":3,\"sex\":\"男\"&#125;');</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>对象于json的区别</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>var obj =&#123;a: 'hel1o' ,b:'he11ob'&#125;;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>var json ='&#123;\"a\":\"he11o\",\"b\":\"he11ob!\"&#125;'</pre></td></tr></table></figure><h1 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> Ajax</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>原生的js写法xhr 异步请求</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jQuey封装好的方法$(\"#name'\").ajax(\")</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios请求</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E6%93%8D%E4%BD%9CBOM%E5%AF%B9%E8%B1%A1/",
            "url": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E6%93%8D%E4%BD%9CBOM%E5%AF%B9%E8%B1%A1/",
            "title": "操作BOM（浏览器对象模型）对象",
            "date_published": "2022-09-03T16:00:00.000Z",
            "content_html": "<h1 id=\"操作bom浏览器对象模型对象\"><a class=\"anchor\" href=\"#操作bom浏览器对象模型对象\">#</a> 操作 BOM（浏览器对象模型）对象</h1>\n<ul>\n<li>window 代表浏览器窗口</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window.alert(1)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>undefined</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>wi ndow. innerHei ght</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>258</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>window. innerwi dth</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>919</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>window. outerHei ght</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>994</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>wi ndow. outerwi dth</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>919</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>//大家可以调整浏览器窗口试试...</pre></td></tr></table></figure><ul>\n<li>Navigator</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Navigator ,封装了浏览器的信息</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>navi gator . appName</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"Netscape'</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>navi gator . appVersi on</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\"5.0 (windows NT 10.0; W0W64) App7ewebkit/537.36 (KHTML，1ike Gecko)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Chrome/63.0.3239.132 Safari/537. 36\"</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>navi gator . use rAgent</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"Mozi11a/5.0 (Windows NT 10.0; W0W64) App lewebkit/537.36 (KHTML， like</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Gecko) Chrome/63.0. 3239.132 Safari/537. 36\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>navi gator. platform</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\"win32\"</pre></td></tr></table></figure><ul>\n<li>screen</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>代表屏幕尺寸</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sc reen. wi dth</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1920 px</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>screen.hei ght</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>1080 px</pre></td></tr></table></figure><ul>\n<li>location</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location代表当前页面的URL信息</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>host: \"www. bai du. com\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>href : \"https://www. bai du. com/\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>protoco1 :\"'https:\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>reload:f reload() //刷新网页</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//设置新的地址</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>locati on. assi gn('https://b1og. kuangstudy. com/')</pre></td></tr></table></figure><ul>\n<li>document</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document代表当前的页面，HTML DOM文档树</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document. title</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"百度一下，你就知道\" </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>document. title='狂神说'</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\"狂神说\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>获取具体的文档树节点</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>Java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span> JavaSE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span> JavaEE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> dl <span class=\"token operator\">=</span> document <span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">' app '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>=</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>获取cookie</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>document . cookie</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>guid=111872281.88375976493059340.1578110638877.133; monitor_ count=1\"</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>服务器端可以设置cookie: httpOnly</pre></td></tr></table></figure><ul>\n<li>history</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>history代表浏览器的历史记录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>history. back() //后退</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>history. forward() //前进</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E6%93%8D%E4%BD%9CDOM%E5%AF%B9%E8%B1%A1/",
            "url": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E6%93%8D%E4%BD%9CDOM%E5%AF%B9%E8%B1%A1/",
            "title": "操作BOM（浏览器对象模型）对象",
            "date_published": "2022-09-03T16:00:00.000Z",
            "content_html": "<h1 id=\"核心\"><a class=\"anchor\" href=\"#核心\">#</a> 核心</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>浏览器网页就是一一个Dom树形结构!</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>●更新:更新Dom节点</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>●遍历dom节点:得到Dom节点</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>●删除:删除一个Dom节点</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>●添加:添加一个新的节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>要操作一个Dom节点，就必须要先获得这个Dom节点</pre></td></tr></table></figure><h1 id=\"获得dom节点\"><a class=\"anchor\" href=\"#获得dom节点\">#</a> 获得 DOM 节点</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//对应CSS选择器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var h1 = document . getElementsByTagName('h1' );</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>var p1 = document . getElementById('p1');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var p2 = document. getElementsByClassName('p2');</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>var father = document. getE1 ementById(' father');</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>var childrens = father. children; //获取父节点下的所有 子节点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// father.firstChild</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>// father.lastChild</pre></td></tr></table></figure><h1 id=\"更新节点\"><a class=\"anchor\" href=\"#更新节点\">#</a> 更新节点</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> id1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> getE1 <span class=\"token function\">ementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>操作文本</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>id1.innerText='456修改文本的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>id1.innerHTML= '<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>123<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span>可以解析HTML文本标签</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>操作css</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>id1.style.co1or = 'ye11ow' ;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>id1.sty1e.fontSize= ' 20px';</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>id1.style.padding ='2em'</pre></td></tr></table></figure><h1 id=\"删除节点\"><a class=\"anchor\" href=\"#删除节点\">#</a> 删除节点</h1>\n<pre><code class=\"language-hmtl\">删除节点的步骤，先获取父节点，再通过父节点删除自己\n\n&lt;div i d=&quot;father&quot;&gt;\n    &lt;h1&gt;标题一&lt;/h1&gt;\n    &lt;p id=&quot;p1&quot;&gt;p1&lt;/p&gt;\n    &lt;p class=&quot;p2&quot;&gt;p2&lt;/p&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    var se1f = document. getElementById('p1');\n    var father = p1. parentE lement;\n    father. removeChild(se1f)\n\n    //删除节点是一个动态的过程\n    father. removeChild(father . children [0])\n    father . removeChild(father . children [1])\n    father. removechild(father. children [2])\n&lt;/script&gt;\n删除多个节点的时候，children是在时刻变化的，删除节点的时候一 定要注意!\n\n</code></pre>\n<h1 id=\"插入节点\"><a class=\"anchor\" href=\"#插入节点\">#</a> 插入节点</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>了，但是这个DOM节点已经存在元素了，我们就不能这么干了!会产生覆盖,所以要追加</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>se<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaSE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ee<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaEE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>me<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaME<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> js <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> 1ist <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>js<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>追加结果</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>se<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaSE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ee<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaEE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>me<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaME<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"创建标签实现插入\"><a class=\"anchor\" href=\"#创建标签实现插入\">#</a> 创建标签实现插入</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> js <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 已经存在的节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> 1ist <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 通过 JS 创建一个新的节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> newP <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建一个 p 标签</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>newP<span class=\"token punctuation\">.</span> id <span class=\"token operator\">=</span> <span class=\"token string\">' newP'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>newP<span class=\"token punctuation\">.</span> innerText <span class=\"token operator\">=</span> <span class=\"token string\">'He11o, Kuangshen'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 创建一个标签节点 (通过这个属性，可以设置任意的值)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> myScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>myScript<span class=\"token punctuation\">.</span> <span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/javascript'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"插入新节点\"><a class=\"anchor\" href=\"#插入新节点\">#</a> 插入新节点</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var js = document. getE1 ementById('js); 7/已经存在的节点</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var 1ist = document. getElementById('list');</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//通过JS创建一个新的节点</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var newP = document. createElement('p');//创建一- 个p标签</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newP.id='newP';</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>newP. innerText = 'He11o ，Kuangshen';</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//创建一个标签节点</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>var myScript = document. createElement('script');</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>myScript. setAttribute(' type','text/javascript');</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>//可以创建一 个sty1e标签</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>var myStyle= document. createElement('style'); //创建 了一个空sty1e标签</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>myStyle. setAttribute(' type'，' text/css');</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>mystyle. innerHTML = ' body&#123;background-color: chartreuse;&#125;'; //设置标签内容</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>document . getElementsByTagName( 'head') [0] . appendChild(mySty1e)</pre></td></tr></table></figure><h1 id=\"insert\"><a class=\"anchor\" href=\"#insert\">#</a> insert</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var ee = document . getElementById('ee');</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var js = document . getElementById('js');</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>var 1ist = document. getE1 ementById('list' );</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//要包含的节点. insertBefore (newNode，targetNode)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list. insertBefore(js,ee);</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E6%93%8D%E4%BD%9C%E8%A1%A8%E5%8D%95/",
            "url": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E6%93%8D%E4%BD%9C%E8%A1%A8%E5%8D%95/",
            "title": "操作表单",
            "date_published": "2022-09-03T16:00:00.000Z",
            "content_html": "<h1 id=\"表单是什么form-dom-树\"><a class=\"anchor\" href=\"#表单是什么form-dom-树\">#</a> 表单是什么 form DOM 树</h1>\n<ul>\n<li>文本框 text</li>\n<li>下拉框 &lt;select&gt;</li>\n<li>单选框 radio</li>\n<li>多选框 checkbox</li>\n<li>隐藏域 hidden</li>\n<li>密码框 password</li>\n<li>......</li>\n</ul>\n<h1 id=\"获取提交信息\"><a class=\"anchor\" href=\"#获取提交信息\">#</a> 获取提交信息</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>用户名: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 多选框的值。就是定义好的 value --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>性别: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>man<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>boy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 男</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>women<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>girl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 女</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">var</span> input_ text <span class=\"token operator\">=</span> document <span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">var</span> boy_ radio <span class=\"token operator\">=</span> document <span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">' boy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">var</span> girl_ radio <span class=\"token operator\">=</span> document <span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gir1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 得到输入框的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    input_ text<span class=\"token punctuation\">.</span> value</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 修改输入框的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    input_ text<span class=\"token punctuation\">.</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 对于单选框， 多选框等等固定的值， boy_ radio. value 只能取到当前的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    boy_ radio<span class=\"token punctuation\">.</span> checked<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 查看返回的结果，是否为 true, 如果为 true, 则被选中</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    gir1_ radio<span class=\"token punctuation\">.</span> checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">/</span><span class=\"token function\">赋值</span> <span class=\"token punctuation\">(</span>为<span class=\"token boolean\">true</span>代表被选中<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"提交表单\"><a class=\"anchor\" href=\"#提交表单\">#</a> 提交表单</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>表单绑定提交事件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>onsubmit = 绑定一个提交检测的函数，true, </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>false</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>将这个结果返回给表单，使用 onsubmit 接收！</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>onsubmit=\"return aaa 0)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>https:/ /www. baidu. com/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> post<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onsubmit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token function\">aaa</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>用户名: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>密码: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span> password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> input -lpassword<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&lt; input type=\"hidden\" id=\" md5- password\" name= \"password\"></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">&lt;!-- 绑定事件 onclick 被点击 --></span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>提交<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">aaa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">aLert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">var</span> uname <span class=\"token operator\">=</span> document <span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">var</span> pwd <span class=\"token operator\">=</span> document <span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">' input-password'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">var</span> md5pwd <span class=\"token operator\">=</span> document <span class=\"token punctuation\">.</span> <span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">' md5-password'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    md5pwd<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">md5</span> <span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 可以校验判断表单内容，true 就是通过提交，false, 阻止提交</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/",
            "url": "https://love.youhuamao.xyz/2022/09/04/front/JavaSciprt/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/",
            "title": "面向对象编程",
            "date_published": "2022-09-03T16:00:00.000Z",
            "content_html": "<h1 id=\"原型\"><a class=\"anchor\" href=\"#原型\">#</a> 原型</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var Student = &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name:“ginjiang\",</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age: 3,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    run: function () &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console.1og(this.name + \" run....\");</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>var xiaoming = &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    name: \"xiaoming\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>xiaoming._ proto__ = user;</pre></td></tr></table></figure><h1 id=\"class\"><a class=\"anchor\" href=\"#class\">#</a> class</h1>\n<ul>\n<li>定义类，属性，方法</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//定义一个学生的类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>class Student&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    constructor(name) &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        this.name = name;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    he11o()&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        alert('he11o')</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>var xiaoming = new Student(\"xiaoming\");</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>var xiaohong = new Student(\"xiaohong\");</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>xiaoming.he11o()</pre></td></tr></table></figure><ul>\n<li>继承</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Student&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    constructor(name) &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        this.name = name;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    he11o()&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        alert('he11o')</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>class XiaoStudent extends Student&#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    constructor(name , grade)&#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        super(name );</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        this. grade = grade;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    myGrade()&#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        alert(我是一 名小学生')</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>var xiaoming = new Student (\"xiaoming\");</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>var xiaohong = new xiaoStudent(\"xiaohong\",1);</pre></td></tr></table></figure><h1 id=\"原型链\"><a class=\"anchor\" href=\"#原型链\">#</a> 原型链</h1>\n",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/03/front/JavaSciprt/%E5%87%BD%E6%95%B0/",
            "url": "https://love.youhuamao.xyz/2022/09/03/front/JavaSciprt/%E5%87%BD%E6%95%B0/",
            "title": "函数",
            "date_published": "2022-09-02T16:00:00.000Z",
            "content_html": "<h1 id=\"定义函数\"><a class=\"anchor\" href=\"#定义函数\">#</a> 定义函数</h1>\n<ul>\n<li>定义方式一</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>绝对值函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>function abs(x)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    if(x>=0)&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        return x;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &#125;else&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        return -x;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>一旦执行到return代表函数结束,返回结果! </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>如果没有执行return，函数执行完也会返回结果，结果就是undefined</pre></td></tr></table></figure><ul>\n<li>定义方式二</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var abs = function(x)&#123; </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    if(x>=0)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        return x;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &#125;else&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        return -x;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>function(x)&#123; ... &#125;这是一个匿名函数。但是可以把结果赋值给abs，通过abs就可以调用函数</pre></td></tr></table></figure><ul>\n<li>调用函数</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数问题: javaScript 可以传任意个参数，也可以不传递参数~</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>参数进来是否存在的问题?</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>假设不存在参数，如果规避?</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var abs = function(x)&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    //手动抛出异常来判断</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    if (typeof x!== 'number') &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        throw 'Not a Number' ;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    if(x>=0)&#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        return x;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &#125;e1se&#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        return -x;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>arguments</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>代表,传递进来的所有的参数，是一个数组!</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var abs = function(x)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console.1ogC\"x=>\"+x);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>for (var i = 0; i&lt; arguments.1ength;i++)&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console.log(arguments[i]);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    if(x>=0)&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        return x;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;else&#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        return -x;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>rest</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>以前获取多余参数:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>if (arguments. 1ength>2)&#123; </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>for (var i = 2; i&lt; arguments.length;i++)&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ES6引入的新特性，获取除了已经定义的参数之外的所有参数~ ...</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>function aaa(a,b,...rest) &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console.1og(\"a=>\"+a);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console.1og(\"b=>\"+b);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console.1og(rest);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rest参数只能写在最后面，必须用...标识。</pre></td></tr></table></figure><h1 id=\"变量的作用域\"><a class=\"anchor\" href=\"#变量的作用域\">#</a> 变量的作用域</h1>\n<ul>\n<li>在 javascript 中，var 定义变量实际是有作用域的。<br />\n假设在函数体中声明，则在函数体外不可以使用～(非要想实现的话，后面可以研究一下闭包)</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function qj() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    var x=1;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    x=x+1;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x=x+2;//Uncaught ReferenceError: x is not defined</pre></td></tr></table></figure><ul>\n<li>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function qj() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    varX=1;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    X=X+1;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>function qj2() &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    var x = 'A';</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    X=X+1;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>内部函数可以访问外部函数的成员，反之则不行</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function qj() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    var x=1;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//内部函数可以访问外部函数的成员，反之则不行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    function qj2() &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vary=x+1; //2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    var z = y + 1; // Uncaught ReferenceError: y is not defined</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>假设，内部函数变量和外部函数的变量，重名！.</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function qj() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    var x=1;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    function qj2() &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        var x = 'A';</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console.1og('inner'+x); // outer1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console.1og('outer'+x); //innerA</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    qj2() </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>假设在JavaScript中函数查找变量从自身函数开始~ 由内向外查找，假设外部存在这个同名的函数变量， 则内部函数会屏蔽外部函数的变量</pre></td></tr></table></figure><ul>\n<li>提升变量作用域</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function qj() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    var x='x\" + y;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console.1og(x);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vary='y';</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>结果 xundefined</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>说明;js执行引擎，自动提升了y的声明，但是不会提升变量y的赋值’;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>但最好先声明再使用</pre></td></tr></table></figure><ul>\n<li>全局函数</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//全局变量</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X =1;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>function f() &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console.1og(x);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f();</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console.1og(x);</pre></td></tr></table></figure><ul>\n<li>全局对象 window</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>varx ='xxx';</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>alert(x);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>alert(window.x); //默认所有的全局变量，都会自动绑定在window对象下; </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>alert()这个函数本身也是一个window变量;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>var x =‘xxx';</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>window. alert(x);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>var o1d_ _alert = window.alert;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>//o1d_ alert(x);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>I</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>window.alert = function () &#123;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>//发现alert() 失效了</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>window. alert(123);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//恢复</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>window.alert = o1d_ alert;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>window. alert(456);</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Javascript实际上只有一一个全局作用域，任何变量(函数也可以视为变量)，假设没有在函数作用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>范围内找到，就会向外查找，如果在全局作用域都没有找到，报错RefrenceError</pre></td></tr></table></figure><ul>\n<li>规范</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>由于我们所有的全局变量都会绑定到我们的window.上。如果不同的js文件，使用了相同的全局变</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>量，冲突~>如果能够减少冲突?</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//唯一全局变量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var KuangApp = &#123;&#125;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>//定义全局变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>KuangApp. name = ' kuangshen' ;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>KuangApp.add = function (a,b) &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    return a + b;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>jQuery</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题~,不再放到window下</pre></td></tr></table></figure><ul>\n<li>局部作用域 let</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function aaa() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    for(vari=0;i&lt; 100;i++)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console.1og(i)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console.1og(i+1); //问题? i出了这个作用域还可以使用(本来不该获得函数内部的i)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ES6 let关键字解决局部作用域冲突问题</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>function aaa() &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    for(leti=0;i&lt; 100;i++)&#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console. 1og(i)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console.1og(i+1); //Uncaught ReferenceError: i is not defined </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#125;</pre></td></tr></table></figure><ul>\n<li>常量 const</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>const pI = '3.14'; //只读变量 不可以修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console. log(PI);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PI = '123'; // TypeError: Assi gnment to constant variab1e.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console. log(PI);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>在ES6之前是可以修改的</pre></td></tr></table></figure><h1 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h1>\n<ul>\n<li>定义方法<br />\n方法就是把函数放在对象的里面，对象只有两个东西：属性和方法.</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var kuangshen = &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name: '秦疆' ，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    bitrh: 2000 ，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    //方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    age: function () &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    //今年一出生的年</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    var now = new Date () . getFu11Year() ;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    return now-this. bitrh;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>//属性</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>kuangshen. name </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>//方法,一定要带 ()</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>kuangshen.age ()</pre></td></tr></table></figure><ul>\n<li>this. 代表什么？拆开上面的代码看看～</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function getAge() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    //今年-出生的年</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    var now = new Date (). getFu11Year();</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    return now- this.bitrh;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>var kuangshen = &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name : 秦疆,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    bitrh: 2000,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    age: getAge</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>// kuangshen.age() ok</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>// getAge() NaN   window中没有birth</pre></td></tr></table></figure><ul>\n<li>apply<br />\n 在 js 中可以控制 this 指向！</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>function getAge() &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    //今年-出生的年</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    var now = new Date().getFu11Year();</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    now-this.bitrh; </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>var kuangshen = &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name : '秦疆'，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    bitrh: 2000，</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    age: getAge</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#125;;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>// kuangshen.age() ok</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>getAge.apply(kuangshen,[]);// this, 指向了kuangshen, 参数为空</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/03/front/JavaSciprt/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "url": "https://love.youhuamao.xyz/2022/09/03/front/JavaSciprt/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "title": "流程控制",
            "date_published": "2022-09-02T16:00:00.000Z",
            "content_html": "<h1 id=\"判断\"><a class=\"anchor\" href=\"#判断\">#</a> 判断</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var age = 3;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>if (age>3)&#123; </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    alert(\"haha\");</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;else if(age&lt; 5) &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    alert(\"kuwa~\");</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;else &#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    alert(\"kuwa1~\");</pre></td></tr></table></figure><h1 id=\"while循环避免程序死循环\"><a class=\"anchor\" href=\"#while循环避免程序死循环\">#</a> while 循环，避免程序死循环</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>whi1e(age &lt; 100) &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    age=age+1;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console.1og(age)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>do &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    age=age+1;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console.1og(age)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#125;whi1e(age &lt; 100)</pre></td></tr></table></figure><h1 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for(leti=0;i&lt; 100;i++)&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console.1og(i)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;</pre></td></tr></table></figure><h1 id=\"foreach循环\"><a class=\"anchor\" href=\"#foreach循环\">#</a> forEach 循环</h1>\n<p>var age = [12,3,12,3,12,3,12,31,23 ,123];</p>\n<p>age.forEach (function (value) {<br />\nconsole.1og(value)<br />\n}</p>\n<h1 id=\"foin\"><a class=\"anchor\" href=\"#foin\">#</a> fo..in</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//for(var index in object)&#123;&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for(var num in age)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    if (age . hasownProperty (num))&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console.1og(\"存在\")</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console. 1og(age [num])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/02/front/JavaSciprt/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "url": "https://love.youhuamao.xyz/2022/09/02/front/JavaSciprt/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "title": "JavaSciprt快速入门",
            "date_published": "2022-09-01T16:00:00.000Z",
            "content_html": "<h1 id=\"内部标签\"><a class=\"anchor\" href=\"#内部标签\">#</a> 内部标签</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"外部引入\"><a class=\"anchor\" href=\"#外部引入\">#</a> 外部引入</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>abs.js</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>abc.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<ul>\n<li>可以少写分号</li>\n<li>console.log (score) 在浏览器的控制台打印变量！</li>\n<li>alert (); 打印变量</li>\n<li>定义变量： 变量类型 变量名 = 变量值</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>elements 调试网页</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console 调试js（源码）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sources 打断点</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Network 抓包</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Application 查看网页发送储存信息</pre></td></tr></table></figure><h1 id=\"严格检查模式\"><a class=\"anchor\" href=\"#严格检查模式\">#</a> 严格检查模式</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>前提: IEDA 需要设置支持ES6语法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>'use strict'; 严格检查模式，预防JavaScript的随意性导致产生的一 些问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>必须写在JavaScript的第一行!</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>局部变量建议都使用Let 去定义~</pre></td></tr></table></figure><h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"number\"><a class=\"anchor\" href=\"#number\">#</a> number</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>js不区分小数和整数，Number</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>123//整数123</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>123.1 //浮点数123.1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>123e3 //科 学计数法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-99//负数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>NaN  not a number</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Infinity //表示无限大</pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>\"abc\" , 'abc'</pre></td></tr></table></figure><h2 id=\"布尔值\"><a class=\"anchor\" href=\"#布尔值\">#</a> 布尔值</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>true</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>false</pre></td></tr></table></figure><h2 id=\"逻辑运算\"><a class=\"anchor\" href=\"#逻辑运算\">#</a> 逻辑运算</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&amp;&amp; 两个都为真，结果为真</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>|| 一个为真， 结果为真</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>! 真即假，假即真</pre></td></tr></table></figure><h2 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>= 赋值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>== 等于(类型不一样，值一样，也会判断为true)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>=== 绝对等于(类型一样，值一样，结果true)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>NaN===NaN，这个与所有的数值都不相等,包括自己</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>只能通过isNaN(NaN)来判断这个数是否是NaN</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console.1og((1/3) === (1-2/3) )   false</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>尽量避免使用浮点数进行运算，存在精度问题!</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Math.abs(1/3-(1-2/3)) &lt; 0.00000001  true</pre></td></tr></table></figure><h2 id=\"null和undefined\"><a class=\"anchor\" href=\"#null和undefined\">#</a> null 和 undefined</h2>\n<ul>\n<li>null 空</li>\n<li>undefined 未定义</li>\n</ul>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Java的数值必须是相同类型的对象~ ,JS中不需要这样!</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var arr = [1,2,3,4,5, 'he11o' ,nu11 , true]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new Array(1,2,3,4,5, 'he11o')</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>但是java可以这样写 Object arr = [1,2,3,4,5, 'he11o' ,nu11 , true]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>数组越界会出现undefined</pre></td></tr></table></figure><h2 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象是大括号，数组是中括号~~</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>每个属性之间使用逗号隔开，最后-一个不需要添加</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//Person person = new Person(1,2,3,4,5);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var person = &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name: \"qinjiang\",</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    age: 3,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    tags: ['js' ,'java', 'web','...']</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>取对象的值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>person.name</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>> \"qinjiang\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>person.age</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>> 3</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/02/front/JavaSciprt/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "https://love.youhuamao.xyz/2022/09/02/front/JavaSciprt/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "JavaSciprt数据类型",
            "date_published": "2022-09-01T16:00:00.000Z",
            "content_html": "<h1 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<h2 id=\"多行字符串编写\"><a class=\"anchor\" href=\"#多行字符串编写\">#</a> 多行字符串编写</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//tab上面 esc键 下面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var msg =</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        `he11o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        world</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        你好ya</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        你好`</pre></td></tr></table></figure><h2 id=\"模板字符串\"><a class=\"anchor\" href=\"#模板字符串\">#</a> 模板字符串</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>let name =\"qinjiang\";</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1et age = 3;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1et msg = `你好呀，$&#123;name&#125;`</pre></td></tr></table></figure><h2 id=\"字符串长度\"><a class=\"anchor\" href=\"#字符串长度\">#</a> 字符串长度</h2>\n<ul>\n<li>str.length</li>\n</ul>\n<h2 id=\"string字符串的不可变\"><a class=\"anchor\" href=\"#string字符串的不可变\">#</a> string 字符串的不可变</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console. log(student[0]) >S</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>student[0] = 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>student[0]  >s</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console. log(student) >student</pre></td></tr></table></figure><h2 id=\"大小写转换\"><a class=\"anchor\" href=\"#大小写转换\">#</a> 大小写转换</h2>\n<ul>\n<li>student. toupperCase()</li>\n<li>student. toLowerCase()</li>\n</ul>\n<h2 id=\"寻找指定字符位置\"><a class=\"anchor\" href=\"#寻找指定字符位置\">#</a> 寻找指定字符位置</h2>\n<ul>\n<li>student.indexOf('t')</li>\n</ul>\n<h2 id=\"9-substring\"><a class=\"anchor\" href=\"#9-substring\">#</a> 9、substring</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>student. substring(1) //从第一个字符串截取到最后一个字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>student . substring(1,3) //[1,3)</pre></td></tr></table></figure><h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<h2 id=\"array可以包含任意的数据类型\"><a class=\"anchor\" href=\"#array可以包含任意的数据类型\">#</a> Array 可以包含任意的数据类型</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var arr = [1,2,3,4,5,6,'a'] ; //通过下标取值和赋值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr[0]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr[0] = 1</pre></td></tr></table></figure><h2 id=\"长度\"><a class=\"anchor\" href=\"#长度\">#</a> 长度</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr.length</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>注意:加入给arr.length赋值，数组大小就会发生变化,如果赋值过小，元素就会丢失</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var arr = [1,2,3,4,5,6]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console.log(arr)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>>[1,2,3,4,5,6]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>arr.length</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>>6</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>arr[0] = 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console.log(arr)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>>[0,2,3,4,5,6]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>arr.length = 10</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console.log(arr)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>>[0,2,3,4,5,6,emptyx4]</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>arr.length = 2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console.log(arr)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>>[0,2]</pre></td></tr></table></figure><h2 id=\"indexof-通过元素获得下标索引\"><a class=\"anchor\" href=\"#indexof-通过元素获得下标索引\">#</a> indexOf, 通过元素获得下标索引</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr = [1,2,3,4,5,6,\"1\",\"2\"]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr . index0f(1)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr . index0f(\"1\")</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>>6</pre></td></tr></table></figure><h2 id=\"slice截取array的一部分返回一个新数组类似于string中的substring\"><a class=\"anchor\" href=\"#slice截取array的一部分返回一个新数组类似于string中的substring\">#</a> slice () 截取 Array 的一部分，返回一个新数组，类似于 String 中的 substring</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr = [1,2,3,4,5,6,\"1\",\"2\"]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr.slice(3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>[4, 5, 6, \"1\", \"2\"]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr.slice(1,5)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>>(4) [2, 3, 4, 5]</pre></td></tr></table></figure><h2 id=\"push-pop-尾部\"><a class=\"anchor\" href=\"#push-pop-尾部\">#</a> push (), pop () 尾部</h2>\n<ul>\n<li>push: 压入到尾部</li>\n<li>pop: 弹出尾部的一个元素</li>\n</ul>\n<h2 id=\"5-unshift-shift-头部\"><a class=\"anchor\" href=\"#5-unshift-shift-头部\">#</a> 5、unshift () , shift () 头部</h2>\n<ul>\n<li>unshift: 压入到头部</li>\n<li>shift: 弹出头部的一个元素</li>\n</ul>\n<h2 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h2>\n<ul>\n<li>sort()</li>\n</ul>\n<h2 id=\"元素反转\"><a class=\"anchor\" href=\"#元素反转\">#</a> 元素反转</h2>\n<ul>\n<li>reverse</li>\n</ul>\n<h2 id=\"拼接数组\"><a class=\"anchor\" href=\"#拼接数组\">#</a> 拼接数组</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr = [\"C\"，\"B\",\"A\"']</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr. concat([1,2,3])</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>[\"C\"，\"B\",\"A\"，1，2，3]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>>[\"C\"，\"B\",\"A\"]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>concat并没有修改数组只是返回新的数组</pre></td></tr></table></figure><h2 id=\"连接符join\"><a class=\"anchor\" href=\"#连接符join\">#</a> 连接符 join</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>打印拼接数组，使用特定的字符串连接</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr = [\"C\"， \"B\"\"，\"A\"]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr.join('-')</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>>\"C-B-A\"</pre></td></tr></table></figure><h2 id=\"多维数组\"><a class=\"anchor\" href=\"#多维数组\">#</a> 多维数组</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr=[[1,2],[3,4] ,[\"5\",\"6\"]] ;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr[1][1]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>4</pre></td></tr></table></figure><h1 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var 对象名 = &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    属性名:  属性值，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    属性名:  属性值，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    属性名:  属性值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//定义了一个person对象，它有四个属性!</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>var person = &#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    name: \"kuangshen\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    age: 3,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    emai1 :\" 247 36743@qq. com,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    score: 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>] avascript</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>js中对象，&#123;...&#125; 表示一个对象，键值对描述属性 XXXX : XXXX,多个属性之间使用逗号隔开，最后一个属性不加逗号!</pre></td></tr></table></figure><h2 id=\"对象赋值\"><a class=\"anchor\" href=\"#对象赋值\">#</a> 对象赋值</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person.name = \"qinjiang\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person . name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>'qinjiang'</pre></td></tr></table></figure><h2 id=\"使用一个不存在的对象属性不会报错\"><a class=\"anchor\" href=\"#使用一个不存在的对象属性不会报错\">#</a> 使用一个不存在的对象属性，不会报错！</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person.haha</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>>undefined</pre></td></tr></table></figure><h2 id=\"动态的删减属性通过delete删除对象的属性\"><a class=\"anchor\" href=\"#动态的删减属性通过delete删除对象的属性\">#</a> 动态的删减属性，通过 delete 删除对象的属性</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>delete person. name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>>true</pre></td></tr></table></figure><h2 id=\"动态的添加直接给新的属性添加值即可\"><a class=\"anchor\" href=\"#动态的添加直接给新的属性添加值即可\">#</a> 动态的添加，直接给新的属性添加值即可</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person.haha = \"haha'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>>\"haha\"</pre></td></tr></table></figure><h2 id=\"5-判断属性值是否在这个对象中-xxx-in-xxx\"><a class=\"anchor\" href=\"#5-判断属性值是否在这个对象中-xxx-in-xxx\">#</a> 5、判断属性值是否在这个对象中！xxx in xxx!</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var person = &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name: \"kuangshen\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age: 3,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    emai1 :\" 247 36743@qq. com,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    score: 0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>age in person</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>true</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>//继承</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>tostring' in person</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>true</pre></td></tr></table></figure><h2 id=\"判断一个属性是否是这个对象自身拥有的hasownproperty\"><a class=\"anchor\" href=\"#判断一个属性是否是这个对象自身拥有的hasownproperty\">#</a> 判断一个属性是否是这个对象自身拥有的 hasOwnProperty ()</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person. hasownProperty('tostring')</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>false</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person. hasownProperty(' age')</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>true</pre></td></tr></table></figure><h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Map</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>学生的成绩，学生的名字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>var names = [\"tom\",\"jack\" ，\"haha\"];</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var scores = [100,90,80] ;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>var map = new Map([['tom',100], ['jack',90]，['haha',80]]);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>var name = map. get('tom'); //通过key获得value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>map.set('admin' ,123456); //新增或修改</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>map.delete('tom')  //删除</pre></td></tr></table></figure><h2 id=\"set无序不重复的集合\"><a class=\"anchor\" href=\"#set无序不重复的集合\">#</a> Set: 无序不重复的集合</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set. add(2); //添加</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set. delete(1);  //删除</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console.1og(set.has(3));  是否包含</pre></td></tr></table></figure><h2 id=\"iterator\"><a class=\"anchor\" href=\"#iterator\">#</a> iterator</h2>\n<h3 id=\"遍历数组\"><a class=\"anchor\" href=\"#遍历数组\">#</a> 遍历数组</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过for of // for in下标</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var arr = [3,4,5]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>for (var x of arr)&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console.1og(x)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"遍历map\"><a class=\"anchor\" href=\"#遍历map\">#</a> 遍历 Map</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var map = new Map([[\"tom\"，100]，[\"jack\"，90], [\"haha\"，80]]);</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for (1et x of map)&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console.1og(x) </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"遍历set\"><a class=\"anchor\" href=\"#遍历set\">#</a> 遍历 Set</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var set = new Set([5,6,7]);</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for (let x of set) &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console.1og(x)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "JavaSciprt",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/01/summary/monthly/2022%E5%85%AB%E6%9C%88/",
            "url": "https://love.youhuamao.xyz/2022/09/01/summary/monthly/2022%E5%85%AB%E6%9C%88/",
            "title": "2022年八月总结",
            "date_published": "2022-08-31T16:00:00.000Z",
            "content_html": "<h1 id=\"学习成功\"><a class=\"anchor\" href=\"#学习成功\">#</a> 学习成功</h1>\n<ul>\n<li>在本月对 Java 进行了学习，但是用时超过了我的规定和预期特别多</li>\n<li>看到了一个很好看的博客主题，完成了博客的简单搭建</li>\n<li>学习了简单的 html 和 css</li>\n<li>学会了飞雷神（</li>\n</ul>\n<h1 id=\"反思\"><a class=\"anchor\" href=\"#反思\">#</a> 反思</h1>\n<ul>\n<li>在学习的时候注意里还是不集中，效率不是很高，不然 java 学的过程也不会超时那么多</li>\n<li>应该好好想想该怎么去克服了（学了，但不多）</li>\n</ul>\n",
            "tags": [
                "总结",
                "月度总结",
                "总结"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/08/31/front/css%E7%AC%94%E8%AE%B0/%E6%B5%AE%E5%8A%A8/",
            "url": "https://love.youhuamao.xyz/2022/08/31/front/css%E7%AC%94%E8%AE%B0/%E6%B5%AE%E5%8A%A8/",
            "title": "盒子模型",
            "date_published": "2022-08-30T16:00:00.000Z",
            "content_html": "<h1 id=\"display\"><a class=\"anchor\" href=\"#display\">#</a> display</h1>\n<ul>\n<li>block 块元素</li>\n<li>inline 行内元素</li>\n<li>inline-block 是块元素， 但是可以内联在一行</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>display :block / inline /inline-block</pre></td></tr></table></figure><h1 id=\"浮动\"><a class=\"anchor\" href=\"#浮动\">#</a> 浮动</h1>\n<ul>\n<li>float ：right 右浮</li>\n<li>float ：left  左浮</li>\n<li>clear: right 右侧不允许有浮动元素</li>\n<li>clear: Left 左侧不允许有浮动元素</li>\n<li>clear: both 两侧不允许有浮动元素</li>\n<li>clear: none</li>\n</ul>\n<h1 id=\"父级边框塌陷浮动元素超过父级边框\"><a class=\"anchor\" href=\"#父级边框塌陷浮动元素超过父级边框\">#</a> 父级边框塌陷（浮动元素超过父级边框）</h1>\n<h2 id=\"增加父级边框高度\"><a class=\"anchor\" href=\"#增加父级边框高度\">#</a> 增加父级边框高度</h2>\n<h2 id=\"增加一个空的div标签清除浮动\"><a class=\"anchor\" href=\"#增加一个空的div标签清除浮动\">#</a> 增加一个空的 div 标签，清除浮动</h2>\n<p>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clear&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    clear: both;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    margin: 0;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    padding: 0;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr></table></figure><h2 id=\"overflow\"><a class=\"anchor\" href=\"#overflow\">#</a> overflow</h2>\n<ul>\n<li>在父级元素中增加一个 overf1ow: hidden</li>\n<li>若为 overf1ow: scroll，增加滚动条</li>\n</ul>\n<h1 id=\"父类添加一个伪类\"><a class=\"anchor\" href=\"#父类添加一个伪类\">#</a> 父类添加一个 “伪类”</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#father:after&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content :\" \"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>display:b1ock;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>clear:both;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layer01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> images/1.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layer02<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> images/2.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layer03<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> images/3.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>layer04<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h1>\n<ul>\n<li>浮动元素后面增加空 div<br />\n 简单，代码中尽量避免空 div</li>\n<li>设置父元素的高度<br />\n简单，元素假设有了固定的高度，就会被限制</li>\n<li>overflow<br />\n 简单，下拉的一 些场景避免使用</li>\n<li>父类添加一个伪类: after (推荐)<br />\n 写法稍微复杂一点，但是没有副作用，推荐使用！</li>\n</ul>\n<h1 id=\"对比\"><a class=\"anchor\" href=\"#对比\">#</a> 对比</h1>\n<ul>\n<li>display<br />\n 方向不可以控制</li>\n<li>float<br />\n 浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷的问题～</li>\n</ul>\n<h1 id=\"定位\"><a class=\"anchor\" href=\"#定位\">#</a> 定位</h1>\n<h2 id=\"相对定位\"><a class=\"anchor\" href=\"#相对定位\">#</a> 相对定位</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>相对于自己原来的位置移动，它仍然在标准文档流中，原来的位置会被保留</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>position: relative;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>top: 20px;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1eft: 20px;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bottom: -10px;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>right: 20px;</pre></td></tr></table></figure><h2 id=\"绝对定位\"><a class=\"anchor\" href=\"#绝对定位\">#</a> 绝对定位</h2>\n<ul>\n<li>position: absolute;</li>\n<li>没有父级元素定位的前提下，相对于浏览器定位</li>\n<li>假设父级元素存在定位，我们通常会相对于父级元素进行偏移～</li>\n<li>在父级元素范围内移动</li>\n<li>相对于父级或浏览器的位置，进行指定的偏移，绝对定位的话，它不在在标准文档流中，原来的位置不会被保留</li>\n</ul>\n<h2 id=\"固定定位\"><a class=\"anchor\" href=\"#固定定位\">#</a> 固定定位</h2>\n<ul>\n<li>position: fixed</li>\n<li>定死，类似于返回顶部按钮</li>\n</ul>\n<h2 id=\"图层\"><a class=\"anchor\" href=\"#图层\">#</a> 图层</h2>\n<ul>\n<li>z-index 默认为 0 最高 999</li>\n</ul>\n",
            "tags": [
                "前端",
                "css",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/08/30/front/css%E7%AC%94%E8%AE%B0/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/",
            "url": "https://love.youhuamao.xyz/2022/08/30/front/css%E7%AC%94%E8%AE%B0/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/",
            "title": "盒子模型",
            "date_published": "2022-08-29T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是盒模型\"><a class=\"anchor\" href=\"#什么是盒模型\">#</a> 什么是盒模型</h1>\n<ul>\n<li>一般标签都有默认值</li>\n<li>div 可以确定块</li>\n<li>margin: 外边距</li>\n<li>padding: 内边距</li>\n<li>border: 边框</li>\n</ul>\n<h1 id=\"边框\"><a class=\"anchor\" href=\"#边框\">#</a> 边框</h1>\n<ul>\n<li>border: 粗细，样式，颜色<br />\n border: 1px solid red;<br />\nsolid 黑线<br />\n dashed 虚线</li>\n</ul>\n<h1 id=\"内外边距\"><a class=\"anchor\" href=\"#内外边距\">#</a> 内外边距</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>padding 内边距</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>margin 外边距</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>顺时针旋转</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>margin:0 (上下左右)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>margin:0 1px (上下，左右)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>margin:0 1px 2px 3px (上 右 下 左)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>盒子的计算方式:你这个元素到底多大?</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>margin + border + padding +内容宽度</pre></td></tr></table></figure><h1 id=\"圆角边框\"><a class=\"anchor\" href=\"#圆角边框\">#</a> 圆角边框</h1>\n<ul>\n<li>border-radius: 0px 0px 0px 0px; 左上 右上。右下 左下，顺时针方向</li>\n</ul>\n<h1 id=\"阴影\"><a class=\"anchor\" href=\"#阴影\">#</a> 阴影</h1>\n<ul>\n<li>box-shadow: 10px 10px 100px yellow;</li>\n</ul>\n",
            "tags": [
                "前端",
                "css",
                "前端"
            ]
        }
    ]
}