{
    "version": "https://jsonfeed.org/version/1",
    "title": "幽化猫の博客",
    "subtitle": "生活朗朗，万物可爱",
    "icon": "https://love.youhuamao.xyz/images/favicon.ico",
    "description": "这是一个人的博客",
    "home_page_url": "https://love.youhuamao.xyz",
    "items": [
        {
            "id": "https://love.youhuamao.xyz/2022/10/16/shujuku/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "url": "https://love.youhuamao.xyz/2022/10/16/shujuku/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/",
            "title": "数据库连接池",
            "date_published": "2022-10-15T16:00:00.000Z",
            "content_html": "<h1 id=\"dbcp-c3p0连接池\"><a class=\"anchor\" href=\"#dbcp-c3p0连接池\">#</a> DBCP-C3P0 连接池</h1>\n<p>数据库连接 -- 执行完毕 -- 释放</p>\n<p>连接 -- 释放 是十分浪费系统资源的</p>\n<p>池化技术：准备一些预先的资源，过来就连接预先准备好的</p>\n<p>最小连接数：10 (常用连接)</p>\n<p>最大连接数：100 （业务最高承载上线）</p>\n<p>等待超时：100ms</p>\n<p>编写连接池，实现一个接口 DataSource</p>\n<h2 id=\"开源数据源实现\"><a class=\"anchor\" href=\"#开源数据源实现\">#</a> 开源数据源实现</h2>\n<ul>\n<li>DBCP</li>\n<li>C3p0</li>\n<li>Druid: 阿里巴巴<br />\n使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</li>\n</ul>\n<h2 id=\"dbcp\"><a class=\"anchor\" href=\"#dbcp\">#</a> DBCP</h2>\n<p>需要用到的 jar 包<br />\n commons-dbcp-1.4  commons-pool-1.6</p>\n<ul>\n<li>配置文件 dbcp.properties</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#连接设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">driverClassName</span><span class=\"token operator\">=</span>com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#初始化连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">initialSize</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#最大连接数量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">maxActive</span><span class=\"token operator\">=</span><span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#最大空闲连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">maxIdle</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#最小空闲连接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">minIdle</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#超时等待时间以毫秒为单位 6000 毫秒 / 1000 等于 60 秒</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token assign-left variable\">maxWait</span><span class=\"token operator\">=</span><span class=\"token number\">60000</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#JDBC 驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名 = property;】</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#注意：user 与 password 两个属性会被明确地传递，因此这里不需要包含他们。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token assign-left variable\">connectionProperties</span><span class=\"token operator\">=</span>useUnicode<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>UTF8</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token assign-left variable\">defaultAutoCommit</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#如果没有设置该值，则 “setReadOnly” 方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token assign-left variable\">defaultReadOnly</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#可用值为下列之一：（详情可见 javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token assign-left variable\">defaultTransactionIsolation</span><span class=\"token operator\">=</span>READ_COMMITTED</pre></td></tr></table></figure><ul>\n<li>工具类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> org.apache.commons.dbcp.BasicDataSourceFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> javax.sql.DataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.io.IOException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.io.InputStream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">import</span> java.util.Properties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @ClassName: JDBCDBCPUtils</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/14 <span class=\"token number\">17</span>:48</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>public class JDBCDBCPUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    private static DataSource dataSource <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    static <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            InputStream <span class=\"token keyword\">in</span> <span class=\"token operator\">=</span> JDBCDBCPUtils.class.getClassLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getResourceAsStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"dbcp.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            Properties properties <span class=\"token operator\">=</span> new Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            properties.load<span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //创建数据源 工厂模式</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            dataSource <span class=\"token operator\">=</span> BasicDataSourceFactory.createDataSource<span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>ClassNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 获取连接</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    public static Connection getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        //从数据源中获取连接</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> dataSource.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 释放资源</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    public static void release<span class=\"token punctuation\">(</span>Connection con, Statement st, ResultSet rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                rs.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                st.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>con <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                con.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson02.utils.JDBCUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @ClassName: TestDBCP</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/15 <span class=\"token number\">22</span>:41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>public class TestDBCP <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            con <span class=\"token operator\">=</span> JDBCDBCPUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>) VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //预编译SQL，先写SQL，然后不执行</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">\"钱七\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">\"qianqi@sina.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            st.setDate<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, new java.sql.Date<span class=\"token punctuation\">(</span>new java.util.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JDBCDBCPUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c3p0\"><a class=\"anchor\" href=\"#c3p0\">#</a> C3P0</h2>\n<p>需要用到的 jar 包<br />\n c3p0-0.9.5.5.jar<br />\nmchange-commons-java-0.2.19.jar</p>\n<ul>\n<li>配置文件 c3p0-config.xml</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>?xml <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> <span class=\"token assign-left variable\">encoding</span><span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span>?<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>c3p0-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    c3p0的缺省（默认）配置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    如果在代码中ComboPooledDataSource <span class=\"token assign-left variable\">ds</span><span class=\"token operator\">=</span>new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>这样写就表示使用的是c3p0的缺省（默认）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>default-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"driverClass\"</span><span class=\"token operator\">></span>com.mysql.jdbc.Driver<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbcUrl\"</span><span class=\"token operator\">></span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">serverTimezone</span><span class=\"token operator\">=</span>UTC<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token operator\">></span>root<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token operator\">></span><span class=\"token number\">12345</span><span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"acquiredIncrement\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"initialPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"minPoolSize\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"maxPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/default-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    c3p0的命名配置</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    如果在代码中ComboPooledDataSource <span class=\"token assign-left variable\">ds</span><span class=\"token operator\">=</span>new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>这样写就表示使用的是name是MySQL</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">&lt;</span>name-config <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"MySQL\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"driverClass\"</span><span class=\"token operator\">></span>com.mysql.jdbc.Driver<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"jdbcUrl\"</span><span class=\"token operator\">></span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false<span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">serverTimezone</span><span class=\"token operator\">=</span>UTC<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token operator\">></span>root<span class=\"token operator\">&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token operator\">></span><span class=\"token number\">12345</span><span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"acquiredIncrement\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"initialPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"minPoolSize\"</span><span class=\"token operator\">></span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token operator\">&lt;</span>property <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"maxPoolSize\"</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/property<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/name-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">&lt;</span>/c3p0-config<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>工具类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> com.mchange.v2.c3p0.ComboPooledDataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @ClassName: JDBCC3P0Utils</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/14 <span class=\"token number\">17</span>:48</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>public class JDBCC3P0Utils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    private static DataSource dataSource <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    //private static ComboPooledDataSource dataSource <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    static <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //代码的方式配置</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>//            dataSource <span class=\"token operator\">=</span> new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>//            dataSource.setDriverClass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>//            dataSource.setJdbcUrl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>//            dataSource.setUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>//            dataSource.setPassword<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>//            dataSource.setMaxPoolSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>//            dataSource.setMinPoolSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            //配置文件写法</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            dataSource <span class=\"token operator\">=</span> new ComboPooledDataSource<span class=\"token punctuation\">(</span><span class=\"token string\">\"MySQL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 获取连接</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    public static Connection getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        //从数据源中获取连接</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> dataSource.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 释放资源</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    public static void release<span class=\"token punctuation\">(</span>Connection con, Statement st, ResultSet rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                rs.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                st.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>con <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                con.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>测试类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson05.utils.JDBCC3P0Utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> com.zyy.lesson05.utils.JDBCDBCPUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @ClassName: TestC3P0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: TODO 类描述</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/15 <span class=\"token number\">22</span>:41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>public class TestC3P0 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            con <span class=\"token operator\">=</span> JDBCC3P0Utils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>) VALUES (?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //预编译SQL，先写SQL，然后不执行</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">\"刘八\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">\"liuba@sina.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            st.setDate<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, new java.sql.Date<span class=\"token punctuation\">(</span>new java.util.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JDBCC3P0Utils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<ul>\n<li>无论用什么数据源，本质还是一样的，DataSource 接口不会变，方法就不会变</li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/15/shujuku/JDBC/",
            "url": "https://love.youhuamao.xyz/2022/10/15/shujuku/JDBC/",
            "title": "JDBC",
            "date_published": "2022-10-14T16:00:00.000Z",
            "content_html": "<h1 id=\"数据库驱动\"><a class=\"anchor\" href=\"#数据库驱动\">#</a> 数据库驱动</h1>\n<ul>\n<li>我们的程序会通过数据库驱动，和数据库打交道！</li>\n</ul>\n<h1 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h1>\n<ul>\n<li>SUN 公司为了简化开发人员的 (对数据库的统 - -) 操作，提供了一个 Java 操作数据库的) 规范，俗称 JDBC 这些规范的实现由具体的厂商去做</li>\n<li>对于开发人员来说，我们只需要掌握 JDBC 接口的操作即可！</li>\n</ul>\n<h1 id=\"第一个jdbc程序\"><a class=\"anchor\" href=\"#第一个jdbc程序\">#</a> 第一个 JDBC 程序</h1>\n<ul>\n<li>创建测试数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE DATABASE jdbcstudy CHARACTER SET utf8 COLLATE utf8_general_ci<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token environment constant\">USER</span> jdbcstudy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CREATE TABLE users<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span> INT PRIMARY KEY,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span> DATE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>INSERT INTO users<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>VALUES<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,<span class=\"token string\">'张三'</span>,<span class=\"token string\">'123456'</span>,<span class=\"token string\">'zs@sina.com'</span>,<span class=\"token string\">'1980-12-04'</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>,<span class=\"token string\">'李四'</span>,<span class=\"token string\">'123456'</span>,<span class=\"token string\">'lisi@sina.com'</span>,<span class=\"token string\">'1981-12-04'</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span>,<span class=\"token string\">'王五'</span>,<span class=\"token string\">'123456'</span>,<span class=\"token string\">'wangwu@sina.com'</span>,<span class=\"token string\">'1982-12-04'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>创建一个普通项目</li>\n<li>导入数据库驱动（jar 包）（版本要对应）</li>\n<li>编写测试代码</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">import</span> java.sql.DriverManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @ClassName: JDBCDemo01</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 我的第一个JDBC程序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: zyy</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Date: <span class=\"token number\">2021</span>/07/13 <span class=\"token number\">21</span>:59</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version: <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>public class JDBCDemo01 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> throws ClassNotFoundException, SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        //1.加载驱动</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>//        DriverManager.registerDriver<span class=\"token punctuation\">(</span>new com.mysql.jdbc.Driver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        //推荐这种写法加载驱动</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Class.forName<span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        //2.用户信息和URL</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        // <span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>true可能会报错</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        String url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        String userName <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        String passWord <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        //3.连接成功，数据库对象 Connection代表数据库</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Connection connection <span class=\"token operator\">=</span> DriverManager.getConnection<span class=\"token punctuation\">(</span>url, userName, passWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        //4.执行SQl的对象 Statement 执行的sql对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        //5.执行SQL的对象 去 执行SQL ，可能存在结果，查看返回的结果</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        //返回的结果集 结果集中封装了我们全部的查询的结果</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ResultSet resultSet <span class=\"token operator\">=</span> statement.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"id=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"password=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"email=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"birthday=\"</span>+resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token string\">\"birthday\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"===============================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        //6.释放连接</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        resultSet.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        statement.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        connection.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>步骤</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>加载驱动</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>连接数据库DriverManager</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>获取执行SQL的对象 Statement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>获得返回的结果集</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>释放连接</pre></td></tr></table></figure><h1 id=\"对jdbc中对象解释\"><a class=\"anchor\" href=\"#对jdbc中对象解释\">#</a> 对 JDBC 中对象解释</h1>\n<ul>\n<li>DriverManager</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//1.加载驱动</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//DriverManager.registerDriver<span class=\"token punctuation\">(</span>new com.mysql.jdbc.Driver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Class.forName<span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#固定写法加载驱动</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Connection connection <span class=\"token operator\">=</span> DriverManager.getConnection<span class=\"token punctuation\">(</span>url, userName, passWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// connection代表数据库</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// 数据库设置自动提交</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>// 事务提交</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>// 事务回滚</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>connection.setAutoCommit<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>connection.commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>connection.rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>URL</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// mysql默认端口3306</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 协议://主机地址:端口号/数据库名?参数1<span class=\"token operator\">&amp;</span>参数2<span class=\"token operator\">&amp;</span>参数3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// oracle默认端口1521</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// jdbc:oracle:thin:@localhost:1521:sid</pre></td></tr></table></figure><ul>\n<li>Statement 执行 sql 对象 、 PreparedStatement 执行 sql 对象</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users\"</span><span class=\"token punctuation\">;</span>//编写SQL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>statement.executeQuery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//执行查询 返回ResultSet</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>statement.execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//执行任何SQL</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>statement.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//新增，删除，修改，都用这个，返回受影响的行数</pre></td></tr></table></figure><ul>\n<li>获得指定的数据类型</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet.getObject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//在不知道列类型的情况下使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//如果知道列类型，就使用指定的类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>resultSet.getString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>resultSet.getInt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>resultSet.getDouble<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>resultSet.getBigDecimal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>resultSet.getFloat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>resultSet.getDate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//<span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><ul>\n<li>遍历，指针</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet.beforeFirst<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到最前面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>resultSet.afterLast<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到最后面</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>resultSet.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到下一个数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>resultSet.previous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到前一行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>resultSet.absolute<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//移动到指定行</pre></td></tr></table></figure><ul>\n<li>释放资源</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>statement.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>connection.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//消耗资源</pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - create</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into user(...) values(...)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int num <span class=\"token operator\">=</span> statement.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - delete</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"delete from user where id=1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int num <span class=\"token operator\">=</span> statement.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - update</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update user set name='' where name =''\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int num <span class=\"token operator\">=</span> statement.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"修改成功~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>CRUD 操作 - read</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Statement statement <span class=\"token operator\">=</span> connection.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ResultSet resultSet <span class=\"token operator\">=</span> statement.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    //根据获取列的数据类型，分别调用resultSet的相应方法映射到java对象中</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"增删查改\"><a class=\"anchor\" href=\"#增删查改\">#</a> 增删查改</h1>\n<ul>\n<li>工具类</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.io.IOException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.io.InputStream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.DriverManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">import</span> java.util.Properties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>public class JdbcUtils <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    private static String driver <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    private static String url <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    private static String username <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    private static String password <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    static <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            InputStream <span class=\"token keyword\">in</span> <span class=\"token operator\">=</span> JdbcUtils.class.getClassLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getResourceAsStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"db.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Properties properties <span class=\"token operator\">=</span> new Properties<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            properties.load<span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            driver <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            url <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            username <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            password <span class=\"token operator\">=</span> properties.getProperty<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            //驱动只用加载一次</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            Class.forName<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>ClassNotFoundException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 获取连接</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    public static Connection getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws SQLException <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> DriverManager.getConnection<span class=\"token punctuation\">(</span>url, username, password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 释放资源</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    public static void release<span class=\"token punctuation\">(</span>Connection con, Statement st, ResultSet rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                rs.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                st.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>con <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                con.close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>db.properties</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">driver</span><span class=\"token operator\">=</span>com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">url</span><span class=\"token operator\">=</span>jdbc:mysql://localhost:3306/jdbcstudy?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">characterEncoding</span><span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">useSSL</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">username</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>g123698745</pre></td></tr></table></figure><ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestInsert <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>)<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> +</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token string\">\"VALUES (5,'钱七','123456','qianqi@sina.com','1988-12-04')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestDelete <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM users WHERE <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>=5\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>更新</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestUpdate <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE users SET birthday='1990-12-01' WHERE id=1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"更新成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>查询</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class TestDelete <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users WHERE id=1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"id=\"</span>+rs.getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sql注入\"><a class=\"anchor\" href=\"#sql注入\">#</a> sql 注入</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.Statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public class SQLQuestion <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        //正常登录</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>//        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span>,<span class=\"token string\">\"1234567\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        //sql注入</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"' or '1=1\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 登录业务</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    public static void login<span class=\"token punctuation\">(</span>String userName, String password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        Statement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st <span class=\"token operator\">=</span> con.createStatement<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users WHERE <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>='\"</span>+userName+<span class=\"token string\">\"' AND <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>='\"</span>+password+<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            // SELECT * FROM <span class=\"token function\">users</span> WHERE <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span><span class=\"token operator\">=</span><span class=\"token string\">''</span> or <span class=\"token string\">'1=1'</span> AND <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span><span class=\"token operator\">=</span><span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"password=\"</span>+rs.getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"preparedstatement对象\"><a class=\"anchor\" href=\"#preparedstatement对象\">#</a> PreparedStatement 对象</h1>\n<p>可以防止 SQL 注入，效率更高</p>\n<ul>\n<li>插入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestInster <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //区别</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO users(<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">id</span><span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>email<span class=\"token variable\">`</span></span>,<span class=\"token variable\"><span class=\"token variable\">`</span>birthday<span class=\"token variable\">`</span></span>) values(?,?,?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译SQL，先写sql，然后不执行</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">\"钱七\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">\"qianqi@sina.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            //注意点:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            //sqL.Date  数据库  java. sql.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            //util.Date    Java     new Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>获得时间戳</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setDate<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, new java.sql.Date<span class=\"token punctuation\">(</span>new java.util.Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.getTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            //执行</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>更新</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>public class TestUpdate  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            //区别</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update users set 'NAME' =?  where id=?;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译SQL，先写sql，然后不执行</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,<span class=\"token string\">\"幽化猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            //执行</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"更新成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>public class TestDelete  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            //区别</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //使用?占位符代替参数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"delete from users where id=?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译SQL，先写sql，然后不执行</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            //手动给参数赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //执行</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            int num <span class=\"token operator\">=</span> st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>查询</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson03<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestSelect <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Connection conn <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            conn <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from users where id = ?\"</span><span class=\"token punctuation\">;</span>//编写SQL</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            st <span class=\"token operator\">=</span> conn.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //预编译</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st.setInt<span class=\"token punctuation\">(</span><span class=\"token number\">1,1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//传递参数</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //执行</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            if<span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span>rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            throw new RuntimeException<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>conn,st,rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>防注入</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson02.utils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> java.sql.*<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>public class SqlQuestion <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        //正常登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        //sql注入</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        login<span class=\"token punctuation\">(</span><span class=\"token string\">\"' or '1=1\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    /**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 登录业务</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    public static void login<span class=\"token punctuation\">(</span>String username, String password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            // PreparedStatement 防止SQL注入的本质，把传递进来的参数当做字符</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            // 假设其中存在转义字符，比如说<span class=\"token string\">'会被直接转义'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            String sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM users WHERE <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>=? AND <span class=\"token variable\"><span class=\"token variable\">`</span>password<span class=\"token variable\">`</span></span>=?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>,username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            st.setString<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>,password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            rs <span class=\"token operator\">=</span> st.executeQuery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //查询完毕会返回一个结果集</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs.next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"password=\"</span>+rs.getInt<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span>+rs.getString<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=====================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"使用idea连接数据库\"><a class=\"anchor\" href=\"#使用idea连接数据库\">#</a> 使用 IDEA 连接数据库</h1>\n<ul>\n<li>连接不上的话，可以看 Drivers，配置对应的 mysql 版本</li>\n</ul>\n<h1 id=\"jdbc事务\"><a class=\"anchor\" href=\"#jdbc事务\">#</a> JDBC 事务</h1>\n<p><mark>要么都成功，要么都失败</mark></p>\n<ul>\n<li>ACID 原则</li>\n</ul>\n<p>原子性：要么全部成功，要么全部失败</p>\n<p>一致性：总数不变</p>\n<p>隔离性：多个进程互不干扰</p>\n<p>持久性：一旦提交不可逆，持久化到数据库了</p>\n<ul>\n<li>隔离性的问题：</li>\n</ul>\n<p>脏读：一个事务读取了另外一个没有提交的事务</p>\n<p>不可重复读：在同一个事务内，重复读取表中数据，表数据发生了改变</p>\n<p>幻读：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</p>\n<ul>\n<li>代码实现</li>\n</ul>\n<p>开启事务 con.setAutoCommit (false);<br />\n 一组业务执行完毕，提交事务<br />\n可以在 catch 语句中显示的定义回滚语句，但是默认失败就会回滚<br />\n正常情况：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson04<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestTransaction1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        PreparedStatement st <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            con <span class=\"token operator\">=</span> JdbcUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            //关闭自动提交 自动会开启事务</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            con.setAutoCommit<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//开启事务</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            // A 转 B <span class=\"token number\">100</span>元</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            String sql1 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money-100 where name='A'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            String sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money+100 where name='B'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            st <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            //业务完毕，提交事务</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            con.commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"A 转 B 100元 成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                con.rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                ex.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            JdbcUtils.release<span class=\"token punctuation\">(</span>con, st, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>异常情况</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package com.kuang.lesson04<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> com.kuang.lesson02.utils.JdbcUtils<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.sql.Connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">import</span> java.sql.PreparedStatement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">import</span> java.sql.ResultSet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">import</span> java.sql.SQLException<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public class TestTransaction1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    public static void main<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Connection con <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        PreparedStatement <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ResultSet rs <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            con <span class=\"token operator\">=</span> JDBCUtils.getConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            //关闭自动提交 自动会开启事务</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            con.setAutoCommit<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//开启事务</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            // A 转 B <span class=\"token number\">100</span>元</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            String sql1 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money-100 where name='A'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            ps.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            //默认失败</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            int x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>/0<span class=\"token punctuation\">;</span> //一定会异常</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            String sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money+100 where name='B'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">ps</span> <span class=\"token operator\">=</span> con.prepareStatement<span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            ps.executeUpdate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            //业务完毕，提交事务</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            con.commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            System.out.println<span class=\"token punctuation\">(</span><span class=\"token string\">\"A 转 B 100元 成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            e.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            //如果异常，默认也会回滚，下面不写也可以</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>//            try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>//                con.rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>//            <span class=\"token punctuation\">&#125;</span> catch <span class=\"token punctuation\">(</span>SQLException ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>//                ex.printStackTrace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>//            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            JDBCUtils.release<span class=\"token punctuation\">(</span>con, ps, rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%92%8C%E5%A4%87%E4%BB%BD/",
            "url": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%92%8C%E5%A4%87%E4%BB%BD/",
            "title": "权限管理和备份",
            "date_published": "2022-10-14T16:00:00.000Z",
            "content_html": "<h1 id=\"用户管理\"><a class=\"anchor\" href=\"#用户管理\">#</a> 用户管理</h1>\n<ul>\n<li>\n<p>创建用户 CREATE USER 用户名 IDENTIFIED BY ' 密码'<br />\nCREATE USER kuangshen IDENTIFIED BY ' 123456'</p>\n</li>\n<li>\n<p>修改密码 (修改当前用户密码)<br />\nSET PASSWORD = PASSWORD(' 123456')</p>\n</li>\n<li>\n<p>修改密码 (修改指定用户密码)<br />\nSET PASSWORD FOR kuangshen = PASSWORD('111111')</p>\n</li>\n<li>\n<p>重命名 RENAME USER 原来名字 TO 新的名字<br />\n RENAME USER kuangshen TO kuangshen2</p>\n</li>\n<li>\n<p>用户授权 ALL PRIVILEGES 全部的权限，库，表</p>\n</li>\n<li>\n<p>ALL PRIVILEGES 除了给别人授权什么都能干<br />\n GRANT ALL PRIVILEGES ON <em>.</em> TO name</p>\n</li>\n<li>\n<p>查询权限<br />\n SHOW GRANTS FOR kuangshen2 -- 查看指定用户的权限<br />\n SHOW GRANTS FOR root@l ocal host</p>\n</li>\n</ul>\n<p>ROOT 用户权限: GRANT ALL PRIVILEGES ON <em>.</em> TO 'root'@'localhost' WITH GRANT OPTION</p>\n<ul>\n<li>\n<p>撤销权限 REVOKE 哪些权限，在哪个库撤销， 给谁撤销<br />\n REVOKE  ALL PRIVILEGES ON <em>.</em> FROM name</p>\n</li>\n<li>\n<p>删除用户<br />\n DROP USER username</p>\n</li>\n</ul>\n<h1 id=\"mysql备份\"><a class=\"anchor\" href=\"#mysql备份\">#</a> MySQL 备份</h1>\n<h2 id=\"为什么要备份\"><a class=\"anchor\" href=\"#为什么要备份\">#</a> 为什么要备份</h2>\n<ul>\n<li>保证重要的数据不丢失</li>\n<li>数据转移</li>\n</ul>\n<h2 id=\"mysql数据库备份的方式\"><a class=\"anchor\" href=\"#mysql数据库备份的方式\">#</a> MySQL 数据库备份的方式</h2>\n<ul>\n<li>直接拷贝物理文件</li>\n<li>在 Sqlyog 这种可视化工具中手动导出<br />\n在想要导出的表或者库中，右键，选择备份或导出</li>\n<li>使用命令行导出 mysqldump 命令行使用 （需要先配置环境）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 > 物理磁盘位置 / 文件名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-hlocalhost</span> <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p123456</span> school student <span class=\"token operator\">></span>D:/a.sq1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表 1 表 2 表 3 > 物理磁盘位置 / 文件名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-hlocalhost</span> <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p123456</span> school student <span class=\"token operator\">></span>D:/a.sq1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 > 物理磁盘位置 / 文件名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mysqldump <span class=\"token parameter variable\">-hlocalhost</span> <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p123456</span> school<span class=\"token operator\">></span>D:/a.sq1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#导入</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#登录的情况下，切换到指定的数据库</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># source 备份文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">source</span> d:/a.sq1 I</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mysq1 <span class=\"token parameter variable\">-u</span> 用户名 <span class=\"token parameter variable\">-p</span> 密码 库名<span class=\"token operator\">&lt;</span>备份文件</pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E8%A7%84%E8%8C%83%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://love.youhuamao.xyz/2022/10/15/shujuku/%E8%A7%84%E8%8C%83%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "规范设计数据库",
            "date_published": "2022-10-14T16:00:00.000Z",
            "content_html": "<h1 id=\"为什么需要设计\"><a class=\"anchor\" href=\"#为什么需要设计\">#</a> 为什么需要设计</h1>\n<ul>\n<li>当数据库比较复杂的时候，我们就需要设计了</li>\n<li>糟糕的数据库设计:<br />\n 数据冗余，浪费空间<br />\n数据库插入和删除都会麻烦、异常 [屏蔽使用物理外键]<br />\n 程序的性能差</li>\n<li>良好的数据库设计:<br />\n 节省内存空间<br />\n保证数据库的完整性<br />\n方便我们开发系统</li>\n<li>软件开发中，关于数据库的设计<br />\n分析需求：分析业务和需要处理的数据库的需求<br />\n概要设计：设计关系图 E-R 图</li>\n</ul>\n<h1 id=\"三大范式\"><a class=\"anchor\" href=\"#三大范式\">#</a> 三大范式</h1>\n<ul>\n<li>第一范式 (1NF)<br />\n 原子性：保证每一列不可再分</li>\n<li>第二范式 (2NF)<br />\n 前提：满足第一范式<br />\n每张表只描述一件事情</li>\n<li>第三范式 (3NF)<br />\n 前提：满足第一范式和第二范式<br />\n第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</li>\n</ul>\n<h1 id=\"规范性和性能问题\"><a class=\"anchor\" href=\"#规范性和性能问题\">#</a> 规范性和性能问题</h1>\n<ul>\n<li>关联查询的表不得超过三张表</li>\n<li>考虑商业化的需求和目标，(成本， 用户体验！) 数据库的性能更加重 要</li>\n<li>在规范性能的问题的时候，需要适当的考虑一下 规范性！</li>\n<li>故意给某些表增加一 - 些冗余的字段。(从多表查询中变为单表查询)</li>\n<li>故意增加一些计算列 (从大数据量降低为小数据量的查询：索引)</li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/14/shujuku/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "url": "https://love.youhuamao.xyz/2022/10/14/shujuku/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "title": "MySQL常用函数",
            "date_published": "2022-10-13T16:00:00.000Z",
            "content_html": "<p>官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2Z1bmMtb3Atc3VtbWFyeS1yZWYuaHRtbA==\">https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html</span></p>\n<h1 id=\"常用函数\"><a class=\"anchor\" href=\"#常用函数\">#</a> 常用函数</h1>\n<h2 id=\"数学运算\"><a class=\"anchor\" href=\"#数学运算\">#</a> 数学运算</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT ABS<span class=\"token punctuation\">(</span>-8<span class=\"token punctuation\">)</span> --绝对值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT CEILING<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> --向上取整.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> --向下取整</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --返回一个0~1之间的随机数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT SIGN <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--判断一个数的符号 <span class=\"token number\">0</span>-0 负数返回-1，正数返回1</pre></td></tr></table></figure><h2 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECTCHAR_LENGTH<span class=\"token punctuation\">(</span><span class=\"token string\">'即使再小的帆也能远航'</span><span class=\"token punctuation\">)</span>--字符串长度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'我'</span>，<span class=\"token string\">'爱'</span>, <span class=\"token string\">'你们'</span><span class=\"token punctuation\">)</span> --拼接字符串</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT INSERT <span class=\"token punctuation\">(</span><span class=\"token string\">'我爱编程helloworld'</span>,1,2, <span class=\"token string\">'超级热爱'</span><span class=\"token punctuation\">)</span> --查询，从某个位置开始替换某个长度<span class=\"token punctuation\">(</span>从1开始，而不是0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT LOWER<span class=\"token punctuation\">(</span><span class=\"token string\">'KuangShen'</span><span class=\"token punctuation\">)</span> --小写字母</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT UPPER <span class=\"token punctuation\">(</span><span class=\"token string\">'KuangShen'</span><span class=\"token punctuation\">)</span> --大写字母</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SELECT INSTR <span class=\"token punctuation\">(</span><span class=\"token string\">'kuangshen'</span>,<span class=\"token string\">'h'</span><span class=\"token punctuation\">)</span> --返回第一次出现的子串的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT REPLACE<span class=\"token punctuation\">(</span><span class=\"token string\">'狂神说坚持就能成功，'</span>坚持<span class=\"token string\">',努力) -- 替换出现的指定字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SELECT SUBSTR('</span>狂神说坚持就能成功，4,6<span class=\"token punctuation\">)</span> --返回指定的子字符串<span class=\"token punctuation\">(</span>源字符串,截取的位置，截取的长度<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SELECT REVERSE<span class=\"token punctuation\">(</span><span class=\"token string\">'清晨我上马'</span><span class=\"token punctuation\">)</span> --反转</pre></td></tr></table></figure><h2 id=\"查询姓-周的同学\"><a class=\"anchor\" href=\"#查询姓-周的同学\">#</a> 查询姓 周的同学</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT REPLACE <span class=\"token punctuation\">(</span>studentname ,<span class=\"token string\">'周'</span>,<span class=\"token string\">'邹'</span><span class=\"token punctuation\">)</span> FROM student</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NHERE Studentname LIKE <span class=\"token string\">'周%'</span></pre></td></tr></table></figure><h2 id=\"时间和日期函数\"><a class=\"anchor\" href=\"#时间和日期函数\">#</a> 时间和日期函数</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT CURRENT DATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --获取当前日期</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT CURDATE <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --获取当前日期</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT NOW <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --获取当前的时间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT LOCALTIME<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --本地时间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT SYSDATE <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> --系统时间</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SELECT YEAR <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT MONTH <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SELECT DAY <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SELECT HOUR <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SELECT MINUTE <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>SELECT SECOND <span class=\"token punctuation\">(</span>NOW<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr></table></figure><h2 id=\"系统\"><a class=\"anchor\" href=\"#系统\">#</a> 系统</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT SYSTEM_USER<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT USERO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT VERSION<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"聚合函数\"><a class=\"anchor\" href=\"#聚合函数\">#</a> 聚合函数</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>都能够统计表中的数据 <span class=\"token punctuation\">(</span>想查询一一个表中有多少个记录，就使用这个count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT COUNT <span class=\"token punctuation\">(</span><span class=\"token string\">'BornDate'</span><span class=\"token punctuation\">)</span> FROM student<span class=\"token punctuation\">;</span> -- Count <span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span>，会忽略所有的null值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT COUNT <span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span> FROM student<span class=\"token punctuation\">;</span> -- Count <span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span>，不会忽略null值，本质 计算行数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT COUNT <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> FROM result<span class=\"token punctuation\">;</span> -- Count <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>，不会忽略忽略所有的null值本质计算行数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT SUM <span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResult'</span><span class=\"token punctuation\">)</span> AS总和FROM result</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SELECT AVG<span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResulti'</span><span class=\"token punctuation\">)</span> AS平均分FROM result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT MAX <span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResult'</span><span class=\"token punctuation\">)</span> AS最高分FROM result</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SELECT MIN<span class=\"token punctuation\">(</span><span class=\"token string\">'StudentResult'</span><span class=\"token punctuation\">)</span> AS最低分FROM result</pre></td></tr></table></figure><h1 id=\"md5加密\"><a class=\"anchor\" href=\"#md5加密\">#</a> MD5 加密</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ICREATE TABLE <span class=\"token string\">'testmd5'</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'name'</span>VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--明文密码</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>INSERT INTO testmd5 VALUES <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">' zhangsan'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token string\">'lisi'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token string\">'wangwu'</span>, <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--加密</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>UPDATE testmd5 SET <span class=\"token assign-left variable\">pwd</span><span class=\"token operator\">=</span>MD5 <span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>UPDATE testmd5 SET <span class=\"token assign-left variable\">pwd</span><span class=\"token operator\">=</span>MD5 <span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span> -- 加密全部的密码</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>--插入的时候加密</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>INSERT INTO testmd5 VALUES<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token string\">'xiaoming'</span> ,MD5<span class=\"token punctuation\">(</span><span class=\"token string\">' 123456'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--如何校验:将用户传递进来的密码，进行md5加密，然后比对加密后的值</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>SELECT * FROM testmd5 WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'xiaoming'</span> AND <span class=\"token assign-left variable\">pwd</span><span class=\"token operator\">=</span>MD5 <span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/14/shujuku/%E4%BA%8B%E5%8A%A1/",
            "url": "https://love.youhuamao.xyz/2022/10/14/shujuku/%E4%BA%8B%E5%8A%A1/",
            "title": "事务",
            "date_published": "2022-10-13T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是事务\"><a class=\"anchor\" href=\"#什么是事务\">#</a> 什么是事务</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>要么都成功，要么都失败</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>、SQL执行 A给B转账     A <span class=\"token number\">1000</span> --<span class=\"token operator\">></span><span class=\"token number\">200</span> B <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>、SQL执行 B收到A的钱   A <span class=\"token number\">800</span>  --<span class=\"token operator\">></span> B <span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>将一组SQL放在一个批次中去执行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>事务原则: ACID原则 原子性，-致性，隔离性，持久性 <span class=\"token punctuation\">(</span>脏读，幻读<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>原子性<span class=\"token punctuation\">(</span>Atomicity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>要么都成功，要么都失败、</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>一致性 <span class=\"token punctuation\">(</span>Consistency<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>事务前后的数据完整性要保证一致</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>隔离性<span class=\"token punctuation\">(</span>Isolation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>事务的隔离性是多个用户并发访问数据库时,数据库为每一个用户开启的事务 ，不能被其他事务的操作数据所干扰，事务之间要相互隔离。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>持久性<span class=\"token punctuation\">(</span>Durability<span class=\"token punctuation\">)</span> --- 事务提交</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>事务一旦提交则不可逆，被持久化到数据库中<span class=\"token operator\">!</span></pre></td></tr></table></figure><h1 id=\"隔离所导致的问题\"><a class=\"anchor\" href=\"#隔离所导致的问题\">#</a> 隔离所导致的问题</h1>\n<ul>\n<li>脏读:<br />\n 指一个事务读取了另外 - 个事务未提交的数据。</li>\n<li>不可重复读:<br />\n 在一个事务内读取表中的某 - - 行数据， 多次读取结果不同。(这个不一 定是错误，只是某些场合不对)</li>\n<li>虚读 (幻读)<br />\n 是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。</li>\n</ul>\n<h1 id=\"手动事务\"><a class=\"anchor\" href=\"#手动事务\">#</a> 手动事务</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--mysql是默认开启事务自动提交的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SET <span class=\"token assign-left variable\">autocommit</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span> /*关闭*/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span> /*开启<span class=\"token punctuation\">(</span>默认的<span class=\"token punctuation\">)</span> */</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--手动处理事务</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span> -- 关闭自动提交</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--事务开启</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>START TRANSACTION -- 标记一个事务的开始，从这个之后的sql 都在同一个事务内</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>INSERT XX</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>INSERT XX</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>--提交:持久化<span class=\"token punctuation\">(</span>成功<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>COMMIT</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>--回滚:回到的原来的样子<span class=\"token punctuation\">(</span>失败<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ROLLBACK</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-- 事务结束</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span> --开启自动提交</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>--了解 </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>SAVEPOINT 保存点名 --设置一个事务的保存点</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>ROLLBACK TO SAVEPOINT 保存点名 --回滚到保存点</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>RELEASE SAVEPOINT 保存点名 -- 撤销保存点</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>实例转账</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>CREATE DATABASE shop CHARACTER SET utf8 COLLATE utf8_general_ci</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>USE shop</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>CREATE TABLE <span class=\"token string\">'account'</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token string\">'id'</span> INT <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> NOT NULL AUTO INCREMENT</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token string\">'money'</span> DECIMAL<span class=\"token punctuation\">(</span><span class=\"token number\">9,2</span><span class=\"token punctuation\">)</span> NOT NULL,  <span class=\"token punctuation\">(</span>一共最多有九位，小数占两位<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span> INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>INSERT INTO account <span class=\"token punctuation\">(</span> <span class=\"token string\">'name'</span>,<span class=\"token string\">'moneyi'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span>,2000.00<span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span>,10000.00<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>--模拟转账:事务</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> I 一关闭自动提交</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>START TRANSACTION --开启一个事务</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>UPDATE account SET <span class=\"token assign-left variable\">money</span><span class=\"token operator\">=</span>money-500 WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span> --A减500</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>UPDATE account SET <span class=\"token assign-left variable\">money</span><span class=\"token operator\">=</span>money+500 WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span> -- A加500</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>COMMIT<span class=\"token punctuation\">;</span> -- 提交事务</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>ROLLBACK<span class=\"token punctuation\">;</span> --回滚</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>SET autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> -- 恢复默认值</pre></td></tr></table></figure><h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<ul>\n<li>MySQL 官方对索引的定义为：索引 (Index) 是帮助 MySQL 高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。</li>\n</ul>\n<h2 id=\"索引的分类\"><a class=\"anchor\" href=\"#索引的分类\">#</a> 索引的分类</h2>\n<ul>\n<li>主键索引 (PRIMARY KEY): 唯一的标识，主键不可重复，只能有一个列作为主键</li>\n<li>唯一索引 (UNIQUE KEY): 避免重复的列出现，唯一 - 索弓 可以重复，多个列都可以标识位唯一索引</li>\n<li>常规索引 (KEY/INDEX): 默认的，index。 key 关键字来设置</li>\n<li>全文索引 (FullText): 在特定的数据库引 | 擎下才有，MyISAM, 快速定位数据</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>索引的使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SHOW INDEX FROM student -- 示所有的索引信息</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--增加一个全文索引<span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span>  列名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ALTER TABLE school.student ADD FULLTEXT INDEX <span class=\"token string\">'studentName'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'studentName'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-- EXPLAIN 分析sql执行的状况</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>EXPLAIN SELECT * FROM student<span class=\"token punctuation\">;</span> -- 非全文索引</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SELECT * FROM student WHERE MATCH <span class=\"token punctuation\">(</span>studentName<span class=\"token punctuation\">)</span> AGAINST<span class=\"token punctuation\">(</span><span class=\"token string\">'刘'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"自定义函数\"><a class=\"anchor\" href=\"#自定义函数\">#</a> 自定义函数</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DELIMITER <span class=\"token variable\">$$</span> -- 写函数之前必须要写，标志</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CREATE FUNCTION mock_data <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>RETURNS INT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BEGIN</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DECLARE num INT DEFAULT <span class=\"token number\">1</span> 000000<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DECLARE i INT DEFAULT <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    WHILE i<span class=\"token operator\">&lt;</span>num DO</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        INSERT INTO app_user<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span>,<span class=\"token string\">'email'</span> ,<span class=\"token string\">'phone'</span>，<span class=\"token string\">'gender'</span>,<span class=\"token string\">'password'</span>,<span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        VALUES <span class=\"token punctuation\">(</span>CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'用户'</span>，i<span class=\"token punctuation\">)</span>,<span class=\"token string\">'24736743@qq.com'</span>,CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'18'</span>,FLOOR<span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token number\">999999999</span>-100000000<span class=\"token punctuation\">)</span> +100000000<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>FLOOR <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> *2<span class=\"token punctuation\">)</span> ,UUID<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> , </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        FLOOR<span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> *100<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        SET i <span class=\"token operator\">=</span> i + <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    END WHILE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    RETURN i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>END<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>-- id_表名_字段名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token parameter variable\">--CREATE</span> INDEX 索引名 on 表<span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>CREATE INDEX id_app_user_name ON app_user <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>SELECT * FROM app_ _user WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token string\">'用户9999'</span><span class=\"token punctuation\">;</span> -- <span class=\"token number\">0.001</span> sec</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>SELECT * FROM app_ _user WHERE <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token string\">'用户9999'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>EXPLAIN SELECT * FROM app_ _user WHERE、name’ <span class=\"token operator\">=</span><span class=\"token string\">'用户9999'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>索引在小数据量的时候，用户不大，但是在大数据的时候，区别十分明显</pre></td></tr></table></figure><h1 id=\"索引原则\"><a class=\"anchor\" href=\"#索引原则\">#</a> 索引原则</h1>\n<ul>\n<li>索引不是越多越好</li>\n<li>不要对进程变动数据加索引</li>\n<li>小数据量的表不需要加索引</li>\n<li>索引一般加在常用来查询的字段上</li>\n</ul>\n<h1 id=\"索引的数据结构\"><a class=\"anchor\" href=\"#索引的数据结构\">#</a> 索引的数据结构</h1>\n<ul>\n<li>Hash 类型的索弓 |</li>\n<li>Btree : InnoDB 的默认数据结构～</li>\n<li>阅读：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY29kaW5nbGFicy5vcmcvYXJ0aWNsZXMvdGhlb3J5LW9mLW15c3FsLWluZGV4Lmh0bWw=\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</span></li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/13/shujuku/DQL%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/",
            "url": "https://love.youhuamao.xyz/2022/10/13/shujuku/DQL%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/",
            "title": "DQL查询数据",
            "date_published": "2022-10-12T16:00:00.000Z",
            "content_html": "<h1 id=\"dql\"><a class=\"anchor\" href=\"#dql\">#</a> DQL</h1>\n<ul>\n<li>Data Query LANGUAGE : 数据查询语言</li>\n<li>所有的查询操作都用它 Select</li>\n<li>简单的查询，复杂的查询它都能做</li>\n<li>数据库中最核心的语言</li>\n<li>使用频率最高的语句</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT语法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT <span class=\"token punctuation\">[</span>ALL <span class=\"token operator\">|</span> DISTINCT<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>* <span class=\"token operator\">|</span> table.* <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>table.field1<span class=\"token punctuation\">[</span>as alias1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>,table.field2<span class=\"token punctuation\">[</span>as alias2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FROM table_ name <span class=\"token punctuation\">[</span>as table_ alias<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span>left <span class=\"token operator\">|</span> right <span class=\"token operator\">|</span> inner <span class=\"token function\">join</span> table_ name2<span class=\"token punctuation\">]</span> --联合查询</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span>WHERE<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>      -- 指定结果需满足的条件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span>GROUP BY <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>  -- 指定结果按照哪几个字段来分组</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span>HAVING<span class=\"token punctuation\">]</span>    -- 过滤分组的记录必须满足的次要条件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span>ORDER BY <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>  -- 指定查询记录按一个或多个条件排序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">[</span>LIMIT <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span>offset,<span class=\"token punctuation\">]</span>row_ count <span class=\"token operator\">|</span> row_ countOFFSET offset<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    --指定查询的记录从哪条至哪条</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>注意:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>括号代表可选的, <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>括号代表必选得</pre></td></tr></table></figure><h1 id=\"指定查询字段\"><a class=\"anchor\" href=\"#指定查询字段\">#</a> 指定查询字段</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--查询全部的学生</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT 字段 FROM 表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT * FROM student</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--查询指定字段</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM student</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--别名，给结果起一个名字 AS 可以给字段起别名，也可以给表起别名</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span> AS 学号，<span class=\"token string\">'StudentName'</span> AS 学生姓名 FROM student AS s</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--函数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Concat <span class=\"token punctuation\">(</span>a，b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SELECT CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'姓名: '</span> ，StudentName<span class=\"token punctuation\">)</span> AS 新名字 FROM student</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>有的时候，列名字不是那么的见名知意。我们起别名 AS 字段名 as 别名 表名 as 别名</pre></td></tr></table></figure><ul>\n<li>SELECT 字段，... FROM 表</li>\n</ul>\n<h1 id=\"去重-distinct\"><a class=\"anchor\" href=\"#去重-distinct\">#</a> 去重 distinct</h1>\n<ul>\n<li>去除 SELECT 查询出来的结果中重复的数据，重复的数据只显示一条</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--查询一下有哪些同学参加了考试，成绩</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT * FROM result -- 查询全部的考试成绩</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span> FROM result --查询有哪些同学参加了考试</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT DISTINCT <span class=\"token string\">'StudentNo'</span> FROM result --发现重复数据，去重</pre></td></tr></table></figure><h1 id=\"数据库的列\"><a class=\"anchor\" href=\"#数据库的列\">#</a> 数据库的列</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SELECT VERSION<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> -- 查询系统版本 <span class=\"token punctuation\">(</span>函数<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SELECT <span class=\"token number\">100</span>*3-1 AS计算结果-- 用来计算 <span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT @@auto_increment_increment --查询自增的步长<span class=\"token punctuation\">(</span>变量<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--学员考试成绩+ <span class=\"token number\">1</span>分查看</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentResult'</span> +1 AS <span class=\"token string\">'提分后'</span> FROM result</pre></td></tr></table></figure><ul>\n<li>数据库中的表达式：文本值，列，Null, 函数，计算表达式，系统变量....<br />\nselect 表达式 from 表</li>\n</ul>\n<h1 id=\"where-条件子句\"><a class=\"anchor\" href=\"#where-条件子句\">#</a> where 条件子句</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用:检索数据中符合条件的值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>搜索的条件由一一个或者多个表达式组成<span class=\"token operator\">!</span> 结果 布尔值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>逻辑运算符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>运算符          语法                 描述</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>and <span class=\"token operator\">&amp;&amp;</span>          a and b  a <span class=\"token operator\">&amp;&amp;</span> b      逻辑与，两个都为真，结果为真</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>or              a or b   a <span class=\"token operator\">||</span> b      逻辑或，其中一个为真，则结果为真</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Not             not a    <span class=\"token operator\">!</span>a          逻辑非，真为假, 假为真<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>where<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>--查询考试成绩在95~100 分之间</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>WHERE StudentResult<span class=\"token operator\">>=</span><span class=\"token number\">95</span> AND StudentResult<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>-- and <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WHERE StudentResult<span class=\"token operator\">>=</span><span class=\"token number\">95</span> <span class=\"token operator\">&amp;&amp;</span> studentResult<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>--模糊查询<span class=\"token punctuation\">(</span>区间<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>, <span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>WHERE StudentResult BETWEEN <span class=\"token number\">95</span> AND <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>--除了1000号学生之外的同学的成绩</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>, <span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>WHERE studentNo <span class=\"token operator\">!=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>-- <span class=\"token operator\">!=</span>  not</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>SELECT <span class=\"token string\">'studentNo'</span>,<span class=\"token string\">'StudentResult'</span> FROM result</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>WHERE NOT studentNo <span class=\"token operator\">!=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"模糊查询比较运算符\"><a class=\"anchor\" href=\"#模糊查询比较运算符\">#</a> 模糊查询：比较运算符</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>运算符          语法                描述</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>IS NULL         a is null           如果操作符为NUII, 结果为真</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>IS NOT NULL     a is not null       如果操作符不为null,结果为真</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BETWEEN         a between b and C   若a在b和c之间，则结果为真</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Like            a like b            SQL匹配，如果a匹配b,则结果为真</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>In              a <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>a1,a2,<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span>   假设a在a1,或者a2<span class=\"token punctuation\">..</span>. 其中的某一个值中，结果为真</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>模糊查询<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--查询姓刘的同学</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-- 1ike结合 %<span class=\"token punctuation\">(</span>代表0到任意个字符<span class=\"token punctuation\">)</span> _<span class=\"token punctuation\">(</span>一个字符<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>WHERE StudentName LIKE <span class=\"token string\">'刘%'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>--查询姓刘的同学，名字后面只有一个字的</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>WHERE <span class=\"token string\">'StudentName'</span> LIKE <span class=\"token string\">'刘_'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>--查询姓刘的同学，名字后面只有两个字的</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>WHERE <span class=\"token string\">'StudentName'</span> LIKE <span class=\"token string\">'刘__'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>--查询名字中间有嘉字的同学 %嘉%</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>WHERE <span class=\"token string\">'StudentName'</span> LIKE <span class=\"token string\">'%嘉%'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span>具体的一个或者多个值<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>: <span class=\"token operator\">==</span> <span class=\"token operator\">=</span> <span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>--查询1001, <span class=\"token number\">1002,1003</span>号学员</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM、student</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>WHERE StudentNo IN <span class=\"token punctuation\">(</span><span class=\"token number\">1001,1002</span>，1003<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>--查询在北京的学生</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>WHERE <span class=\"token string\">'Address'</span> IN <span class=\"token punctuation\">(</span><span class=\"token string\">'安徽'</span>,<span class=\"token string\">'河南洛阳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span> null not <span class=\"token assign-left variable\">nu11</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>--查询地址为空的学生 nu11 <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'studentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>WHERE <span class=\"token assign-left variable\">address</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>  OR address IS NULL</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>--查询有出生日期的同学 不为空</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>WHERE <span class=\"token string\">'BornDate'</span> IS NOT NULL</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>--查询没有有出生日期的同学 为空</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span> FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>WHERE <span class=\"token string\">'BornDate'</span> IS  NULL</pre></td></tr></table></figure><h1 id=\"联表查询\"><a class=\"anchor\" href=\"#联表查询\">#</a> 联表查询</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/*思路</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>.分析需求，分析查询的字段来自哪些表，<span class=\"token punctuation\">(</span>连接查询<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>.确定使用哪种连接查询? <span class=\"token number\">7</span>种</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>确定交叉点<span class=\"token punctuation\">(</span>这两个表中哪个数据是相同的<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>判断的条件:学生表的中 studentNo <span class=\"token operator\">=</span> 成绩表 studentNo</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-- join<span class=\"token punctuation\">(</span>连接的表<span class=\"token punctuation\">)</span> on <span class=\"token punctuation\">(</span>判断的条件<span class=\"token punctuation\">)</span> 连接查询</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-- where 等值查询</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-- Inner Join</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>SELECT s.studentNO,studentName,SubjectNo,StudentResult</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>FROM student AS s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>INNER JOIN result AS r</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>WHERE s.studentNO <span class=\"token operator\">=</span> r.studentNO <span class=\"token punctuation\">(</span>where与on皆可，但是最好on<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-- Left Join</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>SELECT s.studentNO,studentName,SubjectNo,StudentResult</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>FROM student AS s</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>LEFT JOIN result AS r</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ON s.studentNO <span class=\"token operator\">=</span> r.studentNO </pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>-- Right Join</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>SELECT s.studentNO,studentName,SubjectNo,StudentResult</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>FROM student AS s</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>RIGHT JOIN result AS r</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ON s.studentNO <span class=\"token operator\">=</span> r.studentNO </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>--查询缺考的同学</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>SELECT s.studentNO, studentName , SubjectNo, StudentResult</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>FROM student s</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>LEFT JOIN result r</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>ON s.studentNO <span class=\"token operator\">=</span> r.studentNO</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>WHERE StudentResult IS NULL</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>操作            描述</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Inner <span class=\"token function\">join</span>      如果表中至少有一个匹配，就返回行</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>left <span class=\"token function\">join</span>       会从左表中返回所有的值，即使右表中没有匹配</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>right <span class=\"token function\">join</span>      会从右表中返回所有的值，即使左表中没有匹配</pre></td></tr></table></figure><h1 id=\"自连接\"><a class=\"anchor\" href=\"#自连接\">#</a> 自连接</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>自己的表和自己的表连接，核心: - -张表拆为两张一样的表即可</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>父类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>categoryid      categoryName</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>               信息技术</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>               软件开发</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span>               美术设计</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>子类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pid         categoryid          categoryName</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3</span>           <span class=\"token number\">4</span>                   数据库</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span>           <span class=\"token number\">8</span>                   办公信息</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span>           <span class=\"token number\">6</span>                   web开发</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">5</span>           <span class=\"token number\">7</span>                   美术设计</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>操作:查询父类对应的子类关系</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>父类        子类</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>信息技术    办公信息</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>软件开发    数据库</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>软件开发    web开发</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>美术设计    ps技术</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>--查询父子信息</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>SELECT a.<span class=\"token string\">'categoryName'</span> AS <span class=\"token string\">'父栏目'</span>  b.<span class=\"token string\">'categoryName'</span> AS <span class=\"token string\">'子栏目'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>FROM  <span class=\"token string\">'category'</span> AS a, <span class=\"token string\">'category'</span> AS b</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>WHERE a.<span class=\"token string\">'categoryidi'</span> <span class=\"token operator\">=</span> b.<span class=\"token string\">'pid'</span></pre></td></tr></table></figure><h1 id=\"分页limit和排序order-by\"><a class=\"anchor\" href=\"#分页limit和排序order-by\">#</a> 分页（limit）和排序（order by）</h1>\n<ul>\n<li>排序</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--排序:升序ASC，降序DESC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">--ORDER</span> BY通过那个字段排序，怎么排</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--查询的结果根据成绩降序排序</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT s.<span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span>,<span class=\"token string\">'SubjectName'</span>,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FROM student s</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INNER JOIN <span class=\"token string\">'result'</span> r <span class=\"token punctuation\">(</span>有时as可以省略<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ON s.StudentNo <span class=\"token operator\">=</span> r. StudentNo</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span><span class=\"token operator\">=</span> sub.<span class=\"token string\">'Subj ectNo'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>WHERE subjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ORDER BY StudentResult ASC</pre></td></tr></table></figure><ul>\n<li>分页</li>\n<li>语法:limit 当前页，页面的大小</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--为什么要分页?</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>缓解数据库压力，给人的体验更好</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--分页，每页只显示五条数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--网页应用:当前，总的页数，页面的大小</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-- LIMIT <span class=\"token number\">0,5</span> <span class=\"token number\">1</span>~5</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-- LIMIT <span class=\"token number\">1,5</span> <span class=\"token number\">2</span>~6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SELECT s.<span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'StudentName'</span>,<span class=\"token string\">'SubjectName'</span>,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FROM student s</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>INNER JOIN <span class=\"token string\">'result'</span> r <span class=\"token punctuation\">(</span>有时as可以省略<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ON s.StudentNo <span class=\"token operator\">=</span> r. StudentNo</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span><span class=\"token operator\">=</span> sub.<span class=\"token string\">'Subj ectNo'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>WHERE subjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ORDER BY StudentResult ASC</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>LIMIT <span class=\"token number\">5,5</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>--第一页 limit <span class=\"token number\">0,5</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>-1<span class=\"token punctuation\">)</span> *5 ,5 </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--第二页 limit <span class=\"token number\">5,5</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>-1<span class=\"token punctuation\">)</span> *5 ,5</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>--第三页 limit <span class=\"token number\">10,5</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>-1<span class=\"token punctuation\">)</span> *5 ,5</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>-- 第N页 limit <span class=\"token number\">0,5</span>  <span class=\"token punctuation\">(</span>n-1<span class=\"token punctuation\">)</span> * pagesize, pagesize</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>-- <span class=\"token punctuation\">[</span>pagesize: 页面大小<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>-- <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>n-1<span class=\"token punctuation\">)</span>* pagesize:起始值<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>-- <span class=\"token punctuation\">[</span>n:当前页<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>-- <span class=\"token punctuation\">[</span>数据总数/页面大小<span class=\"token operator\">=</span>总页数<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>语法: 1imit<span class=\"token punctuation\">(</span>查询起始下标，pagesize<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"子查询-嵌套查询\"><a class=\"anchor\" href=\"#子查询-嵌套查询\">#</a> 子查询 嵌套查询</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-- <span class=\"token number\">1</span>.查询数据库结构-1 的所有考试结果<span class=\"token punctuation\">(</span>学号，科目编号，成绩<span class=\"token punctuation\">)</span>，降序排列</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--方式一: 使用连接查询</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,r.<span class=\"token string\">'SubjectNo'</span> ,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FROM <span class=\"token string\">'result'</span> r</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span> <span class=\"token operator\">=</span> sub.<span class=\"token string\">'SubjectNo'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>WHERE SubjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ORDER BY StudentResult DESC</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--方式二: 使用子查询<span class=\"token punctuation\">(</span>由里及外<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--查询所有数据库结构-1的学生学号</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SELECT <span class=\"token string\">'StudentNo'</span>,<span class=\"token string\">'SubjectNo'</span>,<span class=\"token string\">'StudentResult'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>FROM <span class=\"token string\">'result'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>3WHERE SubjectNo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    SELECT SubjectNo FROM <span class=\"token string\">'subject'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    WHERE SubjectName <span class=\"token operator\">=</span> <span class=\"token string\">'数据库结构-1'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ORDER BY StudentResult DESC</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>--分数不小于80分的学生的学号和姓名</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>SELECT DISTINCT s.<span class=\"token string\">'StudentNo'</span> ,<span class=\"token string\">'StudentName'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>FROM student S</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>INNER JOIN result r</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>ON r.<span class=\"token string\">'StudentNo'</span> <span class=\"token operator\">=</span> s.<span class=\"token string\">'StudentNo'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>WHERE <span class=\"token string\">'StudentResult'</span><span class=\"token operator\">>=</span><span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>--在这个基础上增加一个科目，高等数学-2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>--查询高等数学-2的编号</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>SELECT DISTINCT s.<span class=\"token string\">'StudentNo'</span> ,<span class=\"token string\">'StudentName'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>FROM student S</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>INNER JOIN result r</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>ON r.<span class=\"token string\">'StudentNo'</span> <span class=\"token operator\">=</span> s.<span class=\"token string\">'StudentNo'</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>WHERE <span class=\"token string\">'StudentResult'</span> <span class=\"token operator\">>=</span><span class=\"token number\">80</span> AND subjectNo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    SELECT SubjectNo FROM <span class=\"token string\">'subject'</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    WHERE、subjectName <span class=\"token operator\">=</span><span class=\"token string\">'高等数学-2'</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>--在改造<span class=\"token punctuation\">(</span>由里及外<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>SELECT StudentNo ，StudentName FROM student WHERE StudentNo IN <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    SELECT StudentNo FROM result WHERE StudentResu1t<span class=\"token operator\">></span><span class=\"token number\">80</span> AND subjectNo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     SELECT subjectNo FROM <span class=\"token string\">'subject'</span> WHERE、 SubjectName <span class=\"token operator\">=</span><span class=\"token string\">'高等数学-2'</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">)</span>I</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"分组和过滤\"><a class=\"anchor\" href=\"#分组和过滤\">#</a> 分组和过滤</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>F-查询不同课程的平均分，最高分，最低分，平均分大于80</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>核心:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>根据不同的课程分组<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SELECT Subj ectName, AVG <span class=\"token punctuation\">(</span>StudentResult<span class=\"token punctuation\">)</span> AS 平均分,MAX <span class=\"token punctuation\">(</span>StudentResult<span class=\"token punctuation\">)</span> AS 最高分, MIN <span class=\"token punctuation\">(</span>StudentResult<span class=\"token punctuation\">)</span> AS 最低分</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FROM result r</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INNER JOIN <span class=\"token string\">'subject'</span> sub</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ON r.<span class=\"token string\">'SubjectNo'</span> <span class=\"token operator\">=</span> sub.<span class=\"token string\">'SubjectNo'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QBOUP BY r.SubjectNo --通过什么字段来分组</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>HAVING 平均分<span class=\"token operator\">></span><span class=\"token number\">80</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/11/shujuku/MySQL%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/",
            "url": "https://love.youhuamao.xyz/2022/10/11/shujuku/MySQL%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/",
            "title": "MySQL数据管理",
            "date_published": "2022-10-10T16:00:00.000Z",
            "content_html": "<h1 id=\"外键\"><a class=\"anchor\" href=\"#外键\">#</a> 外键</h1>\n<ul>\n<li>方式一 在创建表的时候，增加约束 (麻烦，比较复杂)</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE TABLE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grade <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    gradeid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'年级id'</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gradename VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'年级名称'</span> ,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--学生表的 gradeid 字段 要去引用年级表的 gradeid</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--定义外键key</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--给这个外键添加约束 <span class=\"token punctuation\">(</span>执行引用<span class=\"token punctuation\">)</span> references 引用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CREATE TABLE IF NOT EXISTS</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>student <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'学号'</span>，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'匿名'</span> COMMENT <span class=\"token string\">'姓名'</span>，</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>NOT NULL DEFAULT <span class=\"token string\">'123456'</span> COMMENT <span class=\"token string\">'密码'</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">'sex'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">'女'</span> COMMENT <span class=\"token string\">'性别'</span>，</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">'birthday'</span> DATETIME DEFAULT NULL COMMENT <span class=\"token string\">'出生日期'</span>，</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">'gradeid'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'学生的年级'</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">'address'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'家庭住址'</span>，</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">'emai1'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'邮箱'</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PRIMARY KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    KEY <span class=\"token string\">'FK_gradeid'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    CONSTRAINT <span class=\"token string\">'FK_ gradeid'</span> FOREIGN KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span> REFERENCES <span class=\"token string\">'grade'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr></table></figure><ul>\n<li>方式二 创建表成功后，添加外键约束</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE TABLE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grade <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    gradeid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'年级id'</span>，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gradename VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'年级名称'</span> ,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--学生表的 gradeid 字段 要去引用年级表的 gradeid</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--定义外键key</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--给这个外键添加约束 <span class=\"token punctuation\">(</span>执行引用<span class=\"token punctuation\">)</span> references 引用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>CREATE TABLE IF NOT EXISTS</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>student <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT COMMENT <span class=\"token string\">'学号'</span>，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'匿名'</span> COMMENT <span class=\"token string\">'姓名'</span>，</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>NOT NULL DEFAULT <span class=\"token string\">'123456'</span> COMMENT <span class=\"token string\">'密码'</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">'sex'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">'女'</span> COMMENT <span class=\"token string\">'性别'</span>，</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">'birthday'</span> DATETIME DEFAULT NULL COMMENT <span class=\"token string\">'出生日期'</span>，</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">'gradeid'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> NOT NULL COMMENT <span class=\"token string\">'学生的年级'</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">'address'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'家庭住址'</span>，</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">'emai1'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'邮箱'</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PRIMARY KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>-- 创建表的时候没有外键关系</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ALTER TABLE <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>ADD CONSTRAINT <span class=\"token string\">'FK_ gradeid'</span> FOREIGN KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span> REFERENCES <span class=\"token string\">'grade'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gradeid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>-- ALTER TABLE 表 ADD CONSTRAINT 约束名FOREIGN KEY<span class=\"token punctuation\">(</span>作为外键的列<span class=\"token punctuation\">)</span> REFERENCES 那个表<span class=\"token punctuation\">(</span>哪个字段<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>如果表被当成外键添加约束，不能直接删除，要先删除外接该表的表</li>\n<li>主键不能进行外联</li>\n<li>一半不这样进行外键，因为这样表之间因为相互联系会导致进行删除等操作的不便，一般在 java 程序中实现外联</li>\n</ul>\n<h1 id=\"dml语言全部记住\"><a class=\"anchor\" href=\"#dml语言全部记住\">#</a> DML 语言（全部记住）</h1>\n<h1 id=\"添加\"><a class=\"anchor\" href=\"#添加\">#</a> 添加</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--插入语句<span class=\"token punctuation\">(</span>添加<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-- insert into 表名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>字段名1,字段2,字段3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'值3'</span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INSERT INTO <span class=\"token string\">'grade'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gradename'</span><span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'大四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--由于主键自增我们可以省略<span class=\"token punctuation\">(</span>如果不写表的字段，他就会一一匹配<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>INSERT INTO <span class=\"token string\">'grade'</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'大三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-- 一般写插入语句，我们一定要数据和字段一一对应<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--插入多个字段</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>INSERT INTO <span class=\"token string\">'grade'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gradename'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'大二'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'大一'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>INSERT INTO <span class=\"token string\">'student'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>INSERT INTO <span class=\"token string\">'student'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span>,<span class=\"token string\">'pwd'</span>,<span class=\"token string\">'sex'</span><span class=\"token punctuation\">)</span> VALUES <span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span>'aaaaaa<span class=\"token string\">','</span>男<span class=\"token string\">')</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>INSERT INTO '</span>student<span class=\"token string\">' ('</span>name<span class=\"token string\">'，'</span><span class=\"token builtin class-name\">pwd</span><span class=\"token string\">''</span>sex<span class=\"token string\">')</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>VALUES ('</span>李四<span class=\"token string\">'，'</span>aaaaaa<span class=\"token string\">','</span>男<span class=\"token string\">'),('</span>王五<span class=\"token string\">'，'</span>aaaaaa<span class=\"token string\">','</span>男'<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span></pre></td></tr></table></figure><ul>\n<li>\n<ol>\n<li>字段和字段之间使用英文逗号隔开</li>\n<li>字段是可以省略的，但是后面的值必须要要一一对应</li>\n<li>可以同时插入多条数据，VALUES 后面的值，需要使用，隔开即可 VALUES (),(),...</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"修改\"><a class=\"anchor\" href=\"#修改\">#</a> 修改</h1>\n<ul>\n<li>update 修改谁 (条件) set 原来的值 = 新值</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--修改学员名字,带了简介</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UPDATE <span class=\"token string\">'student'</span> SET <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'狂神'</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--不指定条件的情况下，会改动所有表<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>UPDATE <span class=\"token string\">'student'</span> SET <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'长江7号'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>--修改多个属性，逗号隔开</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>UPDATE <span class=\"token string\">'student'</span> SET <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'幽化猫'</span>，emai1i <span class=\"token operator\">=</span> <span class=\"token string\">'2315329173@qq.com'</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--语法:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-- UPDATE 表名set co1num_ name <span class=\"token operator\">=</span> value,<span class=\"token punctuation\">[</span>qo1num_ name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> where <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>●colnum_name是数据库的列，尽量带上<span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>●条件,筛选的条件,如果没有指定,则会修改所有的列</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>●value, 是一个具体的值，也可以是一个变量</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--通过多个条件定位数据</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>UPDATE student SET bi rthday <span class=\"token operator\">=</span> CURRENT_TIME WHERE name <span class=\"token operator\">=</span><span class=\"token string\">'长江7号'</span> AND <span class=\"token assign-left variable\">sex</span><span class=\"token operator\">=</span><span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>CURRENT_TIME 显示当前时间</pre></td></tr></table></figure><ul>\n<li>条件可以是 = != &lt;&gt;(不等于) &gt; &lt; &gt;= &lt;= BETWEEN ... and ...（表示区间）AND OR</li>\n</ul>\n<h1 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h1>\n<ul>\n<li>delete 命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法: delete from 表名 <span class=\"token punctuation\">[</span>where 条件<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--删除数据 <span class=\"token punctuation\">(</span>避免这样写，会全部删除<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DELETE FROM <span class=\"token string\">'student'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--删除指定数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DELETE FROM <span class=\"token string\">'student'</span> WHERE <span class=\"token function\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>TRUNCATE 命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用:完全清空一个数据库表，表的结构和索引约束不会变<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--清空student 表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>TRUNCATE <span class=\"token string\">'student'</span></pre></td></tr></table></figure><ul>\n<li>delete 的 TRUNCATE 区别</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>相同点:都能删除数据，都不会删除表结构</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不同:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    TRUNCATE 重新设置自增列计数器会归零</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    TRUNCATE 不会影响事务</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>--测试delete和TRUNCATE 区别</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CREATE TABLE </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">test</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_ INCREMENT，</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    co11^ VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PRIMARY KEY <span class=\"token punctuation\">(</span> <span class=\"token function\">id</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>INSERT INTO <span class=\"token string\">'test'</span><span class=\"token punctuation\">(</span><span class=\"token string\">'co11'</span><span class=\"token punctuation\">)</span> VALUES<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>DELETE FROM <span class=\"token string\">'test'</span> -- 不会影响自增</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>TRUNCATE TABLE <span class=\"token string\">'test'</span> --自增会归零</pre></td></tr></table></figure><ul>\n<li>DELETE 删除的问题，重启数据库，现象</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>InnoDB 自增列会重1开始<span class=\"token punctuation\">(</span>存在内存当中的，断电即失<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MyISAM 继续从上一个自增量开始<span class=\"token punctuation\">(</span>存在文件中的，不会丢失<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/10/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E5%8F%98%E9%87%8F/",
            "url": "https://love.youhuamao.xyz/2022/10/10/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E5%8F%98%E9%87%8F/",
            "title": "类变量",
            "date_published": "2022-10-09T16:00:00.000Z",
            "content_html": "<h1 id=\"类变量静态变量\"><a class=\"anchor\" href=\"#类变量静态变量\">#</a> 类变量（静态变量）</h1>\n<ul>\n<li>static 静态 该变量最大的特点就是会被 Child 类的所有的对象实例共亨</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cLass <span class=\"token class-name\">Child</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义一个变量 count，是一个类变量 (静态变量) static 静态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 该变量最大的特点就是会被 Child 类的所有的对象实例共亨</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span><span class=\"token string\">\"加入了游戏..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>类变量也叫静态变量 / 静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</li>\n<li>访问修饰符 static 数据类型 变量名；[推荐]   static 访问修饰符 数据类型 变量名；</li>\n<li>访问：类名。类变量名 或者 对象名。类变量名</li>\n<li>类变量是随着类的加载而创建，所以即使没有创建对象实例也可以访问 (但是要满足访问权限)</li>\n<li>类变量的生命周期是随类的加载开始，随着类消亡而销毁。</li>\n</ul>\n<h1 id=\"类方法静态方法\"><a class=\"anchor\" href=\"#类方法静态方法\">#</a> 类方法（静态方法）</h1>\n<ul>\n<li>访问修饰符 static 数据返回类型 方法名 (){} [推荐]<br />\n static 访问修饰符 数据返回类型 方法名 ()</li>\n<li>使用（调用）方式类名。类方法名 或者 对象名。类方法名 [前提是满足访问修饰符的访问权限和范围]</li>\n<li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区:</li>\n<li>类方法中无 this 的参数 普通方法中隐含着 this 的参数</li>\n<li>类方法可以通过类名调用也可以通过对象名调用。</li>\n<li>普通方法和对象有关，需要通过对象名调用，比如对象名。方法名 (参数)，不能通过类名调用。</li>\n<li>类方法中不允许使用和对象有关的关键字，比如 this 和 super, 普通方法 (成员方法) 可以。</li>\n<li>类方法 (静态方法) 中只能访问静态变量或静态方法。</li>\n<li>普通成员方法，既可以访问普通变量 (方法)，也可以访问静态变量 (方法)。</li>\n<li>小结：静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员 (必须遵守访问权限)</li>\n</ul>\n<h1 id=\"main方法\"><a class=\"anchor\" href=\"#main方法\">#</a> main 方法</h1>\n<ul>\n<li>解释 main 方法的形式: public static void n in (String [] args){}</li>\n<li>main 方法时虚拟机调用</li>\n<li>java 虚拟机需要调用类的 main (方法， 所以该方法的访问权限必须是 public</li>\n<li>java 虚拟机在执行 main (方法时不必创建对象，所以该方法必须是 static</li>\n<li>该方法接收 String 类型的数组参数，该数组中保存执行 java 命令时传递给所运行的类的参数，案例演示，接收参数.</li>\n<li>java 执行的程序 参数 1 参数 2 参数 3 (参数传到了 args 里边)</li>\n<li>在 main (方法中，我们可以直接调用 main 方法所在类的静态方法或静态属性。但是，不能直接访问该类中的非静态成员，必须创建该类的 - 一个实例对象后，才能通过这个对象去访问类中的非静态成员。</li>\n</ul>\n<h1 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h1>\n<ul>\n<li>代码化块又称为初始化块，属于类中的成员（即是类的一部分），类似于方法，将逻辑语句封装在方法体中，通过 {} 包围起来。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用。</li>\n<li><span>修饰符</span> {<br />\n代码<br />\n};</li>\n<li>修饰符可选，要写的话，也只能写 static</li>\n<li>代码块分为两类，使用 static 修饰的叫静态代码块，没有 static 修饰的， 叫普通代码块。</li>\n<li>逻辑语句可以为任何逻辑语句 (输入、输出、方法调用、循环、判断等)</li>\n<li>; 号可以写上，也可以省略。</li>\n<li>代码块的调用优先于构造器，若调用构造器，会先调用代码块</li>\n</ul>\n<h1 id=\"代码块细节\"><a class=\"anchor\" href=\"#代码块细节\">#</a> 代码块细节</h1>\n<ul>\n<li>static 代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。如果是普通代码块，每创建一个对象，就执行。</li>\n<li>类什么时候被加载<br />\n创建对象实例时<br />\n创建子类对象实例，父类也会被加载，而且父类先被加载，子类后被加载<br />\n使用类的静态成员时 (静态属性，静态方法)<br />\n 案例演示: A 类 extends B 类 的静态块</li>\n<li>普通的代码块，在创建对象实例时，会被隐式的调用。被创建一次，就会调用次。如果只是使用类的静态成员时，普通代码块并不会执行。</li>\n<li></li>\n</ul>\n<ol>\n<li>创建一个对象时，在一个类调用顺序是，调用静态代码块和静态属性初始化 (注意：静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用)</li>\n<li>调用普通代码块和普通属性的初始化 (注意：普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用)</li>\n<li>调用构造方法。</li>\n</ol>\n<ul>\n<li>构造方法 (构造器) 的最前面其实隐含了 super () 和调用普通代码块，新写一个类演示，静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此是优先于构造器和普通代码块执行的。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token comment\">// 这里有隐藏的执行要求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个知识点，在前面讲解继承的时候，老师说</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 调用普通代码块</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>静态优先于普通，同级别看顺序，最后调用构造器（构造器中的<span class=\"token keyword\">super</span>（）优先于本类普通代码块，使用构造器先调用<span class=\"token keyword\">super</span>，再调用本类的普通代码块）</pre></td></tr></table></figure><ul>\n<li></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们看一下创建个子类时<span class=\"token punctuation\">(</span>继承关系<span class=\"token punctuation\">)</span>，他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用<span class=\"token punctuation\">(</span>执行<span class=\"token punctuation\">)</span>顺序如下<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span> 父类的静态代码块和静态属性<span class=\"token punctuation\">(</span>优先级一样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span> 子类的静态代码块和静态属性<span class=\"token punctuation\">(</span>优先级一 样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span> 父类的普通代码块和普通属性初始化<span class=\"token punctuation\">(</span>优先级一样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4.</span> 父类的构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5.</span> 子类的普通代码块和普通属性初始化<span class=\"token punctuation\">(</span>优先级一样，按定义顺序执行<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6.</span> 子类的构造方法</pre></td></tr></table></figure><ul>\n<li>静态代码块只能直接调用静态成员 (静态属性和静态方法)，普通代码块可以调用任意成员。</li>\n</ul>\n<h1 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h1>\n<ul>\n<li>\n<p>final 中文意思：最后的，最终的.<br />\nfinal 可以修饰类、属性、方法和局部变量.<br />\n 在某些情况下，程序员可能有以下需求，就会使用到 final:<br />\n1) 当不希望类被继承时，可以用 final 修饰.<br />\n2) 当不希望父类的某个方法被子类覆盖 / 重写 (override) 时，可以用 final 关键字修饰。<br />\n3) 当不希望类的的某个属性的值被修改，可以用 final 修饰。变量被修改也就相当于常量了<br />\n 4) 当不希望某个局部变量被修改，可以使用 final 修饰.</p>\n</li>\n<li>\n<p>final 修饰的属性又叫常量，一般用 XX_XX_XX 来命名</p>\n</li>\n<li>\n<p>final 修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如<br />\n下位置之一 [选择一个位置赋初值即可] :<br />\n①定义时：如 public final double TAX RATE=0.08;<br />\n②在构造器中<br />\n③在代码块中</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    1. 定义时：如 public final double TAX_ RATE=0.08;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    2. 在构造器中</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    了。在代码块中</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pubLic <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.08</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pubLic <span class=\"token keyword\">final</span> doubLe <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pubtic <span class=\"token keyword\">final</span> doubLe <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE3</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token function\">AA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">TAX_</span> <span class=\"token constant\">RATE3</span> <span class=\"token operator\">=</span> <span class=\"token number\">8.8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果 final 修饰的属性是静态的，则初始化的位置只能是<br />\n①定义时②在静态代码块不能在构造器中赋值。</li>\n<li>final 类不能继承，但是可以实例化对象。[A2 类]<br />\nnubhlic vnid test(lL</li>\n<li>如果类不是 final 类，但是含有 final 方法，则该方法虽然不能重写，但是可以被继承。</li>\n<li>一般来说，如果一个类已经是 final 类了，就没有必要再将方法修饰成 final 方法。</li>\n<li>final 不能修饰构造方法 (即构造器)</li>\n<li>final 和 static 往往搭配使用，效率更高，底层编译器做了优化处理。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demof</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" can can need\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>可以直接<span class=\"token class-name\">Demof</span><span class=\"token punctuation\">.</span>i，会输出<span class=\"token number\">16</span>，但是不会导致代码块被加载</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>如果将赋值操作放在代码块中进行的话，会导致代码块的加载</pre></td></tr></table></figure><ul>\n<li>包装类 (Integer, Double,Float, Boolean 等都是 final),String 也是 final 类。所以不能被继承</li>\n</ul>\n",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/10/shujuku/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://love.youhuamao.xyz/2022/10/10/shujuku/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "连接数据库及基本操作",
            "date_published": "2022-10-09T16:00:00.000Z",
            "content_html": "<h1 id=\"操作数据据库\"><a class=\"anchor\" href=\"#操作数据据库\">#</a> 操作数据据库</h1>\n<h2 id=\"操作数据库\"><a class=\"anchor\" href=\"#操作数据库\">#</a> 操作数据库</h2>\n<p>[] 表示可选内容</p>\n<ul>\n<li>创建数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE DATABASE <span class=\"token punctuation\">[</span>IF NOT EXISTS<span class=\"token punctuation\">]</span> westos<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>删除数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DROP DATABASE <span class=\"token punctuation\">[</span>IF EXISTS<span class=\"token punctuation\">]</span> westos</pre></td></tr></table></figure><ul>\n<li>使用数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-- tab 键的上面，如果你的表名或者字段名是一个特殊字符，就需要带`<span class=\"token variable\"><span class=\"token variable\">`</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>USE <span class=\"token variable\">`</span></span>school`</pre></td></tr></table></figure><ul>\n<li>查看数据库</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHOW DATABASES --查看所有的数据库</pre></td></tr></table></figure><h2 id=\"数据库的列类型\"><a class=\"anchor\" href=\"#数据库的列类型\">#</a> 数据库的列类型</h2>\n<ul>\n<li>数值</li>\n</ul>\n<ol>\n<li>tinyint 十分小的数据 1 个字节</li>\n<li>smallint 较小的数据 2 个字节</li>\n<li>mediumint 中等大小的数据 3 个字节</li>\n<li>int 标准的整数 4 个字节</li>\n<li>bigint 较大的数字 8 个字节</li>\n<li>float 浮点数 4 个字节</li>\n<li>double 浮点数 8 个字节</li>\n<li>decimal 字符串形式的浮点数 金融计算的时候一般用 decimal</li>\n</ol>\n<ul>\n<li>字符串</li>\n</ul>\n<ol>\n<li>char 字符串固定大小 0~255</li>\n<li>varchar 可变字符串 0~65535 常用的 String</li>\n<li>tinytext 微型文本 2^8-1</li>\n<li>text 文本串 2^16 -1</li>\n</ol>\n<ul>\n<li>时间日期<br />\n java.util.Date</li>\n</ul>\n<ol>\n<li>date YYYY-MM-DD , 日期格式</li>\n<li>time HH: mm: ss 时间格式</li>\n<li>datetime YYYY-MM-DD HH: mm: ss 最常用的时间格式</li>\n<li>timestamp 时间戳，1970.1.1 到现在的毫秒数！</li>\n<li>year 年份</li>\n</ol>\n<ul>\n<li>null</li>\n</ul>\n<ol>\n<li>没有值，未知</li>\n<li>注意，不要使用 NULL 进行运算，结果为 NULL</li>\n</ol>\n<ul>\n<li>Unsigned</li>\n</ul>\n<ol>\n<li>无符号整数</li>\n<li>声明了该列不能声明为负数</li>\n</ol>\n<ul>\n<li>zerofill</li>\n</ul>\n<ol>\n<li>0 填充的</li>\n<li>不足的位数，使用 0 填充，int（3），5 --- 005</li>\n</ol>\n<ul>\n<li>自增</li>\n</ul>\n<ol>\n<li>通常理解为自增，自动在上一条记录的基础上 + 1 (默认)</li>\n<li>通常用来设计唯一的主键～index 必须是整数类型</li>\n<li>可以自定义设计主键自增的起始值和步长</li>\n</ol>\n<ul>\n<li>非空 NULL not null</li>\n</ul>\n<ol>\n<li>假设设置为 not null ，如果不给它赋值，就会报错！</li>\n<li>NUII 如果不填写值，默认就是 nul!</li>\n</ol>\n<ul>\n<li>默认</li>\n</ul>\n<ol>\n<li>设置默认的值！</li>\n<li>sex, 默认值为男，如果不指定该列的值，则会有默认的值</li>\n</ol>\n<h2 id=\"创建一个新表\"><a class=\"anchor\" href=\"#创建一个新表\">#</a> 创建一个新表</h2>\n<ul>\n<li>目标：创建一个 school 数据库</li>\n<li>创建学生表 (列，字段) 使用 SQL 创建</li>\n<li>学号 int 登录密码 varchar (20) 姓名，性别 varchar (2) , 出生日期 (datatime)，家庭住址，emai1</li>\n<li>注意点，使用英文 ()，表的名称和字段尽量使用 '' 括起来</li>\n<li>AUTO_ INCREMENT 自增</li>\n<li>字符串使用单引号括起来！</li>\n<li>所有的语句后面加，(英文的) ，最后一个不用加</li>\n<li>PRIMARY KEY 主键，一般一个表只有一个唯一的主键！</li>\n<li>COMMENT ''  列名</li>\n<li>DEFAULT ''  设置默认值</li>\n<li>ENGINE=INNODB DEFAULT CHARSET=utf8 设置引擎和编码</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>要求</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>学号int 登录密码varchar<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> 姓名，性别varchar<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>，出生日期<span class=\"token punctuation\">(</span>datatime<span class=\"token punctuation\">)</span>，家庭住址，email</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CREATE TABLE IF NOT EXISTS <span class=\"token string\">'student'</span> <span class=\"token punctuation\">(</span>  //如果student不存在，创建名为student的表</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'id'</span> INT<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class=\"token string\">'学号'</span>，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'name'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'匿名'</span> COMMENT <span class=\"token string\">'姓名'</span>，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'pwd'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'123456'</span> COMMENT <span class=\"token string\">'密码'</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'sex'</span> VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> NOT NULL DEFAULT <span class=\"token string\">'女'</span> COMMENT <span class=\"token string\">'性别'</span>，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'birthday'</span> DATETIME DEFAULT NULL COMMENT <span class=\"token string\">'出生日期'</span> ,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">'address'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'家庭住址'</span>，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">'email'</span> VARCHAR <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> DEFAULT NULL COMMENT <span class=\"token string\">'邮箱'</span>，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PRIMARY KEY<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">ENGINE</span><span class=\"token operator\">=</span>INNODB DEFAULT <span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>格式</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>CREATE TABLE <span class=\"token punctuation\">[</span>IF NOT EXISTS<span class=\"token punctuation\">]</span> <span class=\"token string\">'表名'</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'字段名'</span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">'字段名'</span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span>，</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">'字段名'</span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>表类型<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>字符集设置<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<ul>\n<li>SHOW CREATE DATABASE school -- 查看创建数据库的语句</li>\n<li>SHOW CREATE TABLE student -- 查看 student 数据表的定义（创建）语句</li>\n<li>DESC student 显示表的结构</li>\n</ul>\n<h2 id=\"数据表的类型\"><a class=\"anchor\" href=\"#数据表的类型\">#</a> 数据表的类型</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MYISAM      INNODB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>事务支持        不支持      支持</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>数据行锁定      不支持      支持</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>外键约束        不支持      支持</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>全文索引        支持        不支持</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>表空间的大小    较小        较大，约为2倍</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>优点</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MYISAM 节约空间，速度较快</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>INNODB 安全性高，事务的处理，多表多用户操作</pre></td></tr></table></figure><ul>\n<li>在物理空间存在的位置</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>所有的数据库文件都存在data目录下,一个文件夹就对应一个数据库，本质还是文件的存储<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MySQL引擎在物理文件上的区别</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>●InnoDB在数据库表中只有一一个*.frm文件，以及上级目录下的ibdata1文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>●MYISAM对应文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*.frm  表结构的定，义文件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*.MYD  数据文件<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*.MYI  索引文件<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>设置数据库表的字符集编码</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">CHARSET</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不设置的话，会是mysql 默认的字符集编码~<span class=\"token punctuation\">(</span>不支持中文<span class=\"token operator\">!</span> <span class=\"token punctuation\">)</span>MySQL的默认编码是Latin1,不支持中文</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在my.ini中配置默认的编码 character-set-server<span class=\"token operator\">=</span>utf8</pre></td></tr></table></figure><h2 id=\"修改删除表\"><a class=\"anchor\" href=\"#修改删除表\">#</a> 修改删除表</h2>\n<ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--修改表名: ALTER TABLE 旧表名 RENAME AS 新表名 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ALTER TABLE teacher RENAME AS teacher1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--增加表的字段: ALTER TABLE 表名 ADD 字段名 列属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ALTER TABLE teacher1 ADD age INT<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--修改表的字段 <span class=\"token punctuation\">(</span>重命名，修改约束<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-- ALTER TABLE 表名 MODIFY 字段名 列属性<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ALTER TABLE teacher1 MODIFY age VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--修改约束</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-- ALTER TABLE 表名 CHANGE 旧名字 新名字 列属性<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ALTER TABLE teacher1 CHANGE age age1 INT<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> -- 字段重命名</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--删除表的字段:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ALTER TABLE表名DROP 字段名</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ALTER TABLE teacher1 DROP age1</pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一一删除表<span class=\"token punctuation\">(</span>如果表存在再删除<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DROP TABLE IF EXISTS teacher1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>所有的创建和删除操作尽量加上判断，以免报错~</pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/09/shujuku/%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "url": "https://love.youhuamao.xyz/2022/10/09/shujuku/%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "title": "连接数据库及基本操作",
            "date_published": "2022-10-08T16:00:00.000Z",
            "content_html": "<h1 id=\"命令行连接\"><a class=\"anchor\" href=\"#命令行连接\">#</a> 命令行连接</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysq1 <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p123456</span> --连接数据库</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>update mysq1.user <span class=\"token builtin class-name\">set</span> authentication_ <span class=\"token assign-left variable\">string</span><span class=\"token operator\">=</span>password<span class=\"token punctuation\">(</span><span class=\"token string\">'1234561'</span><span class=\"token punctuation\">)</span> where <span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span><span class=\"token string\">'root'</span> and Host <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">;</span> --修改用户密码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flush privileges<span class=\"token punctuation\">;</span>--刷新权限</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>show databases<span class=\"token punctuation\">;</span> -- 查看所有数据库</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mysq<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> use school -- 切换数据库 use 数据库名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>show tables<span class=\"token punctuation\">;</span> -- 查看数据库中的所有表</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>describe student<span class=\"token punctuation\">;</span>-- 显示数据库中student的表的信息 describe 数据库名称</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>create database westos<span class=\"token punctuation\">;</span> --创建一个个数据库 create database 数据库名称</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">exit</span> 退出连接</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>-- 单行注释</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#  单行注释</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>/* <span class=\"token punctuation\">(</span>sq1的多行注释<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>he11oi</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>asdas</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>dasdas</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</pre></td></tr></table></figure>",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/08/summary/monthly/2022%E5%B9%B4%E4%B9%9D%E6%9C%88%E6%80%BB%E7%BB%93/",
            "url": "https://love.youhuamao.xyz/2022/10/08/summary/monthly/2022%E5%B9%B4%E4%B9%9D%E6%9C%88%E6%80%BB%E7%BB%93/",
            "title": "2022年九月总结",
            "date_published": "2022-10-07T16:00:00.000Z",
            "content_html": "<h1 id=\"点点点\"><a class=\"anchor\" href=\"#点点点\">#</a> 点点点</h1>\n<ul>\n<li>本月在前半月没有返校，导致进度真的巨慢，在国庆期间也没完成自己打算学完的，甚至没有复习 javaSE</li>\n<li>连新番也没有追，小说也没有看，天天看你那个 B 小视频了</li>\n<li>没有完成开学的每天三道题还有背单词，最晚下周要捡起来</li>\n</ul>\n<h1 id=\"学习成功\"><a class=\"anchor\" href=\"#学习成功\">#</a> 学习成功</h1>\n<ul>\n<li>完成了 Mirai 和 nonebot2 的机器人的部署，知道了 pcrbot 这么好 (二次元) 的 bot，但是自己没有学会写插件 (悲)</li>\n<li>跟上了大学物理和概率论与数理统计</li>\n<li>会打弦一郎了 (雾)</li>\n</ul>\n<h1 id=\"反思\"><a class=\"anchor\" href=\"#反思\">#</a> 反思</h1>\n<ul>\n<li>太懒了，很多任务都没有完成，MySQL 进度更是慢的出奇</li>\n<li>学习效率还是低，去他娘的小视频</li>\n<li>没有开始写题和英语（懒蛋）</li>\n</ul>\n",
            "tags": [
                "总结",
                "月度总结",
                "总结"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/10/08/summary/weekly/2022-10-8/",
            "url": "https://love.youhuamao.xyz/2022/10/08/summary/weekly/2022-10-8/",
            "title": "Sat Oct 08 2022 00:00:00 GMT+0800 (中国标准时间)",
            "date_published": "2022-10-07T16:00:00.000Z",
            "content_html": "<ul>\n<li>国庆的假期有七天，出去玩了四天（但不是四整天），全当懒蛋了，什么都没干，而且还更爱刷小视频了，要改掉这个习惯，本周屁事没干，全 TM 浪费过去了</li>\n<li>在假期的时候也开始焦虑了起来，开始不知道自己到底想去干什么了，开始变得迷茫起来了，但想来想去，还是先按照目前的计划走，看看能不能尝试下去发布论文试试，现在中文期刊上试试，但干这些的同时，不要再把 Java 拉下去，之后还是老老实实转回去继续玩 python 吧，真该去学学神经网络了。现在想着就是那个识别这个东西是不是人，看看网上能不能找到差不多的，自己看看能不能试着解决这个问题，顺便发个论文试试，也能去问问老师看有没有什么改进方案。</li>\n<li>真该改掉爱看小视频还有学习的时候水群这个习惯了</li>\n</ul>\n",
            "tags": [
                "总结",
                "每周总结",
                "总结"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/24/Java/Java%E5%9F%BA%E7%A1%80/%E6%96%B9%E6%B3%95/",
            "url": "https://love.youhuamao.xyz/2022/09/24/Java/Java%E5%9F%BA%E7%A1%80/%E6%96%B9%E6%B3%95/",
            "title": "方法",
            "date_published": "2022-09-23T16:00:00.000Z",
            "content_html": "<h1 id=\"包\"><a class=\"anchor\" href=\"#包\">#</a> 包</h1>\n<ul>\n<li>\n<p>包的导入要在 import 上边</p>\n</li>\n<li>\n<p>在调用包中的类的时候，如果两个包的两个类名一样的，第一个使用 import 导入包名，但因为该包中的类已经被定义，所以其他包该类名在调用声明时，需要在前边加上包名 com.xiaoming.Dog dog1 = new com.xiaoming.Dog ();</p>\n</li>\n<li>\n<p>命名规则<br />\n只能包含数字、字母、下划线、 小圆点，但不能用数字开头，不能是关键字或保留字<br />\n般是小写字母 + 小圆点一般是 com. 公司名。项目名业务模块名，例如 com. sina.crm.utils</p>\n</li>\n<li>\n<p>常用的包<br />\n java.lang.* //lang 包是基本包， 默认引入，不需要再引入.<br />\njava.util.* //util 包，系统提供的工具包，工具类，使用 Scanner<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2phdmEubmV0\">java.net</span>.*  // 网络包，网络开发<br />\n java.awt.* // 是做 java 的界面开发，GUI</p>\n</li>\n<li></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//一个类中最多只有一句package</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>package com.hspedu.pkg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//import指令位置放在package的下面，在类定义前面，可以有多句且没有顺序要求</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> java.util.Scanner <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">import</span> java.util.Arrays <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"访问修饰符\"><a class=\"anchor\" href=\"#访问修饰符\">#</a> 访问修饰符</h1>\n<ul>\n<li>公开级别：用 public 修饰，对外公开</li>\n<li>受保护级别：用 protected 修饰，对子类和同 - 个包中的类公开</li>\n<li>默认级别：没有修饰符号，向同一一个包的类公开.</li>\n<li>私有级别：用 private 修饰，只有类本身可以访问，不对外公开.</li>\n</ul>\n<h1 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h1>\n<ul>\n<li>封装 (encapsulation) 就是把抽象出的数据 [属性] 和对数据的操作 [方法] 封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作 [方法], 才能对数据进行操作。</li>\n</ul>\n<h1 id=\"封装实现的步骤\"><a class=\"anchor\" href=\"#封装实现的步骤\">#</a> 封装实现的步骤</h1>\n<pre><code class=\"language-base\">1)将属性进行私有化[不能直接修改属性]\n2)提供一个公共的set方法，用于对属性判断并赋值\npublic void setXxx(类型参数名)&#123;\n    //加入数据验证的业务逻辑\n    属性=参数名;\n&#125;\n3)提供个公共的get方法，用于获取属性的值\npublic XX getXxx()&#123; //权限判断\n    return XX;\n&#125;\n</code></pre>\n<h1 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h1>\n<p>继承可以解决代码复用，让我们的编程更加靠近人类思维。当多个类存在相同的属性 (变量) 和方法时，可以从这些类中抽象出父类，<br />\n在父类中定义这些相同的属性和方法，所子类不需要重新定义这些属性和方法，只需要通过 extends 来声明继承父类即可。<br />\nclass 子类 extends 父类 {<br />\n}</p>\n<ul>\n<li>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问，但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</li>\n<li>子类必须调用父类的构造器，完成父类的初始化</li>\n<li>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指<br />\n定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</li>\n<li>如果希望指定去调用父类的某个构造器，则显式的调用一下: super (参数列表) 参数列表与父类的哪个相同，就会调用哪个</li>\n<li>super 在使用时，必须放在构造器第一行 (super 只能在构造器中使用)</li>\n<li>因为都是访问构造器，要放在第一行，super 与 this 不能在一个构造器内同时使用</li>\n<li>父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类 (顶级父类)</li>\n<li>子类最多只能继承一一个父类 (指直接继承)，即 java 中是单继承机制。</li>\n<li>在调用方法和查找属性的时候，会从子类开始，若子类有则调用返回，若没有则查找父类，如果父类有且可以访问就使用父类的，如果没有继续向上查找，知道 object</li>\n</ul>\n<h1 id=\"super\"><a class=\"anchor\" href=\"#super\">#</a> super</h1>\n<p>super 代表父类的引用，用于访问父类的属性、方法、构造器</p>\n<ul>\n<li>访问父类的属性，但不能访问父类的 private 属性<br />\n super. 属性名:</li>\n<li>访问父类的方法，不能访问父类的 private 方法<br />\n super. 方法名 (参数列表);</li>\n<li>访问父类的构造器 (这点前面用过) :<br />\nsuper (参数列表); 只能放在构造器的第一句，只能出现一包</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> n3 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n4 <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test100</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test200</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">test300</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test400</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 通过 super 访问父类的属性 super. 属性名，但是不能</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print1n</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>n3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 通过 super 访问父类的方法 super . 方法名 (参数),</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 但是不能直接访问父类的 private 方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">test100</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">test200</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">test300</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>当子类中有和父类中的成员 (属性和方法) 重名时，为了访问父类的成员，必须通过 super。如果没有重名，使用 super、this、直接访问是一样的效果！</li>\n<li>super 的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用 super 去访问爷爷类的成员：如果多个基类中都有同名的成员，使用 super 访问遵循就近原则。A-&gt;B-&gt;C</li>\n</ul>\n<h1 id=\"方法重写覆盖\"><a class=\"anchor\" href=\"#方法重写覆盖\">#</a> 方法重写 / 覆盖</h1>\n<p>简单的说：方法覆盖 (重写) 就是子类有一个方法和父类的某个方法的名称、返回类型、参数 - 样，那么我们就说子类的这个方法覆盖了父类的那个方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"动物叫唤。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小狗汪汪叫...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>子类的方法的参数，方法名称，要和父类方法的参数，方法名称完全 - 样。</li>\n<li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类<br />\n比如父类返回类型是 Object , 子类方法返回类型是 String</li>\n<li>子类方法不能缩小父类方法的访问权限</li>\n</ul>\n<h1 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h1>\n<h2 id=\"方法的多态跟重载差不多\"><a class=\"anchor\" href=\"#方法的多态跟重载差不多\">#</a> 方法的多态（跟重载差不多）</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">A</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 我们通过不同的参数个数去调用 sum 方法，就会去调用不同的方法，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 因此对 sum 方法来说，就是多种状态的体观。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span>，<span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Bb</span><span class=\"token operator\">=</span><span class=\"token function\">newB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out <span class=\"token punctuation\">.</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"he11o\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">A</span> obja <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out●<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obja<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"对象的多态\"><a class=\"anchor\" href=\"#对象的多态\">#</a> 对象的多态</h2>\n<ul>\n<li>一个对象的编译类型和运行类型可以不一致</li>\n<li>编译类型在定义对象时就确定了，不能改变</li>\n<li>运行类型是可以变化的.</li>\n<li>编译类型看定义时 = 号的左边，运行类型看 = 号的右边</li>\n</ul>\n<h2 id=\"向上转型\"><a class=\"anchor\" href=\"#向上转型\">#</a> 向上转型</h2>\n<p>本质：父类的引用指向了子类的对象<br />\n父类类型 引用名 = new 子类类型 ();<br />\n 编译类型看左边，运行类型看右边。</p>\n<ul>\n<li>可以调用父类中的所有成员 (需遵守访问权限)，</li>\n<li>不能调用子类中特有成员；(特有方法：特有变量指没有重写机制的都叫特有属性方法) 子类相对父类来说只有 2 种：重写的 / 特有的) 因为在编译阶段，能调用哪些成员，是由编译类型来决定的</li>\n<li>最终运行效果看子类 (运行类型) 的具体实现，即调用方法时，按照从子类 (运行类型) 开始查找方法</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"动物\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"睡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"跑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫吃鱼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">catchMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫抓老鼠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"向下转型\"><a class=\"anchor\" href=\"#向下转型\">#</a> 向下转型</h2>\n<ul>\n<li>语法：子类类型 引用名 = (子类类型) 父类引用:</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Cat</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token punctuation\">)</span> animal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cat<span class=\"token punctuation\">.</span><span class=\"token function\">catchMouse</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>只能强转父类的引用，不能强转父类的对象</li>\n<li>要求父类的引用必须指向的是当前目标类型的对象</li>\n<li>当向下转型后，可以调用子类类型中所有的成员</li>\n</ul>\n<h2 id=\"动态绑定机制\"><a class=\"anchor\" href=\"#动态绑定机制\">#</a> 动态绑定机制</h2>\n<p>属性看编译，方法看类型</p>\n<ul>\n<li>当调用对象方法的时候，该方法会和该对象的内存地址 / 运行类型绑定</li>\n<li>当调用对象属性时，没有动态绑定机制，哪里声明，那里使用</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//main 方法中</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//40</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//30</span></pre></td></tr></table></figure><h1 id=\"instanceof\"><a class=\"anchor\" href=\"#instanceof\">#</a> instanceOf</h1>\n<ul>\n<li>比较操作符，用于判断对象的类型是否为 XX 类型或 XX 类型的子类型</li>\n</ul>\n<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> ==</h1>\n<ul>\n<li>== : 既可以判断基本类型，又可以判断引用类型</li>\n<li>== : 如果判断基本类型，判断的是值是否相等。示例: int i= 10; double d= 10.0;</li>\n<li>== : 如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象 [案例说明]</li>\n</ul>\n<h1 id=\"equals\"><a class=\"anchor\" href=\"#equals\">#</a> equals</h1>\n<ul>\n<li>equals: 是 Object 类中的方法， 只能判断引用类型，如何看 Jdk 源码，看老师演示:</li>\n<li>默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等。比如 Integer,String</li>\n</ul>\n<h1 id=\"hsahcode\"><a class=\"anchor\" href=\"#hsahcode\">#</a> hsahCode</h1>\n<p>提高具有哈希结构的容器的效字！<br />\n 两个引用，如果指向的是同一个对象，则哈希值肯定是一 样的！<br />\n 两个引用，如果指向的是不同对象，则哈希值是不一样的<br />\n哈希值主要根据地址号来的！，不能完全将哈希值等价于地址。</p>\n",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/22/tutorial/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "url": "https://love.youhuamao.xyz/2022/09/22/tutorial/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "title": "Hexo + Shoka 主题 + vercel 搭建的属于自己的博客站点",
            "date_published": "2022-09-21T16:00:00.000Z",
            "content_html": "<p>Hexo + Shoka 主题 + vercel 搭建的属于自己的博客站点<br />\n全程记得要管理员权限<br />\n部署到 vercel 要提前申请一个自己的域名</p>\n<h1 id=\"安装nodejsgithexo\"><a class=\"anchor\" href=\"#安装nodejsgithexo\">#</a> 安装 node.js，Git，Hexo</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">Node.js 官网</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">Git 官网</span></li>\n<li>检验是否安装成功</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token parameter variable\">--version</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><ul>\n<li>安装 Hexo<br />\n 选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：F\\QiQi_Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装，第一次可能需要久一点输入命令后等一等，再输入第二条命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><ul>\n<li>Hexo 初始化<br />\n第一个命令，如图所示则安装成功如果失败了就再输入一次，第二个命令表示安装 hexo 部署到 git page 的 deployer</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><p>&lt;!-- <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uZWxlbWVjZG4uY29tL2FuemhpeXUtYmxvZ0AxLjEuNi9pbWcvcG9zdC9ibG9nLWNvbnN0cnVjdC85LnBuZw==\"></span> --&gt;</p>\n<ul>\n<li>本地查看效果</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo generate</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo server</pre></td></tr></table></figure><p>执行完即可登录 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000/</span> 查看效果</p>\n<h1 id=\"将博客部署到github-pages上懒蛋正在写了\"><a class=\"anchor\" href=\"#将博客部署到github-pages上懒蛋正在写了\">#</a> 将博客部署到 Github Pages 上（懒蛋正在写了）</h1>\n<ul>\n<li>我懒，先不写</li>\n<li>首先在 github 上创建你的同名仓库，笔者叫 youhuamao，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS15b3VodWFtYW8tNHM0b3MxMGdwbmgweGt5cG8ydjNkLmdpdGh1Yi5pbw==\">我创建的就是 youhuamao.github.io</span></li>\n<li>配置 SSH 密钥：只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：F\\QiQi_Blog） Git Bash Here 输入以下命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"your email@example.com\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//引号里面填写你的邮箱地址，比如我的是2315329173@qq.com</pre></td></tr></table></figure><p>之后会出现</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Generating public/private rsa key pair.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Enter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/c/Users/you/.ssh/id_rsa<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//到这里可以直接回车将密钥按默认文件进行存储</pre></td></tr></table></figure><p>再之后</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//这里是要你输入密码，其实不需要输什么密码，直接回车就行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Enter same passphrase again:</pre></td></tr></table></figure><p>接下来</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Your identification has been saved <span class=\"token keyword\">in</span> /c/Users/you/.ssh/id_rsa.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Your public key has been saved <span class=\"token keyword\">in</span> /c/Users/you/.ssh/id_rsa.pub.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>The key fingerprint is</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这里是各种字母数字组成的字符串，结尾是你的邮箱</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>The key's randomart image is</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#这里也是各种字母数字符号组成的字符串</span></pre></td></tr></table></figure><p>之后复制公钥</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#该公钥一般存在 C 盘 user 中，此命令失败的话可以直接找到该文件并且用记事本打开复制</span></pre></td></tr></table></figure><ul>\n<li>在 GitHub 账户中添加你的公钥</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>登录你得github，进入Settings</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>点击SSH and GPG Keys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>选择New SSH key</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>将公钥复制再K中 点击Add SSH key</pre></td></tr></table></figure><ul>\n<li>测试<br />\n直接在桌面右键 点击 Git Bash Here，输入以下命令输入以下命令：注意：git@github.com 不要做任何更改！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 之后输入 yes</span></pre></td></tr></table></figure><ul>\n<li>配置 Git 个人信息<br />\n Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"此处填你的用户名\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"此处填你的邮箱\"</span></pre></td></tr></table></figure><ul>\n<li>登录 Github 打开自己的项目 <span class=\"exturl\" data-url=\"aHR0cDovL3lvdXJuYW1lLmdpdGh1Yi5pbw==\">yourname.github.io</span></li>\n<li>鼠标移到 Code 按钮，点击按钮复制，或者直接把 SSH 全部复制</li>\n<li>打开你创建的 Hexo 文件夹（如：F:\\QiQi_Blog\\Hexo），右键用记事本（或者 Notepad++、Vs Code 等）打开该文件夹下的 _config.yml 文件</li>\n<li>滑到最下面，修改 _config.yml 文件并保存</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deploy:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  type: <span class=\"token function\">git</span> <span class=\"token comment\">#注意空格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  repository: git@github.com:youhuamao/youhuamao.github.io.git <span class=\"token comment\">#刚刚复制的内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  branch: main <span class=\"token comment\">#填分支，有的人是 master，有的是 main</span></pre></td></tr></table></figure><ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#执行过后会让你输入 github 账号密码</span></pre></td></tr></table></figure><ul>\n<li>如果此时报以下错误，说明你的 deployer 没有安装成功</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ERROR Deployer not found: <span class=\"token function\">git</span></pre></td></tr></table></figure><ul>\n<li>需要执行以下命令再安装一次</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><ul>\n<li>再执行</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo d</pre></td></tr></table></figure><h1 id=\"安装hexo主题\"><a class=\"anchor\" href=\"#安装hexo主题\">#</a> 安装 Hexo 主题</h1>\n<ul>\n<li>快速安装</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cd your-blog</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p>打开主题目录，内有 example 文件夹，提供了配置文件的 demo 供参考。<span class=\"spoiler\" title=\"你知道得太多了\">我写的时候跟个傻蛋似的不知道看</span></p>\n<ul>\n<li>安装依赖插件<br />\n安装前，记得务必卸载掉默认的 hexo-renderer-marked ，以及别的 markdown 文件渲染器。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 卸载依赖插件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> un hexo-renderer-marked <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">yarn</span> remove hexo-renderer-marked</pre></td></tr></table></figure><p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-renderer-multi-markdown-it</pre></td></tr></table></figure><p>用同上方法安装 hexo-autoprefixer</p>\n<h1 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h1>\n<ul>\n<li>加入 markdown 配置，用来渲染 md 文件</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>markdown:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  render: <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    html: <span class=\"token boolean\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    xhtmlOut: <span class=\"token boolean\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    breaks: <span class=\"token boolean\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    linkify: <span class=\"token boolean\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    typographer: </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    quotes: <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  plugins: <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        name: markdown-it-toc-and-anchor</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        options: <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          tocClassName: <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          anchorClassName: <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        name: markdown-it-multimd-table</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        options:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          multiline: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          rowspan: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          headerless: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        name: ./markdown-it-furigana</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        options:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          fallbackParens: <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    - plugin:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        name: ./markdown-it-spoiler</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        options:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          title: <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr></table></figure><ul>\n<li>加入 minify 配置，压缩 css/js/html</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>minify:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  html:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    exclude: <span class=\"token comment\"># 排除 hexo-feed 用到的模板文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      - <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      - <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      - <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  css:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    exclude:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      - <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  js:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    mangle:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      toplevel: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    output:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    compress:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    exclude:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      - <span class=\"token string\">'**/*.min.js'</span></pre></td></tr></table></figure><ul>\n<li>autoprefixer 配置建议</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>autoprefixer:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  exclude:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    - <span class=\"token string\">'*.min.css'</span></pre></td></tr></table></figure><ul>\n<li>algolia 配置建议</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>algolia:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  appId: <span class=\"token comment\">#Your appId</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  apiKey: <span class=\"token comment\">#Your apiKey</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  adminApiKey: <span class=\"token comment\">#Your adminApiKey</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  chunkSize: <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  indexName: <span class=\"token comment\">#\"shoka\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  fields:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    - title <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    - path <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    - categories <span class=\"token comment\">#推荐配置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    - content:strip:truncate,0,2000</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    - gallery</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    - photos</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - tags</pre></td></tr></table></figure><ul>\n<li>feed 配置建议</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keywords: <span class=\"token comment\">#站点关键词，用 “,” 分隔</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>feed:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    limit: <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    order_by: <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    tag_dir: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    category_dir: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    rss:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        template: <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        output: <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    atom:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        template: <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        output: <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    jsonFeed:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        template: <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        output: <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure><h1 id=\"应用主题\"><a class=\"anchor\" href=\"#应用主题\">#</a> 应用主题</h1>\n<ul>\n<li>修改站点配置文件 &lt;root&gt;/_config.yml ，把主题改为 shoka</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>theme: shoka</pre></td></tr></table></figure><ul>\n<li>修改主题配置<br />\n主题配置的所有参数在 &lt;root&gt;/themes/shoka/_config.yml 文件中。<br />\n为了方便主题升级，请在根目录新建一个 yml 文件，命名为 _config.shoka.yml<br />\n 也就是说，所有主题的自定义配置均保存于 &lt;root&gt;/_config.shoka.yml 文件。</li>\n</ul>\n<h1 id=\"弄到现在你的博客基本可以用了确实可以用\"><a class=\"anchor\" href=\"#弄到现在你的博客基本可以用了确实可以用\">#</a> 弄到现在你的博客基本可以用了（确实可以用）</h1>\n<h1 id=\"将网站托管到vercel\"><a class=\"anchor\" href=\"#将网站托管到vercel\">#</a> 将网站托管到 vercel</h1>\n<ul>\n<li>打开 vercel，用 GitHub 登录，点击 Add new，再点击 project，找到你的博客仓库点击仓库旁边的 import，等待部署完成</li>\n<li>点击 Go to Dashboard，Settings，Domains，在 add 旁边新增一个域名，点击 add</li>\n<li>之后需要进行解析</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>有的人是Type Name Value，将其复制添加进你的域名即可</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>之后便是等待解析的完成</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>进入_config.yml，找到URL，将url后的网址修改成为你自己自定义的那个域名</pre></td></tr></table></figure><h1 id=\"通过自定义域名访问博客\"><a class=\"anchor\" href=\"#通过自定义域名访问博客\">#</a> 通过自定义域名访问博客</h1>\n<ul>\n<li>首先需要购买云服务器，我们以腾讯云服务器为例。</li>\n</ul>\n<ol>\n<li></li>\n</ol>\n<ul>\n<li>接着在腾讯云购买一个属于你的域名</li>\n<li>在 vercel 中生成你的网址</li>\n<li>将网址在自己的域名下解析</li>\n</ul>\n",
            "tags": [
                "教程",
                "搭建博客"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/21/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/",
            "url": "https://love.youhuamao.xyz/2022/09/21/Java/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/",
            "title": "类与对象",
            "date_published": "2022-09-20T16:00:00.000Z",
            "content_html": "<p>类是抽象的，概念的，代表一类事物比如人类，猫类... 即它是数据类型.<br />\n 对象是具体的，实际的，代表一个具体事物， 即是实例<br />\n类是对象的模板，对象是类的一个个体，对应一个实例</p>\n<h1 id=\"对象存在内部布局\"><a class=\"anchor\" href=\"#对象存在内部布局\">#</a> 对象存在内部布局</h1>\n<ul>\n<li>与数组差不多，对象在栈中有地址，指向堆中，其中数字存放在堆中，而若是字符串则在堆中存放的是地址，该地址指向方法区的字符串</li>\n<li>真正的对象在堆中，而在栈中的叫对象引用（对象名）</li>\n<li>在方法区还会加载类的信息。1. 属性信息 2. 行为（方法信息）</li>\n</ul>\n<h1 id=\"属性概念\"><a class=\"anchor\" href=\"#属性概念\">#</a> 属性概念</h1>\n<ul>\n<li>从概念或叫法上看：成员变量 = 属性 = feld（字段） (成员变量是用来表示属性)</li>\n<li>属性是类的一个组成部分，一般是基本数据类型，也可是引用类型 (对象，数组)。比如我们前面定义猫类的 int age 就是属性</li>\n<li>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名；</li>\n<li>属性的定义类型可以为任意类型，包含基本类型或引用类型</li>\n<li>属性如果不赋值，有默认值，规则和数组一致。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//p1 是对象名 (对象引用)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//new Person () 创建的对象空间 (数据) 才是真正的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 四个属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">double</span> sal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isPass <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"创建对象\"><a class=\"anchor\" href=\"#创建对象\">#</a> 创建对象</h1>\n<ul>\n<li>先声明再创建 Cat cat ; cat = new Cat ();</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Cat</span> cat <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明对象 cat</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 声明对象后，会在栈中创建 cat，但是是空值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 创建对象后，会在栈中开辟空间，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 访问对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>cat<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>直接创建 Cat cat = new Cat ();</li>\n</ul>\n<h1 id=\"对象分配机制\"><a class=\"anchor\" href=\"#对象分配机制\">#</a> 对象分配机制</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们定义一个人类<span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>包括名字<span class=\"token punctuation\">,</span>年龄<span class=\"token punctuation\">)</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p1<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1 赋给了 p2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr></table></figure><h1 id=\"类和对象的内存分配机制\"><a class=\"anchor\" href=\"#类和对象的内存分配机制\">#</a> 类和对象的内存分配机制</h1>\n<ul>\n<li>Java 内存的结构分析<br />\n栈：一般存放基本数据类型 (局部变量)<br />\n 堆：存放对象 (Cat cat , 数组等)<br />\n 方法区：常量池 (常量，比如字符串)，类加载信息<br />\n示意图 [Cat (name, age, price)]</li>\n<li>Java 创建对象的流程简单分析<br />\n Person p = new Person ();<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3AubmFtZQ==\">p.name</span> = &quot;jack&quot; ;<br />\np.age = 10<br />\n 先加载 Person 类信息 (属性和方法信息，只会加载次)<br />\n 在堆中分配空间，进行默认初始化 (看规则)，把地址赋给 p，p 就指向对象<br />\n把地址赋给 p , p 就指向对象<br />\n进行指定初始化</li>\n</ul>\n<h1 id=\"方法调用机制\"><a class=\"anchor\" href=\"#方法调用机制\">#</a> 方法调用机制</h1>\n<ul>\n<li>调用方法后，会在栈中开辟空间，运行方法</li>\n<li>1. 当程序执行到方法时，就会开辟一个独立的空间 (栈空间)<br />\n 2. 当方法执行完毕，或者执行到 return 语句就会返回，<br />\n3. 返回到调用方法的地方<br />\n 4. 返回后，继续执行方法后面的代码<br />\n 5. 当 main 方法 (栈) 执行完毕，整个程序退出</li>\n</ul>\n<h1 id=\"成员方法的定义\"><a class=\"anchor\" href=\"#成员方法的定义\">#</a> 成员方法的定义</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span>返回数据类型方法名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>返回值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1.</span>参数列表<span class=\"token operator\">:</span>表示成员方法输入<span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2.</span>数据类型<span class=\"token punctuation\">(</span>返回类型<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>表示成员方法输出，<span class=\"token keyword\">void</span>表示没有返回值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3.</span>方法主体<span class=\"token operator\">:</span>表示为了实现某<span class=\"token operator\">-</span>功能代码块</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4.</span><span class=\"token keyword\">return</span> 语句不是必须的。</pre></td></tr></table></figure><h1 id=\"方法使用细节\"><a class=\"anchor\" href=\"#方法使用细节\">#</a> 方法使用细节</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span>一个方法最多有一个返回值<span class=\"token punctuation\">[</span>思考，如何返回多个结果返回数组<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>返回类型可以为任意类型，包含基本类型或引用类型<span class=\"token punctuation\">(</span>数组，对象<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3.</span>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">return</span>值<span class=\"token punctuation\">;</span>而且要求返回值类型必须和<span class=\"token keyword\">return</span>的值类型一致或兼容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4.</span>如果方法是<span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>则方法体中可以没有<span class=\"token keyword\">return</span>语句，或者只写<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 方法名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>遵循驼峰命名法，最好见名知义，表达出该功能的意思即可，比如得到两个数的和</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>getSum<span class=\"token punctuation\">,</span>开发中按照规范</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 形参列表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1.</span>一个方法可以有<span class=\"token number\">0</span>个参数，也可以有多个参数，中间用逗号隔开，比如<span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2.</span>参数类型可以为任意类型，包含基本类型或引用类型，比如<span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3.</span>调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数<span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>getSum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">4.</span>方法定义时的参数称为形式参数，简称形参<span class=\"token punctuation\">;</span>方法调用时的参数称为实际参数，简称实参，实</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>参和形参的类型要一致或兼容、个数、顺序必须一致<span class=\"token operator\">!</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但里</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>面不能再定义方法<span class=\"token operator\">!</span>即<span class=\"token operator\">:</span>方法不能嵌套定义。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 方法细节调用说明</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">1.</span>同一个类中的方法调用<span class=\"token operator\">:</span>直接调用即可。比如<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>案例演示<span class=\"token operator\">:</span> <span class=\"token class-name\">A</span>类sayOk调用<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 同一个类中的方法调用：直接调用即可</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pnint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"print()方法被调用n=\"</span><span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//say0k 调用 print</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">2.</span>跨类中的方法<span class=\"token class-name\">A</span>类调用<span class=\"token class-name\">B</span>类方法<span class=\"token operator\">:</span>需要通过对象名调用。比如对象名<span class=\"token punctuation\">.</span>方法名<span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>案例演示<span class=\"token operator\">:</span> <span class=\"token class-name\">B</span>类sayHello调用<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Sys</span> tem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B类中的hi()被执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 同一个类中的方法调用：直接调用即可</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pnint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"print()方法被调用n=\"</span><span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//say0k 调用 print</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 创建 B 对象，然后在调用方法即可</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m1()方法被调用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Bb</span><span class=\"token operator\">=</span><span class=\"token function\">newB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        b<span class=\"token punctuation\">.</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m1()继续执行:)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 编写一个 main 方法</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    a<span class=\"token punctuation\">.</span><span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token number\">3.</span>特别说明一下<span class=\"token operator\">:</span>跨类的方法调用和方法的访问修饰符相关，先暂时这么提一下，</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>后面我们讲到访问修饰符时，还要再细说。</pre></td></tr></table></figure><h1 id=\"成员方法传参机制\"><a class=\"anchor\" href=\"#成员方法传参机制\">#</a> 成员方法传参机制</h1>\n<ul>\n<li>基本数据类型，传递的是值 (值拷贝) , 形参的任何改变不影响实参</li>\n<li>引用类型传递的是地址 (传递也是值，但是值是地址) , 可以通过形参影响实参！</li>\n</ul>\n<h1 id=\"方法重载\"><a class=\"anchor\" href=\"#方法重载\">#</a> 方法重载</h1>\n<ul>\n<li>java 中允许同一个类中，多个同名方法的存在，但要求形参列表不一致！</li>\n<li>方法名：必须相同<br />\n形参列表：必须不同 (形参类型或个数或顺序，至少有一样不同，参数名无要求)<br />\n 返回类型：无要求</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCalculator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 两个整数的和</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 一个整数，个 double 的和</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 一个 double ，一个 Int 和</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>doubLe n1 <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 三个 int 的和</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"可变参数\"><a class=\"anchor\" href=\"#可变参数\">#</a> 可变参数</h1>\n<ul>\n<li>可变参数的实参可以为 0 个或任意多个。</li>\n<li>可变参数的实参可以为数组。</li>\n<li>可变参数的本质就是数组.</li>\n<li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li>\n<li>一个形参列表中只能出现一个可变参数</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 可以使用方法重载</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//2 个数的和</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//3 个数的和</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> n3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span><span class=\"token number\">4</span>个数的和</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2 <span class=\"token operator\">+</span> n3 <span class=\"token operator\">+</span> n4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 上面的三个方法名称相同，功能相同，参数个数不同 -> 使用可变参数优化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//int... 表示接受的是可变参数，类型是 int , 即可以接收多个 int (0 - 多) I</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 使用可变参数时，可以当做数组来使用即 nums 可以当做数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> nums <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收的参数个数=\"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    res <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h1>\n<ul>\n<li>在 java 编程中，I 主要的变量就是属性 (成员变量) 和局部变量。</li>\n<li>我们说的局部变量一般是指在成员方法中定义的变量。 [举例 Cat 类: cry]</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token char\">'Jack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>java 中作用域的分类<br />\n全局变量：也就是属性，作用域为整个类体 Cat 类: cry eat 等方法使用属性<br />\n局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中！（一般是在方法内的）</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 全局变量：也就是属性，作用域为整个类体 Cat 类 : cry eat| 等方法使用属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 属性在定义时，可以直接赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定的值是 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//1. 局部变量一般是指在成员方法中定义的变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//2. n 和 name 就是局部变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//3. n 和 name 的作用域在 cry 方法中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在cry中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在eat中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>全局变量 (属性) 可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使<br />\n用，因为没有默认值。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 全局变量：也就是属性，作用域为整个类体 Cat 类 : cry eat| 等方法使用属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 属性在定义时，可以直接赋值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定的值是 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 全局变量 (属性) 可以不赋值，直接使用，因为有默认值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 局部变量必须赋值后，才能使用，因为没有默认值。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认值 0.0 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 局部变量必须赋值后，才能使用，因为没有默认值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> <span class=\"token string\">\"北京的猫\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 局部变量若不初始化会报错</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"num=\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"address=\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"weight=\"</span> <span class=\"token operator\">+</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//1. 局部变量一般是指在成员方法中定义的变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//2. n 和 name 就是局部变量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//3. n 和 name 的作用域在 cry 方法中</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在cry中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在eat中使用属性age=\"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"作用域细节\"><a class=\"anchor\" href=\"#作用域细节\">#</a> 作用域细节</h1>\n<ul>\n<li>属性和局部变量可以重名，访问时遵循就近原则。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 细节属性和局部变量可以重名，访问时遵循就近原则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say( ) name=\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//king</span></pre></td></tr></table></figure><ul>\n<li>在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 细节属性和局部变量可以重名，访问时遵循就近原则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say( ) name=\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> 北京\"<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//String address =” 上海 \";// 错误，重复定义变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">String</span> naime <span class=\"token operator\">=</span> <span class=\"token string\">\"yhm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>属性生命周期较长，伴随着对象的创建而创建，伴随着对象的死亡而死亡。局部变<br />\n量，生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而死亡。<br />\n即在一次方法调用过程中。</p>\n</li>\n<li>\n<p>作用域不同<br />\n全局变量：可以被本类使用，或其他类使用 (通过对象调用)<br />\n 局部变量：只能在本类中对应的方法中使用</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VarScopeDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        局部变量，生命周期较短，伴随着它的代码块的执行而创建，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        伴随着代码块的结束而销毁。即在一次方法调用过程中</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//p1.say ();// 当执行 say 方法时， say 方法的局部变量比如 name ，会创建，当 say 执行完毕后</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//name 局 部变量就销毁，但是属性 (全局变量) 仍然可以使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">T</span> t1<span class=\"token operator\">=</span><span class=\"token function\">newT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一种跨类访问对象属性的方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第二种跨类访问对象属性的方式</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 全局变量 / 属性：可以被本类使用，或其他类使用 (通过对象调用)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jack</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jack </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 细节属性和局部变量可以重名，访问时遵循就近原则</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say( ) name=\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> 北京\"<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//String address =” 上海 \";// 错误，重复定义变量</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">String</span> naime <span class=\"token operator\">=</span> <span class=\"token string\">\"yhm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修饰符不同<br />\n全局变量 / 属性可以加修饰符<br />\n局部变量不可以加修饰符</li>\n</ul>\n<h1 id=\"构造器\"><a class=\"anchor\" href=\"#构造器\">#</a> 构造器</h1>\n<ul>\n<li>构造方法又叫构造器 (constructor), 是类的一种特殊的方法，它的主要作用是完成对新对象的初始化</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>修饰符<span class=\"token punctuation\">]</span>方法名<span class=\"token punctuation\">(</span>形参列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    方法体<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//1. 构造器没有返回值，也不能写 void</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//2. 构造器的名称和类 Person 一样</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//3. (String pName, int pAge) 是构造器形参列表，规则和成员方法 - 样</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pAge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        name <span class=\"token operator\">=</span> pName <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        age <span class=\"token operator\">=</span> pAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 当我们 new 一个对象时，直接通过构造器指定名字和年龄</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1) 构造器的修饰符可以默认<br />\n 2) 构造器没有返回值<br />\n 3) 方法名和类名字必须样<br />\n 4) 参数列表和成员方法一样的规则<br />\n 5) 在创建对象时，系统会自动的调用该类的构造器完成对象的初始化。</p>\n<h1 id=\"构造器细节\"><a class=\"anchor\" href=\"#构造器细节\">#</a> 构造器细节</h1>\n<ul>\n<li>一个类可以定义多个不同的构造器，即构造器重载<br />\n比如：我们可以再给 Person 类定义一个构造器，用来创建对象的时候，只指定人名，不需要指定年龄</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructorDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 编写一个 main 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"king\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第一个构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tom\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 第 2 个构造器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 第一个构造器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pAge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    name <span class=\"token operator\">=</span> pName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    age <span class=\"token operator\">=</span> pAge <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 第 2 个构造器，只指定人名，不需要指定年龄</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> pName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    name <span class=\"token operator\">=</span> pName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>构造器名和类名要相同</li>\n<li>构造器没有返回值</li>\n<li>构造器是完成对象的初始化，并不是创建对象</li>\n<li>在创建对象时，系统自动的调用该类的构造方法</li>\n<li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器 (也叫默认构造器)，比如 Person (){}, 使用 javap 指令反编译查看</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果程序员没有定义构造器， 系统会自动给类生成一个默认无参构造器 (也叫默认构造器)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    默认构造器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Dog () &#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>一旦定义了自己的构造器默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下，即: Person (){}</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstructorDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 编写一个 main 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Dog</span> dog1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；<span class=\"token comment\">// 使用的是默认无参构造器（也叫默认构造器）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，即无法使用 Dog dog1 = new Dog ()；</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 除非显式的定义一下，即: Dog ()&#123;&#125; 写 (这点很重要)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 显式的定义 - 下无参构造器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"对象创建流程分析\"><a class=\"anchor\" href=\"#对象创建流程分析\">#</a> 对象创建流程分析</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 类 Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        name<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span><span class=\"token comment\">// 给属性赋值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        age<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token comment\">//..</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Person</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小倩\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>●流程分析</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1.</span>加载<span class=\"token class-name\">Person</span>类信息<span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>只会加载一<span class=\"token operator\">-</span>次</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2.</span>在堆中分配空间<span class=\"token punctuation\">(</span>地址<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">3.</span>完成对象初始化<span class=\"token punctuation\">[</span><span class=\"token number\">3.1</span> 默认初始化age<span class=\"token operator\">=</span><span class=\"token number\">0</span> name<span class=\"token operator\">=</span><span class=\"token keyword\">null</span> <span class=\"token number\">3.2</span> 显式初始化age <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token number\">3.3</span> 构造器初始化 age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>，name <span class=\"token operator\">=</span> 小倩<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">4.</span>在对象在堆中的地址，返回给<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>p是对象名，也可以理解成是对象的引用<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"this\"><a class=\"anchor\" href=\"#this\">#</a> this</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//this.name 就是当前对象的属性 name</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//this.age 就是当前对象的属性 age</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简单的说，哪个对象调用，this 就代表哪个对象 (this 在堆中有个指向自己这个对象的地址)</p>\n<h1 id=\"this细节\"><a class=\"anchor\" href=\"#this细节\">#</a> this 细节</h1>\n<ol>\n<li>this 关键字可以用来访问本类的属性、方法、构造器</li>\n<li>this 用于区分当前类的属性和局部变量</li>\n<li>访问成员方法的语法: this. 方法名 (参数列表);</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThisDetail</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">/</span> <span class=\"token operator\">/</span>编写一个main方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">T</span> t1<span class=\"token operator\">=</span><span class=\"token function\">newT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 细节：访问成员方法的语法 :this. 方法名 (参数列表);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print1n</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f1()方法..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f2()方法..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 调用本类的 f1 </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 第一种方式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 第二种方式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>访问构造器语法: this (参数列表); 注意只能在构造器中使用</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 细节：访问构造器语法: this (参数列表);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 注意只能在构造器中使用 (即只能在构造器中访问另外一个构造器，即只能在构造器中访问另外一个构造器必须放在第一条语句）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 访问构造器语法: this (参数列表); 必须放置第一条语句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span> <span class=\"token punctuation\">.</span> out <span class=\"token punctuation\">.</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T()构造器\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 这里去访问 T (String name, int age) 构造器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"T(String name, int age) 构造器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>this 不能在类定义的外部使用，只能在类定义的方法中使用。</li>\n</ol>\n<pre><code class=\"language-java\">\n</code></pre>\n",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/20/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84/",
            "url": "https://love.youhuamao.xyz/2022/09/20/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84/",
            "title": "数组",
            "date_published": "2022-09-19T16:00:00.000Z",
            "content_html": "<p>数组可以存放多个同一类型的数据。数组也是一种数据类型，是引用类型。<br />\n即：数 (数据) 组 (一组) 就是一组数据</p>\n<h1 id=\"定义数组\"><a class=\"anchor\" href=\"#定义数组\">#</a> 定义数组</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hen <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> hen<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>动态初始化</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建了一个数组，</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  数据类型<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>或者<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先声明数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>静态初始化</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>元素值<span class=\"token punctuation\">,</span>元素值<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h1 id=\"数组赋值机制\"><a class=\"anchor\" href=\"#数组赋值机制\">#</a> 数组赋值机制</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基本数据类型赋值， 赋值方式为值拷贝</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>n2 <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n1=\"</span> <span class=\"token operator\">+</span> n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'n2=\"</span> <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//80 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 是一个地址，arr2 变化会影响到 arr1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 把 arr1 赋给 arr2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//arr1 = &#123;10,2,3&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//arr2 = &#123;10,2,3&#125;</span></pre></td></tr></table></figure><h1 id=\"数组拷贝\"><a class=\"anchor\" href=\"#数组拷贝\">#</a> 数组拷贝</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建一个新的数组 arr2, 开辟新的数据空间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 大小 arr1. length;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 遍历 arr1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>把每个元素拷贝到arr2对应的元素位置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">I</span></pre></td></tr></table></figure><h1 id=\"数组反转\"><a class=\"anchor\" href=\"#数组反转\">#</a> 数组反转</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 交换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算数组的长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 每次交换时，对应的下标是 arr [i] 和 arr [arr.length-i]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>inti<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token number\">1</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 逆序赋值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//1. 先创建一个新的数组 arr2, 大小 arr.length</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//2. 逆序遍历 arr, 将每个元素拷贝到 arr2 的元素中 (顺序拷贝)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//3. 建议增加一个循环变量 j -> 0 -> 5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 逆序遍历 arr </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    arr2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//4. 当 for 循环结束，arr2 就是一个逆序的数组 &#123;66，55，44, 33,222，6&#125;</span></pre></td></tr></table></figure><h1 id=\"数组扩容\"><a class=\"anchor\" href=\"#数组扩容\">#</a> 数组扩容</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 新建数组，让原数组指向新数组，完成扩容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrNew <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 遍历 arr 数组，依次将 arr 的元素拷贝到 arrNew 数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    arrNew<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 把 4 赋给 arrNew 最后一个元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    arrNew<span class=\"token punctuation\">[</span> arrNew。length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 让 arr 指向 arrNew ,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    arr <span class=\"token operator\">=</span> arrNew<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 可以写成 do while 循环，</span></pre></td></tr></table></figure><h1 id=\"二维数组\"><a class=\"anchor\" href=\"#二维数组\">#</a> 二维数组</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>数据类型 数组名<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  数据类型<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 数据类型 <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 列数不确定</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一 维数组，但是只是确定一维数组的个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr <span class=\"token punctuation\">.</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 遍历 arr 每个一维数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 给每个一维数组开空间 new</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 如果没有给一维数组 new , 那么 arr [i] 就是 null</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 遍历一维数组，并给维数组的每个元素赋值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// i = 0:1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// i = 1:2:2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// i = 2:3:3:3</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/14/Java/Java%E5%9F%BA%E7%A1%80/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "url": "https://love.youhuamao.xyz/2022/09/14/Java/Java%E5%9F%BA%E7%A1%80/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "title": "运算符",
            "date_published": "2022-09-13T16:00:00.000Z",
            "content_html": "<p>算数运算，位运算</p>\n<h1 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2.5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 作为独立的语句使用：前 ++ 和后 ++ 都完全等价于 i=i+1;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 作为表达式使用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 前 ++: ++i 先自增后赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 后 ++: i++ 先赋值后自增</span></pre></td></tr></table></figure><h1 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h1>\n<ul>\n<li>关系运算符的结果都是 boolean 型，也就是要么是 true, 要么是 false</li>\n<li>关系表达式经常用在 if 结构的条件中或循环结构的条件中</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token boolean\">false</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">!=</span> <span class=\"token number\">7</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> 7 false</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8 <span class=\"token punctuation\">></span></span> <span class=\"token number\">7</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">8</span> <span class=\"token operator\">>=</span> <span class=\"token number\">7</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">instanceof</span> 检查是否是类的对象 <span class=\"token string\">\"hsp\"</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span>  <span class=\"token boolean\">true</span></pre></td></tr></table></figure><h1 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">&amp;</span>h<span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>叫逻辑与<span class=\"token operator\">:</span>规则<span class=\"token operator\">:</span>当a和b同时为<span class=\"token boolean\">true</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token operator\">&amp;&amp;</span>b <span class=\"token operator\">:</span> <span class=\"token operator\">&amp;&amp;</span>叫短路与<span class=\"token operator\">:</span>规则<span class=\"token operator\">:</span>当a和b同时为<span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token operator\">|</span>b<span class=\"token operator\">:</span><span class=\"token operator\">|</span>叫逻辑或，规则<span class=\"token operator\">:</span>当a和b <span class=\"token punctuation\">,</span>有一<span class=\"token operator\">-</span>个为<span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token operator\">||</span>b<span class=\"token operator\">:</span><span class=\"token constant\">II</span>叫短路或，规则<span class=\"token operator\">:</span>当a和b，有一个为<span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">!</span>a<span class=\"token operator\">:</span>叫取反，或者非运算。当a为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>则结果为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>当a为<span class=\"token boolean\">false</span>是，结果为<span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token operator\">^</span>b<span class=\"token operator\">:</span>叫逻辑异或，当a和b不同时，则结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>否则为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span>和<span class=\"token operator\">&amp;</span>使用区别</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token operator\">&amp;&amp;</span>短路与<span class=\"token operator\">:</span>如果第一个条件为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>则第二个条件不会判断，最终结果为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> 效率高</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token operator\">&amp;</span>逻辑与<span class=\"token operator\">:</span>不管第一一个条件是否为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>第二个条件都要判断，效率低</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3.</span>开发中，我们使用的基本是短路与<span class=\"token operator\">&amp;&amp;</span>，效率高</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token constant\">II</span>和<span class=\"token operator\">|</span>使用区别</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">||</span>短路或<span class=\"token operator\">:</span>如果第个条件为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> 则第二个条件不会判断，最终结果为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>效率高</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">|</span>逻辑或<span class=\"token operator\">:</span>不管第一个条件是否为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> 第二个条件都要判断，效率低</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">3</span> 开发中，我们基本使用<span class=\"token operator\">||</span></pre></td></tr></table></figure><h1 id=\"三元运算符\"><a class=\"anchor\" href=\"#三元运算符\">#</a> 三元运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>条件表达式<span class=\"token operator\">?</span>表达式<span class=\"token number\">1</span><span class=\"token operator\">:</span>表达式<span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span>如果条件表达式为<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>运算后的结果是表达式<span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2.</span>如果条件表达式为<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>运算后的结果是表达式<span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> result<span class=\"token operator\">:</span> a<span class=\"token operator\">></span>b <span class=\"token operator\">?</span> a<span class=\"token operator\">++</span> <span class=\"token operator\">:</span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//98</span></pre></td></tr></table></figure><h1 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> myScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入名字\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入年龄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"进制\"><a class=\"anchor\" href=\"#进制\">#</a> 进制</h1>\n<ul>\n<li>二进制: 0,1 , 满 2 进 1. 以 0b 或 0B 开头。</li>\n<li>十进制: 0-9 满 10 进 1。</li>\n<li>八进制: 0-7，满 8 进 1. 以数字 0 开头表示。</li>\n<li>十六进制: 0-9 及 A (10)-F (15)，满 16 进 1. 以 0x 或 0X 开头表示。此处的 A-F 不区分大小写。</li>\n</ul>\n<h1 id=\"位运算符\"><a class=\"anchor\" href=\"#位运算符\">#</a> 位运算符</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>按位与<span class=\"token operator\">&amp;</span>    两位全为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>结果为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>否则为<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>按位或<span class=\"token operator\">|</span>    两位有一个为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>结果为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>否则为<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>按位异或<span class=\"token operator\">^</span>  两位一个为<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span> <span class=\"token operator\">-</span>个为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>结果为<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>否则为<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>按位取反<span class=\"token operator\">~</span>  <span class=\"token number\">0</span><span class=\"token operator\">-></span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">-></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1.</span> 二进制的最高位是符号位<span class=\"token operator\">:</span> <span class=\"token number\">0</span>表示正数<span class=\"token punctuation\">,</span><span class=\"token number\">1</span>表示负数<span class=\"token punctuation\">(</span>老韩口诀<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token operator\">-></span><span class=\"token number\">0</span> <span class=\"token number\">1</span><span class=\"token operator\">-></span><span class=\"token operator\">-</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2.</span> 正数的原码，反码，补码都一样<span class=\"token punctuation\">(</span>三码合<span class=\"token operator\">-</span>一<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3.</span> 负数的反码<span class=\"token operator\">=</span>它的原码符号位不变，其它位取反<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">-></span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">-></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4.</span> 负数的补码<span class=\"token operator\">=</span>它的反码<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span>负数的反码<span class=\"token operator\">=</span>负数的补码<span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token number\">0</span>的反码，补码都是<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">6.</span> java没有无符号数，换言之，java中的数都是有符号的</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">7.</span> 在计算机运算的时候，都是以补码的方式来运算的<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">8.</span> 当我们看运算结果的时候，要看他的原码<span class=\"token punctuation\">(</span>重点<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//1. 先得到 2 的补码 => 2 的原码 00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//2 的补码 00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//2. 3 的补码 3 的原码 00000000 00000000 00000000 00000011</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//3 的补码 00000000 00000000 00000000 00000011</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//3. 按位 & amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//00000000 00000000 00000000 00000011</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//00000000 00000000 00000000 00000010 &amp; 运算后的补码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 运算后的原码也是 00000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 结果就是 2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">pritln</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">&amp;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2 </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 推导</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//1. 先得到 - 2 的原码 10000000 00000000 00000000 00000010</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//2. -2 的反码        11111111 11111111 11111111 11111101</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//3. -2 的补码        11111111 11111111 11111111 11111110</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//4. ~-2 操作         00000000 00000000 00000000 00000001 运 算后的补码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//5. 运算后的原码就是   00000000 00000000 00000000 00000001 => 1 </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 还有 3 个位运算符 >>、&lt;&lt; 和 >> </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 运算规则:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">1.</span> 算术右移<span class=\"token operator\">>></span><span class=\"token operator\">:</span>低位溢出<span class=\"token punctuation\">,</span>符号位不变，并用符号位补溢出的高位</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">2.</span> 算术左移<span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">:</span>符号位不变低位补<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">3.</span> <span class=\"token operator\">>>></span>逻辑右移也叫无符号右移运算规则是<span class=\"token operator\">:</span>低位溢出，高位补<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">4.</span> 特别说明<span class=\"token operator\">:</span>没有<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span>符号</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">>></span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 => 00000001 => 00000000 本质 1 / 2 / 2 = 0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 => 00000001 => 00000100 本质 1 * 2 * 2 = 4</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "前端"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/13/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "https://love.youhuamao.xyz/2022/09/13/Java/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "数据类型",
            "date_published": "2022-09-12T16:00:00.000Z",
            "content_html": "<p>Java 数据类型有基本数据类型和引用数据类型</p>\n<h1 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h1>\n<h2 id=\"整数类型\"><a class=\"anchor\" href=\"#整数类型\">#</a> 整数类型</h2>\n<ul>\n<li>byte [字节] 1 字节<br />\n short [短整型] 2 字节<br />\n int [整型] 4 字节<br />\n long [长整型] 8 字节</li>\n</ul>\n<h2 id=\"浮点数类型\"><a class=\"anchor\" href=\"#浮点数类型\">#</a> 浮点数类型</h2>\n<ul>\n<li>单精度 float 4 字节<br />\n双精度 double 8 字节</li>\n</ul>\n<pre><code class=\"language-Java\">//Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加‘f’或‘F'\nfloat num1 = 1.1; //错\nfloat num2 = 1.1F; //对\ndouble num3 = 1.1; //对\ndouble num3 = 1.1f; //对\ndouble num5 = .123; //等价于0.123\nSystem.out.println(5.12e2);//512.0\nSystem.out.println(5.12E-2); //0.0512\n//浮点数使用陷阱: 2.7和8.1/3比较\ndouble num11 = 2. 7 ;\ndouble num12 = 8.1 / 3; //2.7\nSystem.out.println(num11);/ /2.7\nSystem.out.println(num12);//接近2.7的一个小数，而不是2.7 \n\n\n//得到一个重要的使用点:当我们对运算结果是小数的进行相等判断是，要小心\n//应该是以两个数的差值的绝对值，在某个精度范围类判断\nif( num11 == num12) &#123;\n    System.out.println(&quot;相等&quot; );\n&#125;\n//正确的写法\nif (Math。abs (num11 - num12) &lt; 0. 000001)&#123;\n    System.out.println(&quot;差值非常小，到我的规定精度，认为相等...&quot;);\n&#125;\n\n</code></pre>\n<h2 id=\"字符类型\"><a class=\"anchor\" href=\"#字符类型\">#</a> 字符类型</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> <span class=\"token char\">'\\t'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//    (这是制表位)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> c3 <span class=\"token operator\">=</span> <span class=\"token char\">'猫'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 猫</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> c4 <span class=\"token operator\">=</span> <span class=\"token number\">97</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 在 java 中， char 的本质是 一个整数，在输出时，是 unicode 码对 应的字符</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">char</span> c5 <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 'a' 对应的数字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//97</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//char 类型 是可以进行运算的， 相当于一个整数，因为它都对应有 Unicode 码 .</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//107 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">char</span> c5 <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//98+1==> 99</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//99</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//99-> 对应的字符 -> 编码表 ASCII (规定好的)=>C</span></pre></td></tr></table></figure><h2 id=\"布尔类型\"><a class=\"anchor\" href=\"#布尔类型\">#</a> 布尔类型</h2>\n<p>boolean false true</p>\n<h2 id=\"自动转换类型\"><a class=\"anchor\" href=\"#自动转换类型\">#</a> 自动转换类型</h2>\n<p>当 java 程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换<br />\n数据类型按精度 (容量) 大小排序为<br />\n char int long float double<br />\nbyte short int long float double</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 有多种类型的数据混合运算时，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>intn1<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">float</span> d1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误 n1 + 1.1 => 结果类型是 double</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 n1 + 1.1 => 结果类型是 double</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">float</span> d1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token number\">1.1F</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 n1 + 1.1 => 结果类型是 float</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//(byte, short) 和 char 之间不会相互自动转换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 当把具体数赋给 byte 时，(1) 先判断该数是否在 byte 范围内， 如果是就可以</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">byte</span> b1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 128-127 值给变量，判断范围</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//n2 是 int</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">byte</span> b2 <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，原因：如果是变量赋值，判断类型，int 字节比 byte 多</span></pre></td></tr></table></figure><h2 id=\"强制类型转换\"><a class=\"anchor\" href=\"#强制类型转换\">#</a> 强制类型转换</h2>\n<ul>\n<li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符 (), 但可能造成精度降低或溢出</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">3.5</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token operator\">*</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错，因为 dobule 不可以转 int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">3.5</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token operator\">*</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//44</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//char 类型可以保存 int 的常量值，但不能保存 int 的变量值，需要强转</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">char</span> c3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>m<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//100 对应的字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//byte,short 和 short 类型在进行运算时，当做 int 类型处理。</span></pre></td></tr></table></figure><h2 id=\"与string的转换\"><a class=\"anchor\" href=\"#与string的转换\">#</a> 与 String 的转换</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">1.1F</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> d1 <span class=\"token operator\">=</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> f1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> d1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> b1 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//String-> 对应的基本数据类型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">String</span> s5 <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">float</span> num3 <span class=\"token operator\">=</span> <span class=\"token class-name\">FLoat</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">long</span> num4 <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">byte</span> num5 <span class=\"token operator\">=</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseByte</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseBoolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">short</span> num6 <span class=\"token operator\">=</span> <span class=\"token class-name\">Short</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseShort</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">/</span> <span class=\"token operator\">/</span>解读</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>s5<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>得到s5字符串的第一个字符</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">rintln</span><span class=\"token punctuation\">(</span>s5<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习Java",
                "Java基础",
                "java"
            ]
        },
        {
            "id": "https://love.youhuamao.xyz/2022/09/12/shujuku/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://love.youhuamao.xyz/2022/09/12/shujuku/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "什么是数据库",
            "date_published": "2022-09-11T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是数据库\"><a class=\"anchor\" href=\"#什么是数据库\">#</a> 什么是数据库</h1>\n<ul>\n<li>数据库 (DB，DataBase)</li>\n<li>概念：数据仓库，软件，安装在操作系统（window，Linux，mac... 之上）SQL, 可以存储大量数据。500 万。</li>\n<li>作用：存储数据，管理数据</li>\n</ul>\n<h1 id=\"关系型数据库sql\"><a class=\"anchor\" href=\"#关系型数据库sql\">#</a> 关系型数据库 (SQL)</h1>\n<ul>\n<li>MySQL, Oracle, Sql Server, DB2, SQLlite</li>\n<li>通过表和表之间，行和列之间的关系进行数据的存储，学员信息表，考勤表。</li>\n</ul>\n<h1 id=\"非关系型数据库nosql-not-only\"><a class=\"anchor\" href=\"#非关系型数据库nosql-not-only\">#</a> 非关系型数据库 (NoSQL) Not Only</h1>\n<ul>\n<li>Redis, MongDB</li>\n<li>非关系型数据库，对象存储，通过对象的自身的属性来决定。</li>\n</ul>\n<h1 id=\"dbms数据库管理系统\"><a class=\"anchor\" href=\"#dbms数据库管理系统\">#</a> DBMS (数据库管理系统)</h1>\n<ul>\n<li>数据库的管理软件，科学有效的管理我们的数据。维护和获取数据；</li>\n<li>MySQL, 数据库管理系统！</li>\n</ul>\n<h1 id=\"创建数据库\"><a class=\"anchor\" href=\"#创建数据库\">#</a> 创建数据库</h1>\n<ul>\n<li>右键 -&gt; 创建数据库</li>\n<li>基字符集：utf8  数据库排序规则 utf8——general——cl</li>\n</ul>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        }
    ]
}